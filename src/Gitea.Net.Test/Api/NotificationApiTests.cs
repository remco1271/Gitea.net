/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Gitea.Net.Client;
using Gitea.Net.Api;
// uncomment below to import models
//using Gitea.Net.Model;

namespace Gitea.Net.Test.Api
{
    /// <summary>
    ///  Class for testing NotificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NotificationApiTests : IDisposable
    {
        private NotificationApi instance;

        public NotificationApiTests()
        {
            instance = new NotificationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NotificationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' NotificationApi
            //Assert.IsType<NotificationApi>(instance);
        }

        /// <summary>
        /// Test NotifyGetList
        /// </summary>
        [Fact]
        public void NotifyGetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? all = null;
            //List<string>? statusTypes = null;
            //List<string>? subjectType = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.NotifyGetList(all, statusTypes, subjectType, since, before, page, limit);
            //Assert.IsType<List<NotificationThread>>(response);
        }

        /// <summary>
        /// Test NotifyGetRepoList
        /// </summary>
        [Fact]
        public void NotifyGetRepoListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //bool? all = null;
            //List<string>? statusTypes = null;
            //List<string>? subjectType = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.NotifyGetRepoList(owner, repo, all, statusTypes, subjectType, since, before, page, limit);
            //Assert.IsType<List<NotificationThread>>(response);
        }

        /// <summary>
        /// Test NotifyGetThread
        /// </summary>
        [Fact]
        public void NotifyGetThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.NotifyGetThread(id);
            //Assert.IsType<NotificationThread>(response);
        }

        /// <summary>
        /// Test NotifyNewAvailable
        /// </summary>
        [Fact]
        public void NotifyNewAvailableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NotifyNewAvailable();
            //Assert.IsType<NotificationCount>(response);
        }

        /// <summary>
        /// Test NotifyReadList
        /// </summary>
        [Fact]
        public void NotifyReadListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? lastReadAt = null;
            //string? all = null;
            //List<string>? statusTypes = null;
            //string? toStatus = null;
            //var response = instance.NotifyReadList(lastReadAt, all, statusTypes, toStatus);
            //Assert.IsType<List<NotificationThread>>(response);
        }

        /// <summary>
        /// Test NotifyReadRepoList
        /// </summary>
        [Fact]
        public void NotifyReadRepoListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? all = null;
            //List<string>? statusTypes = null;
            //string? toStatus = null;
            //DateTime? lastReadAt = null;
            //var response = instance.NotifyReadRepoList(owner, repo, all, statusTypes, toStatus, lastReadAt);
            //Assert.IsType<List<NotificationThread>>(response);
        }

        /// <summary>
        /// Test NotifyReadThread
        /// </summary>
        [Fact]
        public void NotifyReadThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? toStatus = null;
            //var response = instance.NotifyReadThread(id, toStatus);
            //Assert.IsType<NotificationThread>(response);
        }
    }
}
