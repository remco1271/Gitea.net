/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Gitea.Net.Client;
using Gitea.Net.Api;
// uncomment below to import models
//using Gitea.Net.Model;

namespace Gitea.Net.Test.Api
{
    /// <summary>
    ///  Class for testing IssueApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IssueApiTests : IDisposable
    {
        private IssueApi instance;

        public IssueApiTests()
        {
            instance = new IssueApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IssueApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IssueApi
            //Assert.IsType<IssueApi>(instance);
        }

        /// <summary>
        /// Test IssueAddLabel
        /// </summary>
        [Fact]
        public void IssueAddLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //IssueLabelsOption? body = null;
            //var response = instance.IssueAddLabel(owner, repo, index, body);
            //Assert.IsType<List<Label>>(response);
        }

        /// <summary>
        /// Test IssueAddSubscription
        /// </summary>
        [Fact]
        public void IssueAddSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string user = null;
            //instance.IssueAddSubscription(owner, repo, index, user);
        }

        /// <summary>
        /// Test IssueAddTime
        /// </summary>
        [Fact]
        public void IssueAddTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //AddTimeOption? body = null;
            //var response = instance.IssueAddTime(owner, repo, index, body);
            //Assert.IsType<TrackedTime>(response);
        }

        /// <summary>
        /// Test IssueCheckSubscription
        /// </summary>
        [Fact]
        public void IssueCheckSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //var response = instance.IssueCheckSubscription(owner, repo, index);
            //Assert.IsType<WatchInfo>(response);
        }

        /// <summary>
        /// Test IssueClearLabels
        /// </summary>
        [Fact]
        public void IssueClearLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueClearLabels(owner, repo, index);
        }

        /// <summary>
        /// Test IssueCreateComment
        /// </summary>
        [Fact]
        public void IssueCreateCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //CreateIssueCommentOption? body = null;
            //var response = instance.IssueCreateComment(owner, repo, index, body);
            //Assert.IsType<Comment>(response);
        }

        /// <summary>
        /// Test IssueCreateIssue
        /// </summary>
        [Fact]
        public void IssueCreateIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateIssueOption? body = null;
            //var response = instance.IssueCreateIssue(owner, repo, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueCreateIssueAttachment
        /// </summary>
        [Fact]
        public void IssueCreateIssueAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //System.IO.Stream attachment = null;
            //string? name = null;
            //var response = instance.IssueCreateIssueAttachment(owner, repo, index, attachment, name);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueCreateIssueBlocking
        /// </summary>
        [Fact]
        public void IssueCreateIssueBlockingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //IssueMeta? body = null;
            //var response = instance.IssueCreateIssueBlocking(owner, repo, index, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueCreateIssueCommentAttachment
        /// </summary>
        [Fact]
        public void IssueCreateIssueCommentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //System.IO.Stream attachment = null;
            //string? name = null;
            //var response = instance.IssueCreateIssueCommentAttachment(owner, repo, id, attachment, name);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueCreateIssueDependencies
        /// </summary>
        [Fact]
        public void IssueCreateIssueDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //IssueMeta? body = null;
            //var response = instance.IssueCreateIssueDependencies(owner, repo, index, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueCreateLabel
        /// </summary>
        [Fact]
        public void IssueCreateLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateLabelOption? body = null;
            //var response = instance.IssueCreateLabel(owner, repo, body);
            //Assert.IsType<Label>(response);
        }

        /// <summary>
        /// Test IssueCreateMilestone
        /// </summary>
        [Fact]
        public void IssueCreateMilestoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateMilestoneOption? body = null;
            //var response = instance.IssueCreateMilestone(owner, repo, body);
            //Assert.IsType<Milestone>(response);
        }

        /// <summary>
        /// Test IssueDelete
        /// </summary>
        [Fact]
        public void IssueDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueDelete(owner, repo, index);
        }

        /// <summary>
        /// Test IssueDeleteComment
        /// </summary>
        [Fact]
        public void IssueDeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //instance.IssueDeleteComment(owner, repo, id);
        }

        /// <summary>
        /// Test IssueDeleteCommentDeprecated
        /// </summary>
        [Fact]
        public void IssueDeleteCommentDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int index = null;
            //long id = null;
            //instance.IssueDeleteCommentDeprecated(owner, repo, index, id);
        }

        /// <summary>
        /// Test IssueDeleteCommentReaction
        /// </summary>
        [Fact]
        public void IssueDeleteCommentReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditReactionOption? content = null;
            //instance.IssueDeleteCommentReaction(owner, repo, id, content);
        }

        /// <summary>
        /// Test IssueDeleteIssueAttachment
        /// </summary>
        [Fact]
        public void IssueDeleteIssueAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long attachmentId = null;
            //instance.IssueDeleteIssueAttachment(owner, repo, index, attachmentId);
        }

        /// <summary>
        /// Test IssueDeleteIssueCommentAttachment
        /// </summary>
        [Fact]
        public void IssueDeleteIssueCommentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //instance.IssueDeleteIssueCommentAttachment(owner, repo, id, attachmentId);
        }

        /// <summary>
        /// Test IssueDeleteIssueReaction
        /// </summary>
        [Fact]
        public void IssueDeleteIssueReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //EditReactionOption? content = null;
            //instance.IssueDeleteIssueReaction(owner, repo, index, content);
        }

        /// <summary>
        /// Test IssueDeleteLabel
        /// </summary>
        [Fact]
        public void IssueDeleteLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //instance.IssueDeleteLabel(owner, repo, id);
        }

        /// <summary>
        /// Test IssueDeleteMilestone
        /// </summary>
        [Fact]
        public void IssueDeleteMilestoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //instance.IssueDeleteMilestone(owner, repo, id);
        }

        /// <summary>
        /// Test IssueDeleteStopWatch
        /// </summary>
        [Fact]
        public void IssueDeleteStopWatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueDeleteStopWatch(owner, repo, index);
        }

        /// <summary>
        /// Test IssueDeleteSubscription
        /// </summary>
        [Fact]
        public void IssueDeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string user = null;
            //instance.IssueDeleteSubscription(owner, repo, index, user);
        }

        /// <summary>
        /// Test IssueDeleteTime
        /// </summary>
        [Fact]
        public void IssueDeleteTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //instance.IssueDeleteTime(owner, repo, index, id);
        }

        /// <summary>
        /// Test IssueEditComment
        /// </summary>
        [Fact]
        public void IssueEditCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditIssueCommentOption? body = null;
            //var response = instance.IssueEditComment(owner, repo, id, body);
            //Assert.IsType<Comment>(response);
        }

        /// <summary>
        /// Test IssueEditCommentDeprecated
        /// </summary>
        [Fact]
        public void IssueEditCommentDeprecatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int index = null;
            //long id = null;
            //EditIssueCommentOption? body = null;
            //var response = instance.IssueEditCommentDeprecated(owner, repo, index, id, body);
            //Assert.IsType<Comment>(response);
        }

        /// <summary>
        /// Test IssueEditIssue
        /// </summary>
        [Fact]
        public void IssueEditIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //EditIssueOption? body = null;
            //var response = instance.IssueEditIssue(owner, repo, index, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueEditIssueAttachment
        /// </summary>
        [Fact]
        public void IssueEditIssueAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long attachmentId = null;
            //EditAttachmentOptions? body = null;
            //var response = instance.IssueEditIssueAttachment(owner, repo, index, attachmentId, body);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueEditIssueCommentAttachment
        /// </summary>
        [Fact]
        public void IssueEditIssueCommentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //EditAttachmentOptions? body = null;
            //var response = instance.IssueEditIssueCommentAttachment(owner, repo, id, attachmentId, body);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueEditIssueDeadline
        /// </summary>
        [Fact]
        public void IssueEditIssueDeadlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //EditDeadlineOption? body = null;
            //var response = instance.IssueEditIssueDeadline(owner, repo, index, body);
            //Assert.IsType<IssueDeadline>(response);
        }

        /// <summary>
        /// Test IssueEditLabel
        /// </summary>
        [Fact]
        public void IssueEditLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditLabelOption? body = null;
            //var response = instance.IssueEditLabel(owner, repo, id, body);
            //Assert.IsType<Label>(response);
        }

        /// <summary>
        /// Test IssueEditMilestone
        /// </summary>
        [Fact]
        public void IssueEditMilestoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //EditMilestoneOption? body = null;
            //var response = instance.IssueEditMilestone(owner, repo, id, body);
            //Assert.IsType<Milestone>(response);
        }

        /// <summary>
        /// Test IssueGetComment
        /// </summary>
        [Fact]
        public void IssueGetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.IssueGetComment(owner, repo, id);
            //Assert.IsType<Comment>(response);
        }

        /// <summary>
        /// Test IssueGetCommentReactions
        /// </summary>
        [Fact]
        public void IssueGetCommentReactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.IssueGetCommentReactions(owner, repo, id);
            //Assert.IsType<List<Reaction>>(response);
        }

        /// <summary>
        /// Test IssueGetComments
        /// </summary>
        [Fact]
        public void IssueGetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //var response = instance.IssueGetComments(owner, repo, index, since, before);
            //Assert.IsType<List<Comment>>(response);
        }

        /// <summary>
        /// Test IssueGetCommentsAndTimeline
        /// </summary>
        [Fact]
        public void IssueGetCommentsAndTimelineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //DateTime? since = null;
            //int? page = null;
            //int? limit = null;
            //DateTime? before = null;
            //var response = instance.IssueGetCommentsAndTimeline(owner, repo, index, since, page, limit, before);
            //Assert.IsType<List<TimelineComment>>(response);
        }

        /// <summary>
        /// Test IssueGetIssue
        /// </summary>
        [Fact]
        public void IssueGetIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //var response = instance.IssueGetIssue(owner, repo, index);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueGetIssueAttachment
        /// </summary>
        [Fact]
        public void IssueGetIssueAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long attachmentId = null;
            //var response = instance.IssueGetIssueAttachment(owner, repo, index, attachmentId);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueGetIssueCommentAttachment
        /// </summary>
        [Fact]
        public void IssueGetIssueCommentAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //var response = instance.IssueGetIssueCommentAttachment(owner, repo, id, attachmentId);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test IssueGetIssueReactions
        /// </summary>
        [Fact]
        public void IssueGetIssueReactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueGetIssueReactions(owner, repo, index, page, limit);
            //Assert.IsType<List<Reaction>>(response);
        }

        /// <summary>
        /// Test IssueGetLabel
        /// </summary>
        [Fact]
        public void IssueGetLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.IssueGetLabel(owner, repo, id);
            //Assert.IsType<Label>(response);
        }

        /// <summary>
        /// Test IssueGetLabels
        /// </summary>
        [Fact]
        public void IssueGetLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //var response = instance.IssueGetLabels(owner, repo, index);
            //Assert.IsType<List<Label>>(response);
        }

        /// <summary>
        /// Test IssueGetMilestone
        /// </summary>
        [Fact]
        public void IssueGetMilestoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //var response = instance.IssueGetMilestone(owner, repo, id);
            //Assert.IsType<Milestone>(response);
        }

        /// <summary>
        /// Test IssueGetMilestonesList
        /// </summary>
        [Fact]
        public void IssueGetMilestonesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? state = null;
            //string? name = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueGetMilestonesList(owner, repo, state, name, page, limit);
            //Assert.IsType<List<Milestone>>(response);
        }

        /// <summary>
        /// Test IssueGetRepoComments
        /// </summary>
        [Fact]
        public void IssueGetRepoCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueGetRepoComments(owner, repo, since, before, page, limit);
            //Assert.IsType<List<Comment>>(response);
        }

        /// <summary>
        /// Test IssueListBlocks
        /// </summary>
        [Fact]
        public void IssueListBlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueListBlocks(owner, repo, index, page, limit);
            //Assert.IsType<List<Issue>>(response);
        }

        /// <summary>
        /// Test IssueListIssueAttachments
        /// </summary>
        [Fact]
        public void IssueListIssueAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //var response = instance.IssueListIssueAttachments(owner, repo, index);
            //Assert.IsType<List<Attachment>>(response);
        }

        /// <summary>
        /// Test IssueListIssueCommentAttachments
        /// </summary>
        [Fact]
        public void IssueListIssueCommentAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.IssueListIssueCommentAttachments(owner, repo, id);
            //Assert.IsType<List<Attachment>>(response);
        }

        /// <summary>
        /// Test IssueListIssueDependencies
        /// </summary>
        [Fact]
        public void IssueListIssueDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueListIssueDependencies(owner, repo, index, page, limit);
            //Assert.IsType<List<Issue>>(response);
        }

        /// <summary>
        /// Test IssueListIssues
        /// </summary>
        [Fact]
        public void IssueListIssuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? state = null;
            //string? labels = null;
            //string? q = null;
            //string? type = null;
            //string? milestones = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //string? createdBy = null;
            //string? assignedBy = null;
            //string? mentionedBy = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueListIssues(owner, repo, state, labels, q, type, milestones, since, before, createdBy, assignedBy, mentionedBy, page, limit);
            //Assert.IsType<List<Issue>>(response);
        }

        /// <summary>
        /// Test IssueListLabels
        /// </summary>
        [Fact]
        public void IssueListLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueListLabels(owner, repo, page, limit);
            //Assert.IsType<List<Label>>(response);
        }

        /// <summary>
        /// Test IssuePostCommentReaction
        /// </summary>
        [Fact]
        public void IssuePostCommentReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditReactionOption? content = null;
            //var response = instance.IssuePostCommentReaction(owner, repo, id, content);
            //Assert.IsType<Reaction>(response);
        }

        /// <summary>
        /// Test IssuePostIssueReaction
        /// </summary>
        [Fact]
        public void IssuePostIssueReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //EditReactionOption? content = null;
            //var response = instance.IssuePostIssueReaction(owner, repo, index, content);
            //Assert.IsType<Reaction>(response);
        }

        /// <summary>
        /// Test IssueRemoveIssueBlocking
        /// </summary>
        [Fact]
        public void IssueRemoveIssueBlockingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //IssueMeta? body = null;
            //var response = instance.IssueRemoveIssueBlocking(owner, repo, index, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueRemoveIssueDependencies
        /// </summary>
        [Fact]
        public void IssueRemoveIssueDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string index = null;
            //IssueMeta? body = null;
            //var response = instance.IssueRemoveIssueDependencies(owner, repo, index, body);
            //Assert.IsType<Issue>(response);
        }

        /// <summary>
        /// Test IssueRemoveLabel
        /// </summary>
        [Fact]
        public void IssueRemoveLabelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //instance.IssueRemoveLabel(owner, repo, index, id);
        }

        /// <summary>
        /// Test IssueReplaceLabels
        /// </summary>
        [Fact]
        public void IssueReplaceLabelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //IssueLabelsOption? body = null;
            //var response = instance.IssueReplaceLabels(owner, repo, index, body);
            //Assert.IsType<List<Label>>(response);
        }

        /// <summary>
        /// Test IssueResetTime
        /// </summary>
        [Fact]
        public void IssueResetTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueResetTime(owner, repo, index);
        }

        /// <summary>
        /// Test IssueSearchIssues
        /// </summary>
        [Fact]
        public void IssueSearchIssuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? state = null;
            //string? labels = null;
            //string? milestones = null;
            //string? q = null;
            //long? priorityRepoId = null;
            //string? type = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //bool? assigned = null;
            //bool? created = null;
            //bool? mentioned = null;
            //bool? reviewRequested = null;
            //bool? reviewed = null;
            //string? owner = null;
            //string? team = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueSearchIssues(state, labels, milestones, q, priorityRepoId, type, since, before, assigned, created, mentioned, reviewRequested, reviewed, owner, team, page, limit);
            //Assert.IsType<List<Issue>>(response);
        }

        /// <summary>
        /// Test IssueStartStopWatch
        /// </summary>
        [Fact]
        public void IssueStartStopWatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueStartStopWatch(owner, repo, index);
        }

        /// <summary>
        /// Test IssueStopStopWatch
        /// </summary>
        [Fact]
        public void IssueStopStopWatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.IssueStopStopWatch(owner, repo, index);
        }

        /// <summary>
        /// Test IssueSubscriptions
        /// </summary>
        [Fact]
        public void IssueSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueSubscriptions(owner, repo, index, page, limit);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test IssueTrackedTimes
        /// </summary>
        [Fact]
        public void IssueTrackedTimesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string? user = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.IssueTrackedTimes(owner, repo, index, user, since, before, page, limit);
            //Assert.IsType<List<TrackedTime>>(response);
        }

        /// <summary>
        /// Test MoveIssuePin
        /// </summary>
        [Fact]
        public void MoveIssuePinTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long position = null;
            //instance.MoveIssuePin(owner, repo, index, position);
        }

        /// <summary>
        /// Test PinIssue
        /// </summary>
        [Fact]
        public void PinIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.PinIssue(owner, repo, index);
        }

        /// <summary>
        /// Test UnpinIssue
        /// </summary>
        [Fact]
        public void UnpinIssueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.UnpinIssue(owner, repo, index);
        }
    }
}
