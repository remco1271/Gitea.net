/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MigrateRepoOptions options for migrating repository&#39;s this is used to interact with api v1
    /// </summary>
    [DataContract(Name = "MigrateRepoOptions")]
    public partial class MigrateRepoOptions : IValidatableObject
    {
        /// <summary>
        /// Defines Service
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceEnum
        {
            /// <summary>
            /// Enum Git for value: git
            /// </summary>
            [EnumMember(Value = "git")]
            Git = 1,

            /// <summary>
            /// Enum Github for value: github
            /// </summary>
            [EnumMember(Value = "github")]
            Github = 2,

            /// <summary>
            /// Enum Gitea for value: gitea
            /// </summary>
            [EnumMember(Value = "gitea")]
            Gitea = 3,

            /// <summary>
            /// Enum Gitlab for value: gitlab
            /// </summary>
            [EnumMember(Value = "gitlab")]
            Gitlab = 4,

            /// <summary>
            /// Enum Gogs for value: gogs
            /// </summary>
            [EnumMember(Value = "gogs")]
            Gogs = 5,

            /// <summary>
            /// Enum Onedev for value: onedev
            /// </summary>
            [EnumMember(Value = "onedev")]
            Onedev = 6,

            /// <summary>
            /// Enum Gitbucket for value: gitbucket
            /// </summary>
            [EnumMember(Value = "gitbucket")]
            Gitbucket = 7,

            /// <summary>
            /// Enum Codebase for value: codebase
            /// </summary>
            [EnumMember(Value = "codebase")]
            Codebase = 8
        }


        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name = "service", EmitDefaultValue = false)]
        public ServiceEnum? Service { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateRepoOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MigrateRepoOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateRepoOptions" /> class.
        /// </summary>
        /// <param name="authPassword">authPassword.</param>
        /// <param name="authToken">authToken.</param>
        /// <param name="authUsername">authUsername.</param>
        /// <param name="cloneAddr">cloneAddr (required).</param>
        /// <param name="description">description.</param>
        /// <param name="issues">issues.</param>
        /// <param name="labels">labels.</param>
        /// <param name="lfs">lfs.</param>
        /// <param name="lfsEndpoint">lfsEndpoint.</param>
        /// <param name="milestones">milestones.</param>
        /// <param name="mirror">mirror.</param>
        /// <param name="mirrorInterval">mirrorInterval.</param>
        /// <param name="varPrivate">varPrivate.</param>
        /// <param name="pullRequests">pullRequests.</param>
        /// <param name="releases">releases.</param>
        /// <param name="repoName">repoName (required).</param>
        /// <param name="repoOwner">Name of User or Organisation who will own Repo after migration.</param>
        /// <param name="service">service.</param>
        /// <param name="uid">deprecated (only for backwards compatibility).</param>
        /// <param name="wiki">wiki.</param>
        public MigrateRepoOptions(string authPassword = default(string), string authToken = default(string), string authUsername = default(string), string cloneAddr = default(string), string description = default(string), bool issues = default(bool), bool labels = default(bool), bool lfs = default(bool), string lfsEndpoint = default(string), bool milestones = default(bool), bool mirror = default(bool), string mirrorInterval = default(string), bool varPrivate = default(bool), bool pullRequests = default(bool), bool releases = default(bool), string repoName = default(string), string repoOwner = default(string), ServiceEnum? service = default(ServiceEnum?), long uid = default(long), bool wiki = default(bool))
        {
            // to ensure "cloneAddr" is required (not null)
            if (cloneAddr == null)
            {
                throw new ArgumentNullException("cloneAddr is a required property for MigrateRepoOptions and cannot be null");
            }
            this.CloneAddr = cloneAddr;
            // to ensure "repoName" is required (not null)
            if (repoName == null)
            {
                throw new ArgumentNullException("repoName is a required property for MigrateRepoOptions and cannot be null");
            }
            this.RepoName = repoName;
            this.AuthPassword = authPassword;
            this.AuthToken = authToken;
            this.AuthUsername = authUsername;
            this.Description = description;
            this.Issues = issues;
            this.Labels = labels;
            this.Lfs = lfs;
            this.LfsEndpoint = lfsEndpoint;
            this.Milestones = milestones;
            this.Mirror = mirror;
            this.MirrorInterval = mirrorInterval;
            this.Private = varPrivate;
            this.PullRequests = pullRequests;
            this.Releases = releases;
            this.RepoOwner = repoOwner;
            this.Service = service;
            this.Uid = uid;
            this.Wiki = wiki;
        }

        /// <summary>
        /// Gets or Sets AuthPassword
        /// </summary>
        [DataMember(Name = "auth_password", EmitDefaultValue = false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name = "auth_token", EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsername
        /// </summary>
        [DataMember(Name = "auth_username", EmitDefaultValue = false)]
        public string AuthUsername { get; set; }

        /// <summary>
        /// Gets or Sets CloneAddr
        /// </summary>
        [DataMember(Name = "clone_addr", IsRequired = true, EmitDefaultValue = true)]
        public string CloneAddr { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name = "issues", EmitDefaultValue = true)]
        public bool Issues { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = true)]
        public bool Labels { get; set; }

        /// <summary>
        /// Gets or Sets Lfs
        /// </summary>
        [DataMember(Name = "lfs", EmitDefaultValue = true)]
        public bool Lfs { get; set; }

        /// <summary>
        /// Gets or Sets LfsEndpoint
        /// </summary>
        [DataMember(Name = "lfs_endpoint", EmitDefaultValue = false)]
        public string LfsEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets Milestones
        /// </summary>
        [DataMember(Name = "milestones", EmitDefaultValue = true)]
        public bool Milestones { get; set; }

        /// <summary>
        /// Gets or Sets Mirror
        /// </summary>
        [DataMember(Name = "mirror", EmitDefaultValue = true)]
        public bool Mirror { get; set; }

        /// <summary>
        /// Gets or Sets MirrorInterval
        /// </summary>
        [DataMember(Name = "mirror_interval", EmitDefaultValue = false)]
        public string MirrorInterval { get; set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// Gets or Sets PullRequests
        /// </summary>
        [DataMember(Name = "pull_requests", EmitDefaultValue = true)]
        public bool PullRequests { get; set; }

        /// <summary>
        /// Gets or Sets Releases
        /// </summary>
        [DataMember(Name = "releases", EmitDefaultValue = true)]
        public bool Releases { get; set; }

        /// <summary>
        /// Gets or Sets RepoName
        /// </summary>
        [DataMember(Name = "repo_name", IsRequired = true, EmitDefaultValue = true)]
        public string RepoName { get; set; }

        /// <summary>
        /// Name of User or Organisation who will own Repo after migration
        /// </summary>
        /// <value>Name of User or Organisation who will own Repo after migration</value>
        [DataMember(Name = "repo_owner", EmitDefaultValue = false)]
        public string RepoOwner { get; set; }

        /// <summary>
        /// deprecated (only for backwards compatibility)
        /// </summary>
        /// <value>deprecated (only for backwards compatibility)</value>
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public long Uid { get; set; }

        /// <summary>
        /// Gets or Sets Wiki
        /// </summary>
        [DataMember(Name = "wiki", EmitDefaultValue = true)]
        public bool Wiki { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrateRepoOptions {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  AuthUsername: ").Append(AuthUsername).Append("\n");
            sb.Append("  CloneAddr: ").Append(CloneAddr).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Lfs: ").Append(Lfs).Append("\n");
            sb.Append("  LfsEndpoint: ").Append(LfsEndpoint).Append("\n");
            sb.Append("  Milestones: ").Append(Milestones).Append("\n");
            sb.Append("  Mirror: ").Append(Mirror).Append("\n");
            sb.Append("  MirrorInterval: ").Append(MirrorInterval).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  PullRequests: ").Append(PullRequests).Append("\n");
            sb.Append("  Releases: ").Append(Releases).Append("\n");
            sb.Append("  RepoName: ").Append(RepoName).Append("\n");
            sb.Append("  RepoOwner: ").Append(RepoOwner).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Wiki: ").Append(Wiki).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
