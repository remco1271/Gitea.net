/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActionVariable return value of the query API
    /// </summary>
    [DataContract(Name = "ActionVariable")]
    public partial class ActionVariable : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionVariable" /> class.
        /// </summary>
        /// <param name="data">the value of the variable.</param>
        /// <param name="name">the name of the variable.</param>
        /// <param name="ownerId">the owner to which the variable belongs.</param>
        /// <param name="repoId">the repository to which the variable belongs.</param>
        public ActionVariable(string data = default(string), string name = default(string), long ownerId = default(long), long repoId = default(long))
        {
            this.Data = data;
            this.Name = name;
            this.OwnerId = ownerId;
            this.RepoId = repoId;
        }

        /// <summary>
        /// the value of the variable
        /// </summary>
        /// <value>the value of the variable</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// the name of the variable
        /// </summary>
        /// <value>the name of the variable</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the owner to which the variable belongs
        /// </summary>
        /// <value>the owner to which the variable belongs</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public long OwnerId { get; set; }

        /// <summary>
        /// the repository to which the variable belongs
        /// </summary>
        /// <value>the repository to which the variable belongs</value>
        [DataMember(Name = "repo_id", EmitDefaultValue = false)]
        public long RepoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionVariable {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  RepoId: ").Append(RepoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
