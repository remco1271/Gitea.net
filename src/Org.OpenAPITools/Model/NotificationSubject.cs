/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationSubject contains the notification subject (Issue/Pull/Commit)
    /// </summary>
    [DataContract(Name = "NotificationSubject")]
    public partial class NotificationSubject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationSubject" /> class.
        /// </summary>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="latestCommentHtmlUrl">latestCommentHtmlUrl.</param>
        /// <param name="latestCommentUrl">latestCommentUrl.</param>
        /// <param name="state">StateType issue state type.</param>
        /// <param name="title">title.</param>
        /// <param name="type">NotifySubjectType represent type of notification subject.</param>
        /// <param name="url">url.</param>
        public NotificationSubject(string htmlUrl = default(string), string latestCommentHtmlUrl = default(string), string latestCommentUrl = default(string), string state = default(string), string title = default(string), string type = default(string), string url = default(string))
        {
            this.HtmlUrl = htmlUrl;
            this.LatestCommentHtmlUrl = latestCommentHtmlUrl;
            this.LatestCommentUrl = latestCommentUrl;
            this.State = state;
            this.Title = title;
            this.Type = type;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets LatestCommentHtmlUrl
        /// </summary>
        [DataMember(Name = "latest_comment_html_url", EmitDefaultValue = false)]
        public string LatestCommentHtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets LatestCommentUrl
        /// </summary>
        [DataMember(Name = "latest_comment_url", EmitDefaultValue = false)]
        public string LatestCommentUrl { get; set; }

        /// <summary>
        /// StateType issue state type
        /// </summary>
        /// <value>StateType issue state type</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// NotifySubjectType represent type of notification subject
        /// </summary>
        /// <value>NotifySubjectType represent type of notification subject</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationSubject {\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  LatestCommentHtmlUrl: ").Append(LatestCommentHtmlUrl).Append("\n");
            sb.Append("  LatestCommentUrl: ").Append(LatestCommentUrl).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
