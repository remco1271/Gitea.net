/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PullReview represents a pull request review
    /// </summary>
    [DataContract(Name = "PullReview")]
    public partial class PullReview : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullReview" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="commentsCount">commentsCount.</param>
        /// <param name="commitId">commitId.</param>
        /// <param name="dismissed">dismissed.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="official">official.</param>
        /// <param name="pullRequestUrl">pullRequestUrl.</param>
        /// <param name="stale">stale.</param>
        /// <param name="state">ReviewStateType review state type.</param>
        /// <param name="submittedAt">submittedAt.</param>
        /// <param name="team">team.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="user">user.</param>
        public PullReview(string body = default(string), long commentsCount = default(long), string commitId = default(string), bool dismissed = default(bool), string htmlUrl = default(string), long id = default(long), bool official = default(bool), string pullRequestUrl = default(string), bool stale = default(bool), string state = default(string), DateTime submittedAt = default(DateTime), Team team = default(Team), DateTime updatedAt = default(DateTime), User user = default(User))
        {
            this.Body = body;
            this.CommentsCount = commentsCount;
            this.CommitId = commitId;
            this.Dismissed = dismissed;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.Official = official;
            this.PullRequestUrl = pullRequestUrl;
            this.Stale = stale;
            this.State = state;
            this.SubmittedAt = submittedAt;
            this.Team = team;
            this.UpdatedAt = updatedAt;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name = "comments_count", EmitDefaultValue = false)]
        public long CommentsCount { get; set; }

        /// <summary>
        /// Gets or Sets CommitId
        /// </summary>
        [DataMember(Name = "commit_id", EmitDefaultValue = false)]
        public string CommitId { get; set; }

        /// <summary>
        /// Gets or Sets Dismissed
        /// </summary>
        [DataMember(Name = "dismissed", EmitDefaultValue = true)]
        public bool Dismissed { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Official
        /// </summary>
        [DataMember(Name = "official", EmitDefaultValue = true)]
        public bool Official { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestUrl
        /// </summary>
        [DataMember(Name = "pull_request_url", EmitDefaultValue = false)]
        public string PullRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets Stale
        /// </summary>
        [DataMember(Name = "stale", EmitDefaultValue = true)]
        public bool Stale { get; set; }

        /// <summary>
        /// ReviewStateType review state type
        /// </summary>
        /// <value>ReviewStateType review state type</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedAt
        /// </summary>
        [DataMember(Name = "submitted_at", EmitDefaultValue = false)]
        public DateTime SubmittedAt { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = false)]
        public Team Team { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PullReview {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  CommitId: ").Append(CommitId).Append("\n");
            sb.Append("  Dismissed: ").Append(Dismissed).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Official: ").Append(Official).Append("\n");
            sb.Append("  PullRequestUrl: ").Append(PullRequestUrl).Append("\n");
            sb.Append("  Stale: ").Append(Stale).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubmittedAt: ").Append(SubmittedAt).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
