/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrganizationPermissions list different users permissions on an organization
    /// </summary>
    [DataContract(Name = "OrganizationPermissions")]
    public partial class OrganizationPermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationPermissions" /> class.
        /// </summary>
        /// <param name="canCreateRepository">canCreateRepository.</param>
        /// <param name="canRead">canRead.</param>
        /// <param name="canWrite">canWrite.</param>
        /// <param name="isAdmin">isAdmin.</param>
        /// <param name="isOwner">isOwner.</param>
        public OrganizationPermissions(bool canCreateRepository = default(bool), bool canRead = default(bool), bool canWrite = default(bool), bool isAdmin = default(bool), bool isOwner = default(bool))
        {
            this.CanCreateRepository = canCreateRepository;
            this.CanRead = canRead;
            this.CanWrite = canWrite;
            this.IsAdmin = isAdmin;
            this.IsOwner = isOwner;
        }

        /// <summary>
        /// Gets or Sets CanCreateRepository
        /// </summary>
        [DataMember(Name = "can_create_repository", EmitDefaultValue = true)]
        public bool CanCreateRepository { get; set; }

        /// <summary>
        /// Gets or Sets CanRead
        /// </summary>
        [DataMember(Name = "can_read", EmitDefaultValue = true)]
        public bool CanRead { get; set; }

        /// <summary>
        /// Gets or Sets CanWrite
        /// </summary>
        [DataMember(Name = "can_write", EmitDefaultValue = true)]
        public bool CanWrite { get; set; }

        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name = "is_admin", EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Gets or Sets IsOwner
        /// </summary>
        [DataMember(Name = "is_owner", EmitDefaultValue = true)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationPermissions {\n");
            sb.Append("  CanCreateRepository: ").Append(CanCreateRepository).Append("\n");
            sb.Append("  CanRead: ").Append(CanRead).Append("\n");
            sb.Append("  CanWrite: ").Append(CanWrite).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
