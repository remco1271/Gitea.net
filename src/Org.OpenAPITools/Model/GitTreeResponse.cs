/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GitTreeResponse returns a git tree
    /// </summary>
    [DataContract(Name = "GitTreeResponse")]
    public partial class GitTreeResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GitTreeResponse" /> class.
        /// </summary>
        /// <param name="page">page.</param>
        /// <param name="sha">sha.</param>
        /// <param name="totalCount">totalCount.</param>
        /// <param name="tree">tree.</param>
        /// <param name="truncated">truncated.</param>
        /// <param name="url">url.</param>
        public GitTreeResponse(long page = default(long), string sha = default(string), long totalCount = default(long), List<GitEntry> tree = default(List<GitEntry>), bool truncated = default(bool), string url = default(string))
        {
            this.Page = page;
            this.Sha = sha;
            this.TotalCount = totalCount;
            this.Tree = tree;
            this.Truncated = truncated;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public long Page { get; set; }

        /// <summary>
        /// Gets or Sets Sha
        /// </summary>
        [DataMember(Name = "sha", EmitDefaultValue = false)]
        public string Sha { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name = "total_count", EmitDefaultValue = false)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets Tree
        /// </summary>
        [DataMember(Name = "tree", EmitDefaultValue = false)]
        public List<GitEntry> Tree { get; set; }

        /// <summary>
        /// Gets or Sets Truncated
        /// </summary>
        [DataMember(Name = "truncated", EmitDefaultValue = true)]
        public bool Truncated { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GitTreeResponse {\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Tree: ").Append(Tree).Append("\n");
            sb.Append("  Truncated: ").Append(Truncated).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
