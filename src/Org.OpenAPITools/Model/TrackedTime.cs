/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TrackedTime worked time for an issue / pr
    /// </summary>
    [DataContract(Name = "TrackedTime")]
    public partial class TrackedTime : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedTime" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="id">id.</param>
        /// <param name="issue">issue.</param>
        /// <param name="issueId">deprecated (only for backwards compatibility).</param>
        /// <param name="time">Time in seconds.</param>
        /// <param name="userId">deprecated (only for backwards compatibility).</param>
        /// <param name="userName">userName.</param>
        public TrackedTime(DateTime created = default(DateTime), long id = default(long), Issue issue = default(Issue), long issueId = default(long), long time = default(long), long userId = default(long), string userName = default(string))
        {
            this.Created = created;
            this.Id = id;
            this.Issue = issue;
            this.IssueId = issueId;
            this.Time = time;
            this.UserId = userId;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Issue
        /// </summary>
        [DataMember(Name = "issue", EmitDefaultValue = false)]
        public Issue Issue { get; set; }

        /// <summary>
        /// deprecated (only for backwards compatibility)
        /// </summary>
        /// <value>deprecated (only for backwards compatibility)</value>
        [DataMember(Name = "issue_id", EmitDefaultValue = false)]
        public long IssueId { get; set; }

        /// <summary>
        /// Time in seconds
        /// </summary>
        /// <value>Time in seconds</value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public long Time { get; set; }

        /// <summary>
        /// deprecated (only for backwards compatibility)
        /// </summary>
        /// <value>deprecated (only for backwards compatibility)</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public long UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackedTime {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Issue: ").Append(Issue).Append("\n");
            sb.Append("  IssueId: ").Append(IssueId).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
