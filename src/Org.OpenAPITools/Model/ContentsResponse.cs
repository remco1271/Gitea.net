/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContentsResponse contains information about a repo&#39;s entry&#39;s (dir, file, symlink, submodule) metadata and content
    /// </summary>
    [DataContract(Name = "ContentsResponse")]
    public partial class ContentsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContentsResponse" /> class.
        /// </summary>
        /// <param name="links">links.</param>
        /// <param name="content">&#x60;content&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null.</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        /// <param name="encoding">&#x60;encoding&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null.</param>
        /// <param name="gitUrl">gitUrl.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="lastCommitSha">lastCommitSha.</param>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="sha">sha.</param>
        /// <param name="size">size.</param>
        /// <param name="submoduleGitUrl">&#x60;submodule_git_url&#x60; is populated when &#x60;type&#x60; is &#x60;submodule&#x60;, otherwise null.</param>
        /// <param name="target">&#x60;target&#x60; is populated when &#x60;type&#x60; is &#x60;symlink&#x60;, otherwise null.</param>
        /// <param name="type">&#x60;type&#x60; will be &#x60;file&#x60;, &#x60;dir&#x60;, &#x60;symlink&#x60;, or &#x60;submodule&#x60;.</param>
        /// <param name="url">url.</param>
        public ContentsResponse(FileLinksResponse links = default(FileLinksResponse), string content = default(string), string downloadUrl = default(string), string encoding = default(string), string gitUrl = default(string), string htmlUrl = default(string), string lastCommitSha = default(string), string name = default(string), string path = default(string), string sha = default(string), long size = default(long), string submoduleGitUrl = default(string), string target = default(string), string type = default(string), string url = default(string))
        {
            this.Links = links;
            this.Content = content;
            this.DownloadUrl = downloadUrl;
            this.Encoding = encoding;
            this.GitUrl = gitUrl;
            this.HtmlUrl = htmlUrl;
            this.LastCommitSha = lastCommitSha;
            this.Name = name;
            this.Path = path;
            this.Sha = sha;
            this.Size = size;
            this.SubmoduleGitUrl = submoduleGitUrl;
            this.Target = target;
            this.Type = type;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public FileLinksResponse Links { get; set; }

        /// <summary>
        /// &#x60;content&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null
        /// </summary>
        /// <value>&#x60;content&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "download_url", EmitDefaultValue = false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// &#x60;encoding&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null
        /// </summary>
        /// <value>&#x60;encoding&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null</value>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets GitUrl
        /// </summary>
        [DataMember(Name = "git_url", EmitDefaultValue = false)]
        public string GitUrl { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets LastCommitSha
        /// </summary>
        [DataMember(Name = "last_commit_sha", EmitDefaultValue = false)]
        public string LastCommitSha { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Sha
        /// </summary>
        [DataMember(Name = "sha", EmitDefaultValue = false)]
        public string Sha { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// &#x60;submodule_git_url&#x60; is populated when &#x60;type&#x60; is &#x60;submodule&#x60;, otherwise null
        /// </summary>
        /// <value>&#x60;submodule_git_url&#x60; is populated when &#x60;type&#x60; is &#x60;submodule&#x60;, otherwise null</value>
        [DataMember(Name = "submodule_git_url", EmitDefaultValue = false)]
        public string SubmoduleGitUrl { get; set; }

        /// <summary>
        /// &#x60;target&#x60; is populated when &#x60;type&#x60; is &#x60;symlink&#x60;, otherwise null
        /// </summary>
        /// <value>&#x60;target&#x60; is populated when &#x60;type&#x60; is &#x60;symlink&#x60;, otherwise null</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public string Target { get; set; }

        /// <summary>
        /// &#x60;type&#x60; will be &#x60;file&#x60;, &#x60;dir&#x60;, &#x60;symlink&#x60;, or &#x60;submodule&#x60;
        /// </summary>
        /// <value>&#x60;type&#x60; will be &#x60;file&#x60;, &#x60;dir&#x60;, &#x60;symlink&#x60;, or &#x60;submodule&#x60;</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContentsResponse {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  GitUrl: ").Append(GitUrl).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  LastCommitSha: ").Append(LastCommitSha).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SubmoduleGitUrl: ").Append(SubmoduleGitUrl).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
