/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
    /// </summary>
    [DataContract(Name = "NodeInfo")]
    public partial class NodeInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeInfo" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="openRegistrations">openRegistrations.</param>
        /// <param name="protocols">protocols.</param>
        /// <param name="services">services.</param>
        /// <param name="software">software.</param>
        /// <param name="usage">usage.</param>
        /// <param name="varVersion">varVersion.</param>
        public NodeInfo(Object metadata = default(Object), bool openRegistrations = default(bool), List<string> protocols = default(List<string>), NodeInfoServices services = default(NodeInfoServices), NodeInfoSoftware software = default(NodeInfoSoftware), NodeInfoUsage usage = default(NodeInfoUsage), string varVersion = default(string))
        {
            this.Metadata = metadata;
            this.OpenRegistrations = openRegistrations;
            this.Protocols = protocols;
            this.Services = services;
            this.Software = software;
            this.Usage = usage;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets OpenRegistrations
        /// </summary>
        [DataMember(Name = "openRegistrations", EmitDefaultValue = true)]
        public bool OpenRegistrations { get; set; }

        /// <summary>
        /// Gets or Sets Protocols
        /// </summary>
        [DataMember(Name = "protocols", EmitDefaultValue = false)]
        public List<string> Protocols { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public NodeInfoServices Services { get; set; }

        /// <summary>
        /// Gets or Sets Software
        /// </summary>
        [DataMember(Name = "software", EmitDefaultValue = false)]
        public NodeInfoSoftware Software { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", EmitDefaultValue = false)]
        public NodeInfoUsage Usage { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeInfo {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OpenRegistrations: ").Append(OpenRegistrations).Append("\n");
            sb.Append("  Protocols: ").Append(Protocols).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Software: ").Append(Software).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
