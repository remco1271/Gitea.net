/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract(Name = "Activity")]
    public partial class Activity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="actUser">actUser.</param>
        /// <param name="actUserId">actUserId.</param>
        /// <param name="comment">comment.</param>
        /// <param name="commentId">commentId.</param>
        /// <param name="content">content.</param>
        /// <param name="created">created.</param>
        /// <param name="id">id.</param>
        /// <param name="isPrivate">isPrivate.</param>
        /// <param name="opType">opType.</param>
        /// <param name="refName">refName.</param>
        /// <param name="repo">repo.</param>
        /// <param name="repoId">repoId.</param>
        /// <param name="userId">userId.</param>
        public Activity(User actUser = default(User), long actUserId = default(long), Comment comment = default(Comment), long commentId = default(long), string content = default(string), DateTime created = default(DateTime), long id = default(long), bool isPrivate = default(bool), string opType = default(string), string refName = default(string), Repository repo = default(Repository), long repoId = default(long), long userId = default(long))
        {
            this.ActUser = actUser;
            this.ActUserId = actUserId;
            this.Comment = comment;
            this.CommentId = commentId;
            this.Content = content;
            this.Created = created;
            this.Id = id;
            this.IsPrivate = isPrivate;
            this.OpType = opType;
            this.RefName = refName;
            this.Repo = repo;
            this.RepoId = repoId;
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets ActUser
        /// </summary>
        [DataMember(Name = "act_user", EmitDefaultValue = false)]
        public User ActUser { get; set; }

        /// <summary>
        /// Gets or Sets ActUserId
        /// </summary>
        [DataMember(Name = "act_user_id", EmitDefaultValue = false)]
        public long ActUserId { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public Comment Comment { get; set; }

        /// <summary>
        /// Gets or Sets CommentId
        /// </summary>
        [DataMember(Name = "comment_id", EmitDefaultValue = false)]
        public long CommentId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsPrivate
        /// </summary>
        [DataMember(Name = "is_private", EmitDefaultValue = true)]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets OpType
        /// </summary>
        [DataMember(Name = "op_type", EmitDefaultValue = false)]
        public string OpType { get; set; }

        /// <summary>
        /// Gets or Sets RefName
        /// </summary>
        [DataMember(Name = "ref_name", EmitDefaultValue = false)]
        public string RefName { get; set; }

        /// <summary>
        /// Gets or Sets Repo
        /// </summary>
        [DataMember(Name = "repo", EmitDefaultValue = false)]
        public Repository Repo { get; set; }

        /// <summary>
        /// Gets or Sets RepoId
        /// </summary>
        [DataMember(Name = "repo_id", EmitDefaultValue = false)]
        public long RepoId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public long UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  ActUser: ").Append(ActUser).Append("\n");
            sb.Append("  ActUserId: ").Append(ActUserId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommentId: ").Append(CommentId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  OpType: ").Append(OpType).Append("\n");
            sb.Append("  RefName: ").Append(RefName).Append("\n");
            sb.Append("  Repo: ").Append(Repo).Append("\n");
            sb.Append("  RepoId: ").Append(RepoId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
