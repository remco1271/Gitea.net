/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PullRequest represents a pull request
    /// </summary>
    [DataContract(Name = "PullRequest")]
    public partial class PullRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullRequest" /> class.
        /// </summary>
        /// <param name="additions">additions.</param>
        /// <param name="allowMaintainerEdit">allowMaintainerEdit.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignees">assignees.</param>
        /// <param name="varBase">varBase.</param>
        /// <param name="body">body.</param>
        /// <param name="changedFiles">changedFiles.</param>
        /// <param name="closedAt">closedAt.</param>
        /// <param name="comments">comments.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="deletions">deletions.</param>
        /// <param name="diffUrl">diffUrl.</param>
        /// <param name="draft">draft.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="head">head.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="isLocked">isLocked.</param>
        /// <param name="labels">labels.</param>
        /// <param name="mergeBase">mergeBase.</param>
        /// <param name="mergeCommitSha">mergeCommitSha.</param>
        /// <param name="mergeable">mergeable.</param>
        /// <param name="merged">merged.</param>
        /// <param name="mergedAt">mergedAt.</param>
        /// <param name="mergedBy">mergedBy.</param>
        /// <param name="milestone">milestone.</param>
        /// <param name="number">number.</param>
        /// <param name="patchUrl">patchUrl.</param>
        /// <param name="pinOrder">pinOrder.</param>
        /// <param name="requestedReviewers">requestedReviewers.</param>
        /// <param name="reviewComments">number of review comments made on the diff of a PR review (not including comments on commits or issues in a PR).</param>
        /// <param name="state">StateType issue state type.</param>
        /// <param name="title">title.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="url">url.</param>
        /// <param name="user">user.</param>
        public PullRequest(long additions = default(long), bool allowMaintainerEdit = default(bool), User assignee = default(User), List<User> assignees = default(List<User>), PRBranchInfo varBase = default(PRBranchInfo), string body = default(string), long changedFiles = default(long), DateTime closedAt = default(DateTime), long comments = default(long), DateTime createdAt = default(DateTime), long deletions = default(long), string diffUrl = default(string), bool draft = default(bool), DateTime dueDate = default(DateTime), PRBranchInfo head = default(PRBranchInfo), string htmlUrl = default(string), long id = default(long), bool isLocked = default(bool), List<Label> labels = default(List<Label>), string mergeBase = default(string), string mergeCommitSha = default(string), bool mergeable = default(bool), bool merged = default(bool), DateTime mergedAt = default(DateTime), User mergedBy = default(User), Milestone milestone = default(Milestone), long number = default(long), string patchUrl = default(string), long pinOrder = default(long), List<User> requestedReviewers = default(List<User>), long reviewComments = default(long), string state = default(string), string title = default(string), DateTime updatedAt = default(DateTime), string url = default(string), User user = default(User))
        {
            this.Additions = additions;
            this.AllowMaintainerEdit = allowMaintainerEdit;
            this.Assignee = assignee;
            this.Assignees = assignees;
            this.Base = varBase;
            this.Body = body;
            this.ChangedFiles = changedFiles;
            this.ClosedAt = closedAt;
            this.Comments = comments;
            this.CreatedAt = createdAt;
            this.Deletions = deletions;
            this.DiffUrl = diffUrl;
            this.Draft = draft;
            this.DueDate = dueDate;
            this.Head = head;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IsLocked = isLocked;
            this.Labels = labels;
            this.MergeBase = mergeBase;
            this.MergeCommitSha = mergeCommitSha;
            this.Mergeable = mergeable;
            this.Merged = merged;
            this.MergedAt = mergedAt;
            this.MergedBy = mergedBy;
            this.Milestone = milestone;
            this.Number = number;
            this.PatchUrl = patchUrl;
            this.PinOrder = pinOrder;
            this.RequestedReviewers = requestedReviewers;
            this.ReviewComments = reviewComments;
            this.State = state;
            this.Title = title;
            this.UpdatedAt = updatedAt;
            this.Url = url;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Additions
        /// </summary>
        [DataMember(Name = "additions", EmitDefaultValue = false)]
        public long Additions { get; set; }

        /// <summary>
        /// Gets or Sets AllowMaintainerEdit
        /// </summary>
        [DataMember(Name = "allow_maintainer_edit", EmitDefaultValue = true)]
        public bool AllowMaintainerEdit { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public User Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [DataMember(Name = "assignees", EmitDefaultValue = false)]
        public List<User> Assignees { get; set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [DataMember(Name = "base", EmitDefaultValue = false)]
        public PRBranchInfo Base { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ChangedFiles
        /// </summary>
        [DataMember(Name = "changed_files", EmitDefaultValue = false)]
        public long ChangedFiles { get; set; }

        /// <summary>
        /// Gets or Sets ClosedAt
        /// </summary>
        [DataMember(Name = "closed_at", EmitDefaultValue = false)]
        public DateTime ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public long Comments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Deletions
        /// </summary>
        [DataMember(Name = "deletions", EmitDefaultValue = false)]
        public long Deletions { get; set; }

        /// <summary>
        /// Gets or Sets DiffUrl
        /// </summary>
        [DataMember(Name = "diff_url", EmitDefaultValue = false)]
        public string DiffUrl { get; set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [DataMember(Name = "draft", EmitDefaultValue = true)]
        public bool Draft { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [DataMember(Name = "head", EmitDefaultValue = false)]
        public PRBranchInfo Head { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name = "is_locked", EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<Label> Labels { get; set; }

        /// <summary>
        /// Gets or Sets MergeBase
        /// </summary>
        [DataMember(Name = "merge_base", EmitDefaultValue = false)]
        public string MergeBase { get; set; }

        /// <summary>
        /// Gets or Sets MergeCommitSha
        /// </summary>
        [DataMember(Name = "merge_commit_sha", EmitDefaultValue = false)]
        public string MergeCommitSha { get; set; }

        /// <summary>
        /// Gets or Sets Mergeable
        /// </summary>
        [DataMember(Name = "mergeable", EmitDefaultValue = true)]
        public bool Mergeable { get; set; }

        /// <summary>
        /// Gets or Sets Merged
        /// </summary>
        [DataMember(Name = "merged", EmitDefaultValue = true)]
        public bool Merged { get; set; }

        /// <summary>
        /// Gets or Sets MergedAt
        /// </summary>
        [DataMember(Name = "merged_at", EmitDefaultValue = false)]
        public DateTime MergedAt { get; set; }

        /// <summary>
        /// Gets or Sets MergedBy
        /// </summary>
        [DataMember(Name = "merged_by", EmitDefaultValue = false)]
        public User MergedBy { get; set; }

        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [DataMember(Name = "milestone", EmitDefaultValue = false)]
        public Milestone Milestone { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public long Number { get; set; }

        /// <summary>
        /// Gets or Sets PatchUrl
        /// </summary>
        [DataMember(Name = "patch_url", EmitDefaultValue = false)]
        public string PatchUrl { get; set; }

        /// <summary>
        /// Gets or Sets PinOrder
        /// </summary>
        [DataMember(Name = "pin_order", EmitDefaultValue = false)]
        public long PinOrder { get; set; }

        /// <summary>
        /// Gets or Sets RequestedReviewers
        /// </summary>
        [DataMember(Name = "requested_reviewers", EmitDefaultValue = false)]
        public List<User> RequestedReviewers { get; set; }

        /// <summary>
        /// number of review comments made on the diff of a PR review (not including comments on commits or issues in a PR)
        /// </summary>
        /// <value>number of review comments made on the diff of a PR review (not including comments on commits or issues in a PR)</value>
        [DataMember(Name = "review_comments", EmitDefaultValue = false)]
        public long ReviewComments { get; set; }

        /// <summary>
        /// StateType issue state type
        /// </summary>
        /// <value>StateType issue state type</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PullRequest {\n");
            sb.Append("  Additions: ").Append(Additions).Append("\n");
            sb.Append("  AllowMaintainerEdit: ").Append(AllowMaintainerEdit).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ChangedFiles: ").Append(ChangedFiles).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Deletions: ").Append(Deletions).Append("\n");
            sb.Append("  DiffUrl: ").Append(DiffUrl).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  MergeBase: ").Append(MergeBase).Append("\n");
            sb.Append("  MergeCommitSha: ").Append(MergeCommitSha).Append("\n");
            sb.Append("  Mergeable: ").Append(Mergeable).Append("\n");
            sb.Append("  Merged: ").Append(Merged).Append("\n");
            sb.Append("  MergedAt: ").Append(MergedAt).Append("\n");
            sb.Append("  MergedBy: ").Append(MergedBy).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PatchUrl: ").Append(PatchUrl).Append("\n");
            sb.Append("  PinOrder: ").Append(PinOrder).Append("\n");
            sb.Append("  RequestedReviewers: ").Append(RequestedReviewers).Append("\n");
            sb.Append("  ReviewComments: ").Append(ReviewComments).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
