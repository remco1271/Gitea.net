/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChangeFilesOptions options for creating, updating or deleting multiple files Note: &#x60;author&#x60; and &#x60;committer&#x60; are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
    /// </summary>
    [DataContract(Name = "ChangeFilesOptions")]
    public partial class ChangeFilesOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeFilesOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeFilesOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeFilesOptions" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="branch">branch (optional) to base this file from. if not given, the default branch is used.</param>
        /// <param name="committer">committer.</param>
        /// <param name="dates">dates.</param>
        /// <param name="files">list of file operations (required).</param>
        /// <param name="message">message (optional) for the commit of this file. if not supplied, a default message will be used.</param>
        /// <param name="newBranch">new_branch (optional) will make a new branch from &#x60;branch&#x60; before creating the file.</param>
        /// <param name="signoff">Add a Signed-off-by trailer by the committer at the end of the commit log message..</param>
        public ChangeFilesOptions(Identity author = default(Identity), string branch = default(string), Identity committer = default(Identity), CommitDateOptions dates = default(CommitDateOptions), List<ChangeFileOperation> files = default(List<ChangeFileOperation>), string message = default(string), string newBranch = default(string), bool signoff = default(bool))
        {
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for ChangeFilesOptions and cannot be null");
            }
            this.Files = files;
            this.Author = author;
            this.Branch = branch;
            this.Committer = committer;
            this.Dates = dates;
            this.Message = message;
            this.NewBranch = newBranch;
            this.Signoff = signoff;
        }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public Identity Author { get; set; }

        /// <summary>
        /// branch (optional) to base this file from. if not given, the default branch is used
        /// </summary>
        /// <value>branch (optional) to base this file from. if not given, the default branch is used</value>
        [DataMember(Name = "branch", EmitDefaultValue = false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets Committer
        /// </summary>
        [DataMember(Name = "committer", EmitDefaultValue = false)]
        public Identity Committer { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public CommitDateOptions Dates { get; set; }

        /// <summary>
        /// list of file operations
        /// </summary>
        /// <value>list of file operations</value>
        [DataMember(Name = "files", IsRequired = true, EmitDefaultValue = true)]
        public List<ChangeFileOperation> Files { get; set; }

        /// <summary>
        /// message (optional) for the commit of this file. if not supplied, a default message will be used
        /// </summary>
        /// <value>message (optional) for the commit of this file. if not supplied, a default message will be used</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// new_branch (optional) will make a new branch from &#x60;branch&#x60; before creating the file
        /// </summary>
        /// <value>new_branch (optional) will make a new branch from &#x60;branch&#x60; before creating the file</value>
        [DataMember(Name = "new_branch", EmitDefaultValue = false)]
        public string NewBranch { get; set; }

        /// <summary>
        /// Add a Signed-off-by trailer by the committer at the end of the commit log message.
        /// </summary>
        /// <value>Add a Signed-off-by trailer by the committer at the end of the commit log message.</value>
        [DataMember(Name = "signoff", EmitDefaultValue = true)]
        public bool Signoff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeFilesOptions {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Committer: ").Append(Committer).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NewBranch: ").Append(NewBranch).Append("\n");
            sb.Append("  Signoff: ").Append(Signoff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
