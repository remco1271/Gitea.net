/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MarkdownOption markdown options
    /// </summary>
    [DataContract(Name = "MarkdownOption")]
    public partial class MarkdownOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkdownOption" /> class.
        /// </summary>
        /// <param name="context">Context to render  in: body.</param>
        /// <param name="mode">Mode to render (comment, gfm, markdown)  in: body.</param>
        /// <param name="text">Text markdown to render  in: body.</param>
        /// <param name="wiki">Is it a wiki page ?  in: body.</param>
        public MarkdownOption(string context = default(string), string mode = default(string), string text = default(string), bool wiki = default(bool))
        {
            this.Context = context;
            this.Mode = mode;
            this.Text = text;
            this.Wiki = wiki;
        }

        /// <summary>
        /// Context to render  in: body
        /// </summary>
        /// <value>Context to render  in: body</value>
        [DataMember(Name = "Context", EmitDefaultValue = false)]
        public string Context { get; set; }

        /// <summary>
        /// Mode to render (comment, gfm, markdown)  in: body
        /// </summary>
        /// <value>Mode to render (comment, gfm, markdown)  in: body</value>
        [DataMember(Name = "Mode", EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// Text markdown to render  in: body
        /// </summary>
        /// <value>Text markdown to render  in: body</value>
        [DataMember(Name = "Text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Is it a wiki page ?  in: body
        /// </summary>
        /// <value>Is it a wiki page ?  in: body</value>
        [DataMember(Name = "Wiki", EmitDefaultValue = true)]
        public bool Wiki { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkdownOption {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Wiki: ").Append(Wiki).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
