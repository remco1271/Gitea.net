/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NodeInfoSoftware contains Metadata about server software in use
    /// </summary>
    [DataContract(Name = "NodeInfoSoftware")]
    public partial class NodeInfoSoftware : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeInfoSoftware" /> class.
        /// </summary>
        /// <param name="homepage">homepage.</param>
        /// <param name="name">name.</param>
        /// <param name="repository">repository.</param>
        /// <param name="varVersion">varVersion.</param>
        public NodeInfoSoftware(string homepage = default(string), string name = default(string), string repository = default(string), string varVersion = default(string))
        {
            this.Homepage = homepage;
            this.Name = name;
            this.Repository = repository;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Homepage
        /// </summary>
        [DataMember(Name = "homepage", EmitDefaultValue = false)]
        public string Homepage { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeInfoSoftware {\n");
            sb.Append("  Homepage: ").Append(Homepage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
