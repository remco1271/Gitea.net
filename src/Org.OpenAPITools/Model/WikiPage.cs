/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WikiPage a wiki page
    /// </summary>
    [DataContract(Name = "WikiPage")]
    public partial class WikiPage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WikiPage" /> class.
        /// </summary>
        /// <param name="commitCount">commitCount.</param>
        /// <param name="contentBase64">Page content, base64 encoded.</param>
        /// <param name="footer">footer.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="lastCommit">lastCommit.</param>
        /// <param name="sidebar">sidebar.</param>
        /// <param name="subUrl">subUrl.</param>
        /// <param name="title">title.</param>
        public WikiPage(long commitCount = default(long), string contentBase64 = default(string), string footer = default(string), string htmlUrl = default(string), WikiCommit lastCommit = default(WikiCommit), string sidebar = default(string), string subUrl = default(string), string title = default(string))
        {
            this.CommitCount = commitCount;
            this.ContentBase64 = contentBase64;
            this.Footer = footer;
            this.HtmlUrl = htmlUrl;
            this.LastCommit = lastCommit;
            this.Sidebar = sidebar;
            this.SubUrl = subUrl;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets CommitCount
        /// </summary>
        [DataMember(Name = "commit_count", EmitDefaultValue = false)]
        public long CommitCount { get; set; }

        /// <summary>
        /// Page content, base64 encoded
        /// </summary>
        /// <value>Page content, base64 encoded</value>
        [DataMember(Name = "content_base64", EmitDefaultValue = false)]
        public string ContentBase64 { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name = "footer", EmitDefaultValue = false)]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets LastCommit
        /// </summary>
        [DataMember(Name = "last_commit", EmitDefaultValue = false)]
        public WikiCommit LastCommit { get; set; }

        /// <summary>
        /// Gets or Sets Sidebar
        /// </summary>
        [DataMember(Name = "sidebar", EmitDefaultValue = false)]
        public string Sidebar { get; set; }

        /// <summary>
        /// Gets or Sets SubUrl
        /// </summary>
        [DataMember(Name = "sub_url", EmitDefaultValue = false)]
        public string SubUrl { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WikiPage {\n");
            sb.Append("  CommitCount: ").Append(CommitCount).Append("\n");
            sb.Append("  ContentBase64: ").Append(ContentBase64).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  LastCommit: ").Append(LastCommit).Append("\n");
            sb.Append("  Sidebar: ").Append(Sidebar).Append("\n");
            sb.Append("  SubUrl: ").Append(SubUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
