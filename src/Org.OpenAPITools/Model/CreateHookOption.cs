/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateHookOption options when create a hook
    /// </summary>
    [DataContract(Name = "CreateHookOption")]
    public partial class CreateHookOption : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Dingtalk for value: dingtalk
            /// </summary>
            [EnumMember(Value = "dingtalk")]
            Dingtalk = 1,

            /// <summary>
            /// Enum Discord for value: discord
            /// </summary>
            [EnumMember(Value = "discord")]
            Discord = 2,

            /// <summary>
            /// Enum Gitea for value: gitea
            /// </summary>
            [EnumMember(Value = "gitea")]
            Gitea = 3,

            /// <summary>
            /// Enum Gogs for value: gogs
            /// </summary>
            [EnumMember(Value = "gogs")]
            Gogs = 4,

            /// <summary>
            /// Enum Msteams for value: msteams
            /// </summary>
            [EnumMember(Value = "msteams")]
            Msteams = 5,

            /// <summary>
            /// Enum Slack for value: slack
            /// </summary>
            [EnumMember(Value = "slack")]
            Slack = 6,

            /// <summary>
            /// Enum Telegram for value: telegram
            /// </summary>
            [EnumMember(Value = "telegram")]
            Telegram = 7,

            /// <summary>
            /// Enum Feishu for value: feishu
            /// </summary>
            [EnumMember(Value = "feishu")]
            Feishu = 8,

            /// <summary>
            /// Enum Wechatwork for value: wechatwork
            /// </summary>
            [EnumMember(Value = "wechatwork")]
            Wechatwork = 9,

            /// <summary>
            /// Enum Packagist for value: packagist
            /// </summary>
            [EnumMember(Value = "packagist")]
            Packagist = 10
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateHookOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateHookOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateHookOption" /> class.
        /// </summary>
        /// <param name="active">active (default to false).</param>
        /// <param name="authorizationHeader">authorizationHeader.</param>
        /// <param name="branchFilter">branchFilter.</param>
        /// <param name="config">CreateHookOptionConfig has all config options in it required are \&quot;content_type\&quot; and \&quot;url\&quot; Required (required).</param>
        /// <param name="events">events.</param>
        /// <param name="type">type (required).</param>
        public CreateHookOption(bool active = false, string authorizationHeader = default(string), string branchFilter = default(string), Dictionary<string, string> config = default(Dictionary<string, string>), List<string> events = default(List<string>), TypeEnum type = default(TypeEnum))
        {
            // to ensure "config" is required (not null)
            if (config == null)
            {
                throw new ArgumentNullException("config is a required property for CreateHookOption and cannot be null");
            }
            this.Config = config;
            this.Type = type;
            this.Active = active;
            this.AuthorizationHeader = authorizationHeader;
            this.BranchFilter = branchFilter;
            this.Events = events;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationHeader
        /// </summary>
        [DataMember(Name = "authorization_header", EmitDefaultValue = false)]
        public string AuthorizationHeader { get; set; }

        /// <summary>
        /// Gets or Sets BranchFilter
        /// </summary>
        [DataMember(Name = "branch_filter", EmitDefaultValue = false)]
        public string BranchFilter { get; set; }

        /// <summary>
        /// CreateHookOptionConfig has all config options in it required are \&quot;content_type\&quot; and \&quot;url\&quot; Required
        /// </summary>
        /// <value>CreateHookOptionConfig has all config options in it required are \&quot;content_type\&quot; and \&quot;url\&quot; Required</value>
        [DataMember(Name = "config", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Config { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<string> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateHookOption {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AuthorizationHeader: ").Append(AuthorizationHeader).Append("\n");
            sb.Append("  BranchFilter: ").Append(BranchFilter).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
