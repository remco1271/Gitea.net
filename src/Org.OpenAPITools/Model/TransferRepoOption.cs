/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TransferRepoOption options when transfer a repository&#39;s ownership
    /// </summary>
    [DataContract(Name = "TransferRepoOption")]
    public partial class TransferRepoOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRepoOption" /> class.
        /// </summary>
        /// <param name="newOwner">newOwner (required).</param>
        /// <param name="teamIds">ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories..</param>
        public TransferRepoOption(string newOwner = default(string), List<long> teamIds = default(List<long>))
        {
            // to ensure "newOwner" is required (not null)
            if (newOwner == null)
            {
                throw new ArgumentNullException("newOwner is a required property for TransferRepoOption and cannot be null");
            }
            this.NewOwner = newOwner;
            this.TeamIds = teamIds;
        }

        /// <summary>
        /// Gets or Sets NewOwner
        /// </summary>
        [DataMember(Name = "new_owner", IsRequired = true, EmitDefaultValue = true)]
        public string NewOwner { get; set; }

        /// <summary>
        /// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
        /// </summary>
        /// <value>ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.</value>
        [DataMember(Name = "team_ids", EmitDefaultValue = false)]
        public List<long> TeamIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferRepoOption {\n");
            sb.Append("  NewOwner: ").Append(NewOwner).Append("\n");
            sb.Append("  TeamIds: ").Append(TeamIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
