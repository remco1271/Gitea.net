/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WatchInfo represents an API watch status of one repository
    /// </summary>
    [DataContract(Name = "WatchInfo")]
    public partial class WatchInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WatchInfo" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="ignored">ignored.</param>
        /// <param name="reason">reason.</param>
        /// <param name="repositoryUrl">repositoryUrl.</param>
        /// <param name="subscribed">subscribed.</param>
        /// <param name="url">url.</param>
        public WatchInfo(DateTime createdAt = default(DateTime), bool ignored = default(bool), Object reason = default(Object), string repositoryUrl = default(string), bool subscribed = default(bool), string url = default(string))
        {
            this.CreatedAt = createdAt;
            this.Ignored = ignored;
            this.Reason = reason;
            this.RepositoryUrl = repositoryUrl;
            this.Subscribed = subscribed;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Ignored
        /// </summary>
        [DataMember(Name = "ignored", EmitDefaultValue = true)]
        public bool Ignored { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public Object Reason { get; set; }

        /// <summary>
        /// Gets or Sets RepositoryUrl
        /// </summary>
        [DataMember(Name = "repository_url", EmitDefaultValue = false)]
        public string RepositoryUrl { get; set; }

        /// <summary>
        /// Gets or Sets Subscribed
        /// </summary>
        [DataMember(Name = "subscribed", EmitDefaultValue = true)]
        public bool Subscribed { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WatchInfo {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Ignored: ").Append(Ignored).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RepositoryUrl: ").Append(RepositoryUrl).Append("\n");
            sb.Append("  Subscribed: ").Append(Subscribed).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
