/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EditRepoOption options when editing a repository&#39;s properties
    /// </summary>
    [DataContract(Name = "EditRepoOption")]
    public partial class EditRepoOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditRepoOption" /> class.
        /// </summary>
        /// <param name="allowFastForwardOnlyMerge">either &#x60;true&#x60; to allow fast-forward-only merging pull requests, or &#x60;false&#x60; to prevent fast-forward-only merging..</param>
        /// <param name="allowManualMerge">either &#x60;true&#x60; to allow mark pr as merged manually, or &#x60;false&#x60; to prevent it..</param>
        /// <param name="allowMergeCommits">either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits..</param>
        /// <param name="allowRebase">either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging..</param>
        /// <param name="allowRebaseExplicit">either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits..</param>
        /// <param name="allowRebaseUpdate">either &#x60;true&#x60; to allow updating pull request branch by rebase, or &#x60;false&#x60; to prevent it..</param>
        /// <param name="allowSquashMerge">either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging..</param>
        /// <param name="archived">set to &#x60;true&#x60; to archive this repository..</param>
        /// <param name="autodetectManualMerge">either &#x60;true&#x60; to enable AutodetectManualMerge, or &#x60;false&#x60; to prevent it. Note: In some special cases, misjudgments can occur..</param>
        /// <param name="defaultAllowMaintainerEdit">set to &#x60;true&#x60; to allow edits from maintainers by default.</param>
        /// <param name="defaultBranch">sets the default branch for this repository..</param>
        /// <param name="defaultDeleteBranchAfterMerge">set to &#x60;true&#x60; to delete pr branch after merge by default.</param>
        /// <param name="defaultMergeStyle">set to a merge style to be used by this repository: \&quot;merge\&quot;, \&quot;rebase\&quot;, \&quot;rebase-merge\&quot;, \&quot;squash\&quot;, or \&quot;fast-forward-only\&quot;..</param>
        /// <param name="description">a short description of the repository..</param>
        /// <param name="enablePrune">enable prune - remove obsolete remote-tracking references when mirroring.</param>
        /// <param name="externalTracker">externalTracker.</param>
        /// <param name="externalWiki">externalWiki.</param>
        /// <param name="hasActions">either &#x60;true&#x60; to enable actions unit, or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasIssues">either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasPackages">either &#x60;true&#x60; to enable packages unit, or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasProjects">either &#x60;true&#x60; to enable project unit, or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasPullRequests">either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request..</param>
        /// <param name="hasReleases">either &#x60;true&#x60; to enable releases unit, or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasWiki">either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it..</param>
        /// <param name="ignoreWhitespaceConflicts">either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace..</param>
        /// <param name="internalTracker">internalTracker.</param>
        /// <param name="mirrorInterval">set to a string like &#x60;8h30m0s&#x60; to set the mirror interval time.</param>
        /// <param name="name">name of the repository.</param>
        /// <param name="varPrivate">either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private..</param>
        /// <param name="projectsMode">&#x60;repo&#x60; to only allow repo-level projects, &#x60;owner&#x60; to only allow owner projects, &#x60;all&#x60; to allow both..</param>
        /// <param name="template">either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository.</param>
        /// <param name="website">a URL with more information about the repository..</param>
        public EditRepoOption(bool allowFastForwardOnlyMerge = default(bool), bool allowManualMerge = default(bool), bool allowMergeCommits = default(bool), bool allowRebase = default(bool), bool allowRebaseExplicit = default(bool), bool allowRebaseUpdate = default(bool), bool allowSquashMerge = default(bool), bool archived = default(bool), bool autodetectManualMerge = default(bool), bool defaultAllowMaintainerEdit = default(bool), string defaultBranch = default(string), bool defaultDeleteBranchAfterMerge = default(bool), string defaultMergeStyle = default(string), string description = default(string), bool enablePrune = default(bool), ExternalTracker externalTracker = default(ExternalTracker), ExternalWiki externalWiki = default(ExternalWiki), bool hasActions = default(bool), bool hasIssues = default(bool), bool hasPackages = default(bool), bool hasProjects = default(bool), bool hasPullRequests = default(bool), bool hasReleases = default(bool), bool hasWiki = default(bool), bool ignoreWhitespaceConflicts = default(bool), InternalTracker internalTracker = default(InternalTracker), string mirrorInterval = default(string), string name = default(string), bool varPrivate = default(bool), string projectsMode = default(string), bool template = default(bool), string website = default(string))
        {
            this.AllowFastForwardOnlyMerge = allowFastForwardOnlyMerge;
            this.AllowManualMerge = allowManualMerge;
            this.AllowMergeCommits = allowMergeCommits;
            this.AllowRebase = allowRebase;
            this.AllowRebaseExplicit = allowRebaseExplicit;
            this.AllowRebaseUpdate = allowRebaseUpdate;
            this.AllowSquashMerge = allowSquashMerge;
            this.Archived = archived;
            this.AutodetectManualMerge = autodetectManualMerge;
            this.DefaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
            this.DefaultBranch = defaultBranch;
            this.DefaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
            this.DefaultMergeStyle = defaultMergeStyle;
            this.Description = description;
            this.EnablePrune = enablePrune;
            this.ExternalTracker = externalTracker;
            this.ExternalWiki = externalWiki;
            this.HasActions = hasActions;
            this.HasIssues = hasIssues;
            this.HasPackages = hasPackages;
            this.HasProjects = hasProjects;
            this.HasPullRequests = hasPullRequests;
            this.HasReleases = hasReleases;
            this.HasWiki = hasWiki;
            this.IgnoreWhitespaceConflicts = ignoreWhitespaceConflicts;
            this.InternalTracker = internalTracker;
            this.MirrorInterval = mirrorInterval;
            this.Name = name;
            this.Private = varPrivate;
            this.ProjectsMode = projectsMode;
            this.Template = template;
            this.Website = website;
        }

        /// <summary>
        /// either &#x60;true&#x60; to allow fast-forward-only merging pull requests, or &#x60;false&#x60; to prevent fast-forward-only merging.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow fast-forward-only merging pull requests, or &#x60;false&#x60; to prevent fast-forward-only merging.</value>
        [DataMember(Name = "allow_fast_forward_only_merge", EmitDefaultValue = true)]
        public bool AllowFastForwardOnlyMerge { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow mark pr as merged manually, or &#x60;false&#x60; to prevent it.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow mark pr as merged manually, or &#x60;false&#x60; to prevent it.</value>
        [DataMember(Name = "allow_manual_merge", EmitDefaultValue = true)]
        public bool AllowManualMerge { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits.</value>
        [DataMember(Name = "allow_merge_commits", EmitDefaultValue = true)]
        public bool AllowMergeCommits { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging.</value>
        [DataMember(Name = "allow_rebase", EmitDefaultValue = true)]
        public bool AllowRebase { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits.</value>
        [DataMember(Name = "allow_rebase_explicit", EmitDefaultValue = true)]
        public bool AllowRebaseExplicit { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow updating pull request branch by rebase, or &#x60;false&#x60; to prevent it.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow updating pull request branch by rebase, or &#x60;false&#x60; to prevent it.</value>
        [DataMember(Name = "allow_rebase_update", EmitDefaultValue = true)]
        public bool AllowRebaseUpdate { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging.</value>
        [DataMember(Name = "allow_squash_merge", EmitDefaultValue = true)]
        public bool AllowSquashMerge { get; set; }

        /// <summary>
        /// set to &#x60;true&#x60; to archive this repository.
        /// </summary>
        /// <value>set to &#x60;true&#x60; to archive this repository.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable AutodetectManualMerge, or &#x60;false&#x60; to prevent it. Note: In some special cases, misjudgments can occur.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable AutodetectManualMerge, or &#x60;false&#x60; to prevent it. Note: In some special cases, misjudgments can occur.</value>
        [DataMember(Name = "autodetect_manual_merge", EmitDefaultValue = true)]
        public bool AutodetectManualMerge { get; set; }

        /// <summary>
        /// set to &#x60;true&#x60; to allow edits from maintainers by default
        /// </summary>
        /// <value>set to &#x60;true&#x60; to allow edits from maintainers by default</value>
        [DataMember(Name = "default_allow_maintainer_edit", EmitDefaultValue = true)]
        public bool DefaultAllowMaintainerEdit { get; set; }

        /// <summary>
        /// sets the default branch for this repository.
        /// </summary>
        /// <value>sets the default branch for this repository.</value>
        [DataMember(Name = "default_branch", EmitDefaultValue = false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// set to &#x60;true&#x60; to delete pr branch after merge by default
        /// </summary>
        /// <value>set to &#x60;true&#x60; to delete pr branch after merge by default</value>
        [DataMember(Name = "default_delete_branch_after_merge", EmitDefaultValue = true)]
        public bool DefaultDeleteBranchAfterMerge { get; set; }

        /// <summary>
        /// set to a merge style to be used by this repository: \&quot;merge\&quot;, \&quot;rebase\&quot;, \&quot;rebase-merge\&quot;, \&quot;squash\&quot;, or \&quot;fast-forward-only\&quot;.
        /// </summary>
        /// <value>set to a merge style to be used by this repository: \&quot;merge\&quot;, \&quot;rebase\&quot;, \&quot;rebase-merge\&quot;, \&quot;squash\&quot;, or \&quot;fast-forward-only\&quot;.</value>
        [DataMember(Name = "default_merge_style", EmitDefaultValue = false)]
        public string DefaultMergeStyle { get; set; }

        /// <summary>
        /// a short description of the repository.
        /// </summary>
        /// <value>a short description of the repository.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// enable prune - remove obsolete remote-tracking references when mirroring
        /// </summary>
        /// <value>enable prune - remove obsolete remote-tracking references when mirroring</value>
        [DataMember(Name = "enable_prune", EmitDefaultValue = true)]
        public bool EnablePrune { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTracker
        /// </summary>
        [DataMember(Name = "external_tracker", EmitDefaultValue = false)]
        public ExternalTracker ExternalTracker { get; set; }

        /// <summary>
        /// Gets or Sets ExternalWiki
        /// </summary>
        [DataMember(Name = "external_wiki", EmitDefaultValue = false)]
        public ExternalWiki ExternalWiki { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable actions unit, or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable actions unit, or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name = "has_actions", EmitDefaultValue = true)]
        public bool HasActions { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name = "has_issues", EmitDefaultValue = true)]
        public bool HasIssues { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable packages unit, or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable packages unit, or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name = "has_packages", EmitDefaultValue = true)]
        public bool HasPackages { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable project unit, or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable project unit, or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name = "has_projects", EmitDefaultValue = true)]
        public bool HasProjects { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request.</value>
        [DataMember(Name = "has_pull_requests", EmitDefaultValue = true)]
        public bool HasPullRequests { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable releases unit, or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable releases unit, or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name = "has_releases", EmitDefaultValue = true)]
        public bool HasReleases { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.</value>
        [DataMember(Name = "has_wiki", EmitDefaultValue = true)]
        public bool HasWiki { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace.
        /// </summary>
        /// <value>either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace.</value>
        [DataMember(Name = "ignore_whitespace_conflicts", EmitDefaultValue = true)]
        public bool IgnoreWhitespaceConflicts { get; set; }

        /// <summary>
        /// Gets or Sets InternalTracker
        /// </summary>
        [DataMember(Name = "internal_tracker", EmitDefaultValue = false)]
        public InternalTracker InternalTracker { get; set; }

        /// <summary>
        /// set to a string like &#x60;8h30m0s&#x60; to set the mirror interval time
        /// </summary>
        /// <value>set to a string like &#x60;8h30m0s&#x60; to set the mirror interval time</value>
        [DataMember(Name = "mirror_interval", EmitDefaultValue = false)]
        public string MirrorInterval { get; set; }

        /// <summary>
        /// name of the repository
        /// </summary>
        /// <value>name of the repository</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
        /// </summary>
        /// <value>either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.</value>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// &#x60;repo&#x60; to only allow repo-level projects, &#x60;owner&#x60; to only allow owner projects, &#x60;all&#x60; to allow both.
        /// </summary>
        /// <value>&#x60;repo&#x60; to only allow repo-level projects, &#x60;owner&#x60; to only allow owner projects, &#x60;all&#x60; to allow both.</value>
        [DataMember(Name = "projects_mode", EmitDefaultValue = false)]
        public string ProjectsMode { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository
        /// </summary>
        /// <value>either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository</value>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public bool Template { get; set; }

        /// <summary>
        /// a URL with more information about the repository.
        /// </summary>
        /// <value>a URL with more information about the repository.</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditRepoOption {\n");
            sb.Append("  AllowFastForwardOnlyMerge: ").Append(AllowFastForwardOnlyMerge).Append("\n");
            sb.Append("  AllowManualMerge: ").Append(AllowManualMerge).Append("\n");
            sb.Append("  AllowMergeCommits: ").Append(AllowMergeCommits).Append("\n");
            sb.Append("  AllowRebase: ").Append(AllowRebase).Append("\n");
            sb.Append("  AllowRebaseExplicit: ").Append(AllowRebaseExplicit).Append("\n");
            sb.Append("  AllowRebaseUpdate: ").Append(AllowRebaseUpdate).Append("\n");
            sb.Append("  AllowSquashMerge: ").Append(AllowSquashMerge).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  AutodetectManualMerge: ").Append(AutodetectManualMerge).Append("\n");
            sb.Append("  DefaultAllowMaintainerEdit: ").Append(DefaultAllowMaintainerEdit).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  DefaultDeleteBranchAfterMerge: ").Append(DefaultDeleteBranchAfterMerge).Append("\n");
            sb.Append("  DefaultMergeStyle: ").Append(DefaultMergeStyle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnablePrune: ").Append(EnablePrune).Append("\n");
            sb.Append("  ExternalTracker: ").Append(ExternalTracker).Append("\n");
            sb.Append("  ExternalWiki: ").Append(ExternalWiki).Append("\n");
            sb.Append("  HasActions: ").Append(HasActions).Append("\n");
            sb.Append("  HasIssues: ").Append(HasIssues).Append("\n");
            sb.Append("  HasPackages: ").Append(HasPackages).Append("\n");
            sb.Append("  HasProjects: ").Append(HasProjects).Append("\n");
            sb.Append("  HasPullRequests: ").Append(HasPullRequests).Append("\n");
            sb.Append("  HasReleases: ").Append(HasReleases).Append("\n");
            sb.Append("  HasWiki: ").Append(HasWiki).Append("\n");
            sb.Append("  IgnoreWhitespaceConflicts: ").Append(IgnoreWhitespaceConflicts).Append("\n");
            sb.Append("  InternalTracker: ").Append(InternalTracker).Append("\n");
            sb.Append("  MirrorInterval: ").Append(MirrorInterval).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  ProjectsMode: ").Append(ProjectsMode).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
