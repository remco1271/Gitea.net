/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GenerateRepoOption options when creating repository using a template
    /// </summary>
    [DataContract(Name = "GenerateRepoOption")]
    public partial class GenerateRepoOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateRepoOption" /> class.
        /// </summary>
        /// <param name="avatar">include avatar of the template repo.</param>
        /// <param name="defaultBranch">Default branch of the new repository.</param>
        /// <param name="description">Description of the repository to create.</param>
        /// <param name="gitContent">include git content of default branch in template repo.</param>
        /// <param name="gitHooks">include git hooks in template repo.</param>
        /// <param name="labels">include labels in template repo.</param>
        /// <param name="name">Name of the repository to create (required).</param>
        /// <param name="owner">The organization or person who will own the new repository (required).</param>
        /// <param name="varPrivate">Whether the repository is private.</param>
        /// <param name="protectedBranch">include protected branches in template repo.</param>
        /// <param name="topics">include topics in template repo.</param>
        /// <param name="webhooks">include webhooks in template repo.</param>
        public GenerateRepoOption(bool avatar = default(bool), string defaultBranch = default(string), string description = default(string), bool gitContent = default(bool), bool gitHooks = default(bool), bool labels = default(bool), string name = default(string), string owner = default(string), bool varPrivate = default(bool), bool protectedBranch = default(bool), bool topics = default(bool), bool webhooks = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GenerateRepoOption and cannot be null");
            }
            this.Name = name;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for GenerateRepoOption and cannot be null");
            }
            this.Owner = owner;
            this.Avatar = avatar;
            this.DefaultBranch = defaultBranch;
            this.Description = description;
            this.GitContent = gitContent;
            this.GitHooks = gitHooks;
            this.Labels = labels;
            this.Private = varPrivate;
            this.ProtectedBranch = protectedBranch;
            this.Topics = topics;
            this.Webhooks = webhooks;
        }

        /// <summary>
        /// include avatar of the template repo
        /// </summary>
        /// <value>include avatar of the template repo</value>
        [DataMember(Name = "avatar", EmitDefaultValue = true)]
        public bool Avatar { get; set; }

        /// <summary>
        /// Default branch of the new repository
        /// </summary>
        /// <value>Default branch of the new repository</value>
        [DataMember(Name = "default_branch", EmitDefaultValue = false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// Description of the repository to create
        /// </summary>
        /// <value>Description of the repository to create</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// include git content of default branch in template repo
        /// </summary>
        /// <value>include git content of default branch in template repo</value>
        [DataMember(Name = "git_content", EmitDefaultValue = true)]
        public bool GitContent { get; set; }

        /// <summary>
        /// include git hooks in template repo
        /// </summary>
        /// <value>include git hooks in template repo</value>
        [DataMember(Name = "git_hooks", EmitDefaultValue = true)]
        public bool GitHooks { get; set; }

        /// <summary>
        /// include labels in template repo
        /// </summary>
        /// <value>include labels in template repo</value>
        [DataMember(Name = "labels", EmitDefaultValue = true)]
        public bool Labels { get; set; }

        /// <summary>
        /// Name of the repository to create
        /// </summary>
        /// <value>Name of the repository to create</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The organization or person who will own the new repository
        /// </summary>
        /// <value>The organization or person who will own the new repository</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Whether the repository is private
        /// </summary>
        /// <value>Whether the repository is private</value>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// include protected branches in template repo
        /// </summary>
        /// <value>include protected branches in template repo</value>
        [DataMember(Name = "protected_branch", EmitDefaultValue = true)]
        public bool ProtectedBranch { get; set; }

        /// <summary>
        /// include topics in template repo
        /// </summary>
        /// <value>include topics in template repo</value>
        [DataMember(Name = "topics", EmitDefaultValue = true)]
        public bool Topics { get; set; }

        /// <summary>
        /// include webhooks in template repo
        /// </summary>
        /// <value>include webhooks in template repo</value>
        [DataMember(Name = "webhooks", EmitDefaultValue = true)]
        public bool Webhooks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateRepoOption {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GitContent: ").Append(GitContent).Append("\n");
            sb.Append("  GitHooks: ").Append(GitHooks).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  ProtectedBranch: ").Append(ProtectedBranch).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  Webhooks: ").Append(Webhooks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
