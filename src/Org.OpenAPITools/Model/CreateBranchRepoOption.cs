/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateBranchRepoOption options when creating a branch in a repository
    /// </summary>
    [DataContract(Name = "CreateBranchRepoOption")]
    public partial class CreateBranchRepoOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranchRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBranchRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranchRepoOption" /> class.
        /// </summary>
        /// <param name="newBranchName">Name of the branch to create (required).</param>
        /// <param name="oldBranchName">Deprecated: true Name of the old branch to create from.</param>
        /// <param name="oldRefName">Name of the old branch/tag/commit to create from.</param>
        public CreateBranchRepoOption(string newBranchName = default(string), string oldBranchName = default(string), string oldRefName = default(string))
        {
            // to ensure "newBranchName" is required (not null)
            if (newBranchName == null)
            {
                throw new ArgumentNullException("newBranchName is a required property for CreateBranchRepoOption and cannot be null");
            }
            this.NewBranchName = newBranchName;
            this.OldBranchName = oldBranchName;
            this.OldRefName = oldRefName;
        }

        /// <summary>
        /// Name of the branch to create
        /// </summary>
        /// <value>Name of the branch to create</value>
        [DataMember(Name = "new_branch_name", IsRequired = true, EmitDefaultValue = true)]
        public string NewBranchName { get; set; }

        /// <summary>
        /// Deprecated: true Name of the old branch to create from
        /// </summary>
        /// <value>Deprecated: true Name of the old branch to create from</value>
        [DataMember(Name = "old_branch_name", EmitDefaultValue = false)]
        public string OldBranchName { get; set; }

        /// <summary>
        /// Name of the old branch/tag/commit to create from
        /// </summary>
        /// <value>Name of the old branch/tag/commit to create from</value>
        [DataMember(Name = "old_ref_name", EmitDefaultValue = false)]
        public string OldRefName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBranchRepoOption {\n");
            sb.Append("  NewBranchName: ").Append(NewBranchName).Append("\n");
            sb.Append("  OldBranchName: ").Append(OldBranchName).Append("\n");
            sb.Append("  OldRefName: ").Append(OldRefName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
