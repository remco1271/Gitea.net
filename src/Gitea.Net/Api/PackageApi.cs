/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Gitea.Net.Client;
using Gitea.Net.Model;

namespace Gitea.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a package
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePackage(string owner, string type, string name, string version, int operationIndex = 0);

        /// <summary>
        /// Delete a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePackageWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0);
        /// <summary>
        /// Gets a package
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Package</returns>
        Package GetPackage(string owner, string type, string name, string version, int operationIndex = 0);

        /// <summary>
        /// Gets a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Package</returns>
        ApiResponse<Package> GetPackageWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0);
        /// <summary>
        /// Gets all files of a package
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackageFile&gt;</returns>
        List<PackageFile> ListPackageFiles(string owner, string type, string name, string version, int operationIndex = 0);

        /// <summary>
        /// Gets all files of a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackageFile&gt;</returns>
        ApiResponse<List<PackageFile>> ListPackageFilesWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0);
        /// <summary>
        /// Gets all packages of an owner
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Package&gt;</returns>
        List<Package> ListPackages(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0);

        /// <summary>
        /// Gets all packages of an owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        ApiResponse<List<Package>> ListPackagesWithHttpInfo(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePackageAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePackageWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Package</returns>
        System.Threading.Tasks.Task<Package> GetPackageAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Package)</returns>
        System.Threading.Tasks.Task<ApiResponse<Package>> GetPackageWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all files of a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackageFile&gt;</returns>
        System.Threading.Tasks.Task<List<PackageFile>> ListPackageFilesAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all files of a package
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackageFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PackageFile>>> ListPackageFilesWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all packages of an owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Package&gt;</returns>
        System.Threading.Tasks.Task<List<Package>> ListPackagesAsync(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all packages of an owner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Package>>> ListPackagesWithHttpInfoAsync(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPackageApi : IPackageApiSync, IPackageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PackageApi : IPackageApi
    {
        private Gitea.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PackageApi(string basePath)
        {
            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                new Gitea.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PackageApi(Gitea.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PackageApi(Gitea.Net.Client.ISynchronousClient client, Gitea.Net.Client.IAsynchronousClient asyncClient, Gitea.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Gitea.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Gitea.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePackage(string owner, string type, string name, string version, int operationIndex = 0)
        {
            DeletePackageWithHttpInfo(owner, type, name, version);
        }

        /// <summary>
        /// Delete a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> DeletePackageWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->DeletePackage");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.DeletePackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/packages/{owner}/{type}/{name}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePackageAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePackageWithHttpInfoAsync(owner, type, name, version, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> DeletePackageWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->DeletePackage");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->DeletePackage");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.DeletePackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/packages/{owner}/{type}/{name}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Package</returns>
        public Package GetPackage(string owner, string type, string name, string version, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Package> localVarResponse = GetPackageWithHttpInfo(owner, type, name, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Package</returns>
        public Gitea.Net.Client.ApiResponse<Package> GetPackageWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->GetPackage");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.GetPackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Package>("/packages/{owner}/{type}/{name}/{version}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Package</returns>
        public async System.Threading.Tasks.Task<Package> GetPackageAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Package> localVarResponse = await GetPackageWithHttpInfoAsync(owner, type, name, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Package)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Package>> GetPackageWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->GetPackage");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->GetPackage");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.GetPackage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Package>("/packages/{owner}/{type}/{name}/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all files of a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PackageFile&gt;</returns>
        public List<PackageFile> ListPackageFiles(string owner, string type, string name, string version, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<PackageFile>> localVarResponse = ListPackageFilesWithHttpInfo(owner, type, name, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all files of a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PackageFile&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<PackageFile>> ListPackageFilesWithHttpInfo(string owner, string type, string name, string version, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->ListPackageFiles");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.ListPackageFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PackageFile>>("/packages/{owner}/{type}/{name}/{version}/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPackageFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all files of a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PackageFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<PackageFile>> ListPackageFilesAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<PackageFile>> localVarResponse = await ListPackageFilesWithHttpInfoAsync(owner, type, name, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all files of a package 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the package</param>
        /// <param name="type">type of the package</param>
        /// <param name="name">name of the package</param>
        /// <param name="version">version of the package</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PackageFile&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<PackageFile>>> ListPackageFilesWithHttpInfoAsync(string owner, string type, string name, string version, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'type' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'name' when calling PackageApi->ListPackageFiles");
            }

            // verify the required parameter 'version' is set
            if (version == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'version' when calling PackageApi->ListPackageFiles");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", Gitea.Net.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", Gitea.Net.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Gitea.Net.Client.ClientUtils.ParameterToString(version)); // path parameter

            localVarRequestOptions.Operation = "PackageApi.ListPackageFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PackageFile>>("/packages/{owner}/{type}/{name}/{version}/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPackageFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all packages of an owner 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Package&gt;</returns>
        public List<Package> ListPackages(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Package>> localVarResponse = ListPackagesWithHttpInfo(owner, page, limit, type, q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all packages of an owner 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Package&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Package>> ListPackagesWithHttpInfo(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->ListPackages");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }

            localVarRequestOptions.Operation = "PackageApi.ListPackages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Package>>("/packages/{owner}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all packages of an owner 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Package&gt;</returns>
        public async System.Threading.Tasks.Task<List<Package>> ListPackagesAsync(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Package>> localVarResponse = await ListPackagesWithHttpInfoAsync(owner, page, limit, type, q, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all packages of an owner 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the packages</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="type">package type filter (optional)</param>
        /// <param name="q">name filter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Package&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Package>>> ListPackagesWithHttpInfoAsync(string owner, int? page = default(int?), int? limit = default(int?), string? type = default(string?), string? q = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling PackageApi->ListPackages");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }

            localVarRequestOptions.Operation = "PackageApi.ListPackages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Package>>("/packages/{owner}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
