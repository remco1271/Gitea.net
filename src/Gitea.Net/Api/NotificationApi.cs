/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Gitea.Net.Client;
using Gitea.Net.Model;

namespace Gitea.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyGetList(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyGetListWithHttpInfo(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyGetRepoList(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyGetRepoListWithHttpInfo(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationThread</returns>
        NotificationThread NotifyGetThread(string id, int operationIndex = 0);

        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        ApiResponse<NotificationThread> NotifyGetThreadWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationCount</returns>
        NotificationCount NotifyNewAvailable(int operationIndex = 0);

        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationCount</returns>
        ApiResponse<NotificationCount> NotifyNewAvailableWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyReadList(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0);

        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyReadListWithHttpInfo(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0);
        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyReadRepoList(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyReadRepoListWithHttpInfo(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationThread</returns>
        NotificationThread NotifyReadThread(string id, string? toStatus = default(string?), int operationIndex = 0);

        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        ApiResponse<NotificationThread> NotifyReadThreadWithHttpInfo(string id, string? toStatus = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetListAsync(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetListWithHttpInfoAsync(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetRepoListAsync(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetRepoListWithHttpInfoAsync(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationThread</returns>
        System.Threading.Tasks.Task<NotificationThread> NotifyGetThreadAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationThread>> NotifyGetThreadWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationCount</returns>
        System.Threading.Tasks.Task<NotificationCount> NotifyNewAvailableAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationCount>> NotifyNewAvailableWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyReadListAsync(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyReadListWithHttpInfoAsync(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyReadRepoListAsync(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyReadRepoListWithHttpInfoAsync(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationThread</returns>
        System.Threading.Tasks.Task<NotificationThread> NotifyReadThreadAsync(string id, string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationThread>> NotifyReadThreadWithHttpInfoAsync(string id, string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationApi : INotificationApiSync, INotificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationApi : INotificationApi
    {
        private Gitea.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationApi(string basePath)
        {
            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                new Gitea.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationApi(Gitea.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotificationApi(Gitea.Net.Client.ISynchronousClient client, Gitea.Net.Client.IAsynchronousClient asyncClient, Gitea.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Gitea.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Gitea.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyGetList(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = NotifyGetListWithHttpInfo(all, statusTypes, subjectType, since, before, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<NotificationThread>> NotifyGetListWithHttpInfo(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (subjectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "subject-type", subjectType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<NotificationThread>>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetListAsync(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = await NotifyGetListWithHttpInfoAsync(all, statusTypes, subjectType, since, before, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<NotificationThread>>> NotifyGetListWithHttpInfoAsync(bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (subjectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "subject-type", subjectType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NotificationThread>>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyGetRepoList(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = NotifyGetRepoListWithHttpInfo(owner, repo, all, statusTypes, subjectType, since, before, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<NotificationThread>> NotifyGetRepoListWithHttpInfo(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyGetRepoList");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyGetRepoList");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (subjectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "subject-type", subjectType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetRepoList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<NotificationThread>>("/repos/{owner}/{repo}/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetRepoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetRepoListAsync(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = await NotifyGetRepoListWithHttpInfoAsync(owner, repo, all, statusTypes, subjectType, since, before, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="subjectType">filter notifications by subject type (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<NotificationThread>>> NotifyGetRepoListWithHttpInfoAsync(string owner, string repo, bool? all = default(bool?), List<string>? statusTypes = default(List<string>?), List<string>? subjectType = default(List<string>?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyGetRepoList");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyGetRepoList");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (subjectType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "subject-type", subjectType));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetRepoList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<NotificationThread>>("/repos/{owner}/{repo}/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetRepoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationThread</returns>
        public NotificationThread NotifyGetThread(string id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<NotificationThread> localVarResponse = NotifyGetThreadWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        public Gitea.Net.Client.ApiResponse<NotificationThread> NotifyGetThreadWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyGetThread");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationThread>("/notifications/threads/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationThread</returns>
        public async System.Threading.Tasks.Task<NotificationThread> NotifyGetThreadAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<NotificationThread> localVarResponse = await NotifyGetThreadWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<NotificationThread>> NotifyGetThreadWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyGetThread");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "NotificationApi.NotifyGetThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationThread>("/notifications/threads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyGetThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationCount</returns>
        public NotificationCount NotifyNewAvailable(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<NotificationCount> localVarResponse = NotifyNewAvailableWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationCount</returns>
        public Gitea.Net.Client.ApiResponse<NotificationCount> NotifyNewAvailableWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationApi.NotifyNewAvailable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationCount>("/notifications/new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyNewAvailable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationCount</returns>
        public async System.Threading.Tasks.Task<NotificationCount> NotifyNewAvailableAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<NotificationCount> localVarResponse = await NotifyNewAvailableWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationCount)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<NotificationCount>> NotifyNewAvailableWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "NotificationApi.NotifyNewAvailable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationCount>("/notifications/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyNewAvailable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyReadList(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = NotifyReadListWithHttpInfo(lastReadAt, all, statusTypes, toStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<NotificationThread>> NotifyReadListWithHttpInfo(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastReadAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "last_read_at", lastReadAt));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<NotificationThread>>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyReadListAsync(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = await NotifyReadListWithHttpInfoAsync(lastReadAt, all, statusTypes, toStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<NotificationThread>>> NotifyReadListWithHttpInfoAsync(DateTime? lastReadAt = default(DateTime?), string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastReadAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "last_read_at", lastReadAt));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<NotificationThread>>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyReadRepoList(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = NotifyReadRepoListWithHttpInfo(owner, repo, all, statusTypes, toStatus, lastReadAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<NotificationThread>> NotifyReadRepoListWithHttpInfo(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyReadRepoList");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyReadRepoList");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }
            if (lastReadAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "last_read_at", lastReadAt));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadRepoList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<List<NotificationThread>>("/repos/{owner}/{repo}/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadRepoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyReadRepoListAsync(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<NotificationThread>> localVarResponse = await NotifyReadRepoListWithHttpInfoAsync(owner, repo, all, statusTypes, toStatus, lastReadAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<NotificationThread>>> NotifyReadRepoListWithHttpInfoAsync(string owner, string repo, string? all = default(string?), List<string>? statusTypes = default(List<string>?), string? toStatus = default(string?), DateTime? lastReadAt = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyReadRepoList");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyReadRepoList");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (statusTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("multi", "status-types", statusTypes));
            }
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }
            if (lastReadAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "last_read_at", lastReadAt));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadRepoList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<List<NotificationThread>>("/repos/{owner}/{repo}/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadRepoList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationThread</returns>
        public NotificationThread NotifyReadThread(string id, string? toStatus = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<NotificationThread> localVarResponse = NotifyReadThreadWithHttpInfo(id, toStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        public Gitea.Net.Client.ApiResponse<NotificationThread> NotifyReadThreadWithHttpInfo(string id, string? toStatus = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyReadThread");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<NotificationThread>("/notifications/threads/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationThread</returns>
        public async System.Threading.Tasks.Task<NotificationThread> NotifyReadThreadAsync(string id, string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<NotificationThread> localVarResponse = await NotifyReadThreadWithHttpInfoAsync(id, toStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<NotificationThread>> NotifyReadThreadWithHttpInfoAsync(string id, string? toStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyReadThread");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (toStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "to-status", toStatus));
            }

            localVarRequestOptions.Operation = "NotificationApi.NotifyReadThread";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<NotificationThread>("/notifications/threads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifyReadThread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
