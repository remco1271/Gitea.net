/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Gitea.Net.Client;
using Gitea.Net.Model;

namespace Gitea.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a repository
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Repository</returns>
        Repository CreateCurrentUserRepo(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0);

        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> CreateCurrentUserRepoWithHttpInfo(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0);
        /// <summary>
        /// Create a user-level variable
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateUserVariable(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0);

        /// <summary>
        /// Create a user-level variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateUserVariableWithHttpInfo(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0);
        /// <summary>
        /// Delete a secret in a user scope
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUserSecret(string secretname, int operationIndex = 0);

        /// <summary>
        /// Delete a secret in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserSecretWithHttpInfo(string secretname, int operationIndex = 0);
        /// <summary>
        /// Delete a user-level variable which is created by current doer
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUserVariable(string variablename, int operationIndex = 0);

        /// <summary>
        /// Delete a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserVariableWithHttpInfo(string variablename, int operationIndex = 0);
        /// <summary>
        /// Get user settings
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSettings&gt;</returns>
        List<UserSettings> GetUserSettings(int operationIndex = 0);

        /// <summary>
        /// Get user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSettings&gt;</returns>
        ApiResponse<List<UserSettings>> GetUserSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a user-level variable which is created by current doer
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionVariable</returns>
        ActionVariable GetUserVariable(string variablename, int operationIndex = 0);

        /// <summary>
        /// Get a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionVariable</returns>
        ApiResponse<ActionVariable> GetUserVariableWithHttpInfo(string variablename, int operationIndex = 0);
        /// <summary>
        /// Get the user-level list of variables which is created by current doer
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActionVariable&gt;</returns>
        List<ActionVariable> GetUserVariablesList(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get the user-level list of variables which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActionVariable&gt;</returns>
        ApiResponse<List<ActionVariable>> GetUserVariablesListWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a Token to verify
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetVerificationToken(int operationIndex = 0);

        /// <summary>
        /// Get a Token to verify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetVerificationTokenWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Create or Update a secret value in a user scope
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateUserSecret(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0);

        /// <summary>
        /// Create or Update a secret value in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserSecretWithHttpInfo(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0);
        /// <summary>
        /// Update user settings
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSettings&gt;</returns>
        List<UserSettings> UpdateUserSettings(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0);

        /// <summary>
        /// Update user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSettings&gt;</returns>
        ApiResponse<List<UserSettings>> UpdateUserSettingsWithHttpInfo(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0);
        /// <summary>
        /// Update a user-level variable which is created by current doer
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateUserVariable(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0);

        /// <summary>
        /// Update a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserVariableWithHttpInfo(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0);
        /// <summary>
        /// Add email addresses
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> UserAddEmail(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0);

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> UserAddEmailWithHttpInfo(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0);
        /// <summary>
        /// Block a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserBlockUser(string username, string? note = default(string?), int operationIndex = 0);

        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserBlockUserWithHttpInfo(string username, string? note = default(string?), int operationIndex = 0);
        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCheckFollowing(string username, string target, int operationIndex = 0);

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCheckFollowingWithHttpInfo(string username, string target, int operationIndex = 0);
        /// <summary>
        /// Check if a user is blocked by the authenticated user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCheckUserBlock(string username, int operationIndex = 0);

        /// <summary>
        /// Check if a user is blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCheckUserBlockWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook UserCreateHook(CreateHookOption body, int operationIndex = 0);

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> UserCreateHookWithHttpInfo(CreateHookOption body, int operationIndex = 0);
        /// <summary>
        /// creates a new OAuth2 application
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        OAuth2Application UserCreateOAuth2Application(CreateOAuth2ApplicationOptions body, int operationIndex = 0);

        /// <summary>
        /// creates a new OAuth2 application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        ApiResponse<OAuth2Application> UserCreateOAuth2ApplicationWithHttpInfo(CreateOAuth2ApplicationOptions body, int operationIndex = 0);
        /// <summary>
        /// Create an access token
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        AccessToken UserCreateToken(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        ApiResponse<AccessToken> UserCreateTokenWithHttpInfo(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0);
        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentCheckFollowing(string username, int operationIndex = 0);

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentCheckFollowingWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentCheckStarring(string owner, string repo, int operationIndex = 0);

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentCheckStarringWithHttpInfo(string owner, string repo, int operationIndex = 0);
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentDeleteFollow(string username, int operationIndex = 0);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentDeleteFollowWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentDeleteGPGKey(long id, int operationIndex = 0);

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentDeleteGPGKeyWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Delete a public key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentDeleteKey(long id, int operationIndex = 0);

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentDeleteKeyWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentDeleteStar(string owner, string repo, int operationIndex = 0);

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentDeleteStarWithHttpInfo(string owner, string repo, int operationIndex = 0);
        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        GPGKey UserCurrentGetGPGKey(long id, int operationIndex = 0);

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        ApiResponse<GPGKey> UserCurrentGetGPGKeyWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Get a public key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        PublicKey UserCurrentGetKey(long id, int operationIndex = 0);

        /// <summary>
        /// Get a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        ApiResponse<PublicKey> UserCurrentGetKeyWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserCurrentListFollowers(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserCurrentListFollowersWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserCurrentListFollowing(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserCurrentListFollowingWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        List<GPGKey> UserCurrentListGPGKeys(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        ApiResponse<List<GPGKey>> UserCurrentListGPGKeysWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        List<PublicKey> UserCurrentListKeys(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        ApiResponse<List<PublicKey>> UserCurrentListKeysWithHttpInfo(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the repos that the authenticated user owns
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserCurrentListRepos(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the repos that the authenticated user owns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserCurrentListReposWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserCurrentListStarred(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserCurrentListStarredWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserCurrentListSubscriptions(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserCurrentListSubscriptionsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        GPGKey UserCurrentPostGPGKey(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0);

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        ApiResponse<GPGKey> UserCurrentPostGPGKeyWithHttpInfo(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0);
        /// <summary>
        /// Create a public key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        PublicKey UserCurrentPostKey(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0);

        /// <summary>
        /// Create a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        ApiResponse<PublicKey> UserCurrentPostKeyWithHttpInfo(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0);
        /// <summary>
        /// Follow a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentPutFollow(string username, int operationIndex = 0);

        /// <summary>
        /// Follow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentPutFollowWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Star the given repo
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserCurrentPutStar(string owner, string repo, int operationIndex = 0);

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentPutStarWithHttpInfo(string owner, string repo, int operationIndex = 0);
        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        List<TrackedTime> UserCurrentTrackedTimes(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        ApiResponse<List<TrackedTime>> UserCurrentTrackedTimesWithHttpInfo(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// delete an access token
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserDeleteAccessToken(string username, string token, int operationIndex = 0);

        /// <summary>
        /// delete an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDeleteAccessTokenWithHttpInfo(string username, string token, int operationIndex = 0);
        /// <summary>
        /// Delete Avatar
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserDeleteAvatar(int operationIndex = 0);

        /// <summary>
        /// Delete Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDeleteAvatarWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserDeleteEmail(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0);

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDeleteEmailWithHttpInfo(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0);
        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserDeleteHook(long id, int operationIndex = 0);

        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDeleteHookWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// delete an OAuth2 Application
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserDeleteOAuth2Application(long id, int operationIndex = 0);

        /// <summary>
        /// delete an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDeleteOAuth2ApplicationWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Update a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook UserEditHook(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0);

        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> UserEditHookWithHttpInfo(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User UserGet(string username, int operationIndex = 0);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserGetWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User UserGetCurrent(int operationIndex = 0);

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserGetCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a user&#39;s heatmap
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserHeatmapData&gt;</returns>
        List<UserHeatmapData> UserGetHeatmapData(string username, int operationIndex = 0);

        /// <summary>
        /// Get a user&#39;s heatmap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserHeatmapData&gt;</returns>
        ApiResponse<List<UserHeatmapData>> UserGetHeatmapDataWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook UserGetHook(long id, int operationIndex = 0);

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> UserGetHookWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// get an OAuth2 Application
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        OAuth2Application UserGetOAuth2Application(long id, int operationIndex = 0);

        /// <summary>
        /// get an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        ApiResponse<OAuth2Application> UserGetOAuth2ApplicationWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2Application&gt;</returns>
        List<OAuth2Application> UserGetOauth2Application(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2Application&gt;</returns>
        ApiResponse<List<OAuth2Application>> UserGetOauth2ApplicationWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get an user&#39;s actions runner registration token
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserGetRunnerRegistrationToken(int operationIndex = 0);

        /// <summary>
        /// Get an user&#39;s actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserGetRunnerRegistrationTokenWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get list of all existing stopwatches
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StopWatch&gt;</returns>
        List<StopWatch> UserGetStopWatches(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get list of all existing stopwatches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StopWatch&gt;</returns>
        ApiResponse<List<StopWatch>> UserGetStopWatchesWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        List<AccessToken> UserGetTokens(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        ApiResponse<List<AccessToken>> UserGetTokensWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List a user&#39;s activity feeds
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Activity&gt;</returns>
        List<Activity> UserListActivityFeeds(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List a user&#39;s activity feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        ApiResponse<List<Activity>> UserListActivityFeedsWithHttpInfo(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List users blocked by the authenticated user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserListBlocks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List users blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListBlocksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> UserListEmails(int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> UserListEmailsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserListFollowers(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListFollowersWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserListFollowing(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListFollowingWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        List<GPGKey> UserListGPGKeys(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        ApiResponse<List<GPGKey>> UserListGPGKeysWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the authenticated user&#39;s webhooks
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Hook&gt;</returns>
        List<Hook> UserListHooks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the authenticated user&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        ApiResponse<List<Hook>> UserListHooksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        List<PublicKey> UserListKeys(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        ApiResponse<List<PublicKey>> UserListKeysWithHttpInfo(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserListRepos(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserListReposWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserListStarred(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserListStarredWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> UserListSubscriptions(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> UserListSubscriptionsWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all the teams a user belongs to
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> UserListTeams(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all the teams a user belongs to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> UserListTeamsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search for users
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearch200Response</returns>
        UserSearch200Response UserSearch(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearch200Response</returns>
        ApiResponse<UserSearch200Response> UserSearchWithHttpInfo(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserUnblockUser(string username, int operationIndex = 0);

        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserUnblockUserWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Update Avatar
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserUpdateAvatar(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0);

        /// <summary>
        /// Update Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserUpdateAvatarWithHttpInfo(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0);
        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        OAuth2Application UserUpdateOAuth2Application(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0);

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        ApiResponse<OAuth2Application> UserUpdateOAuth2ApplicationWithHttpInfo(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0);
        /// <summary>
        /// Verify a GPG key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        GPGKey UserVerifyGPGKey(int operationIndex = 0);

        /// <summary>
        /// Verify a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        ApiResponse<GPGKey> UserVerifyGPGKeyWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> CreateCurrentUserRepoAsync(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> CreateCurrentUserRepoWithHttpInfoAsync(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a user-level variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateUserVariableAsync(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a user-level variable
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateUserVariableWithHttpInfoAsync(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a secret in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserSecretAsync(string secretname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a secret in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserSecretWithHttpInfoAsync(string secretname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserVariableAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserVariableWithHttpInfoAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSettings&gt;</returns>
        System.Threading.Tasks.Task<List<UserSettings>> GetUserSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSettings&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSettings>>> GetUserSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionVariable</returns>
        System.Threading.Tasks.Task<ActionVariable> GetUserVariableAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionVariable)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionVariable>> GetUserVariableWithHttpInfoAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the user-level list of variables which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActionVariable&gt;</returns>
        System.Threading.Tasks.Task<List<ActionVariable>> GetUserVariablesListAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the user-level list of variables which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActionVariable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActionVariable>>> GetUserVariablesListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Token to verify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetVerificationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Token to verify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetVerificationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or Update a secret value in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserSecretAsync(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Update a secret value in a user scope
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserSecretWithHttpInfoAsync(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSettings&gt;</returns>
        System.Threading.Tasks.Task<List<UserSettings>> UpdateUserSettingsAsync(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update user settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSettings&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserSettings>>> UpdateUserSettingsWithHttpInfoAsync(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserVariableAsync(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a user-level variable which is created by current doer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserVariableWithHttpInfoAsync(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> UserAddEmailAsync(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserAddEmailWithHttpInfoAsync(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserBlockUserAsync(string username, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Block a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserBlockUserWithHttpInfoAsync(string username, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCheckFollowingAsync(string username, string target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCheckFollowingWithHttpInfoAsync(string username, string target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if a user is blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCheckUserBlockAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if a user is blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCheckUserBlockWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> UserCreateHookAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> UserCreateHookWithHttpInfoAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// creates a new OAuth2 application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        System.Threading.Tasks.Task<OAuth2Application> UserCreateOAuth2ApplicationAsync(CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// creates a new OAuth2 application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Application>> UserCreateOAuth2ApplicationWithHttpInfoAsync(CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        System.Threading.Tasks.Task<AccessToken> UserCreateTokenAsync(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessToken>> UserCreateTokenWithHttpInfoAsync(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentCheckFollowingAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentCheckFollowingWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentCheckStarringAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentCheckStarringWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteFollowAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteFollowWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteGPGKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteGPGKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteStarAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteStarWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        System.Threading.Tasks.Task<GPGKey> UserCurrentGetGPGKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentGetGPGKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        System.Threading.Tasks.Task<PublicKey> UserCurrentGetKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentGetKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserCurrentListFollowersAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowersWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserCurrentListFollowingAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowingWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        System.Threading.Tasks.Task<List<GPGKey>> UserCurrentListGPGKeysAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserCurrentListGPGKeysWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        System.Threading.Tasks.Task<List<PublicKey>> UserCurrentListKeysAsync(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserCurrentListKeysWithHttpInfoAsync(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the repos that the authenticated user owns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserCurrentListReposAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the repos that the authenticated user owns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserCurrentListReposWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserCurrentListStarredAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserCurrentListStarredWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserCurrentListSubscriptionsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserCurrentListSubscriptionsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        System.Threading.Tasks.Task<GPGKey> UserCurrentPostGPGKeyAsync(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentPostGPGKeyWithHttpInfoAsync(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        System.Threading.Tasks.Task<PublicKey> UserCurrentPostKeyAsync(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentPostKeyWithHttpInfoAsync(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Follow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentPutFollowAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Follow a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentPutFollowWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Star the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentPutStarAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentPutStarWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedTime>> UserCurrentTrackedTimesAsync(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserCurrentTrackedTimesWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteAccessTokenAsync(string username, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete an access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteAccessTokenWithHttpInfoAsync(string username, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteAvatarAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteAvatarWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteEmailAsync(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteEmailWithHttpInfoAsync(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteOAuth2ApplicationAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDeleteOAuth2ApplicationWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> UserEditHookAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> UserEditHookWithHttpInfoAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserGetAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserGetWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserGetCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserGetCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a user&#39;s heatmap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserHeatmapData&gt;</returns>
        System.Threading.Tasks.Task<List<UserHeatmapData>> UserGetHeatmapDataAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a user&#39;s heatmap
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserHeatmapData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserHeatmapData>>> UserGetHeatmapDataWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> UserGetHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> UserGetHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        System.Threading.Tasks.Task<OAuth2Application> UserGetOAuth2ApplicationAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get an OAuth2 Application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Application>> UserGetOAuth2ApplicationWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Application&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Application>> UserGetOauth2ApplicationAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Application&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Application>>> UserGetOauth2ApplicationWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an user&#39;s actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserGetRunnerRegistrationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an user&#39;s actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserGetRunnerRegistrationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list of all existing stopwatches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StopWatch&gt;</returns>
        System.Threading.Tasks.Task<List<StopWatch>> UserGetStopWatchesAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list of all existing stopwatches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StopWatch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StopWatch>>> UserGetStopWatchesWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        System.Threading.Tasks.Task<List<AccessToken>> UserGetTokensAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccessToken>>> UserGetTokensWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user&#39;s activity feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        System.Threading.Tasks.Task<List<Activity>> UserListActivityFeedsAsync(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user&#39;s activity feeds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Activity>>> UserListActivityFeedsWithHttpInfoAsync(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List users blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListBlocksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List users blocked by the authenticated user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListBlocksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> UserListEmailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserListEmailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListFollowersAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowersWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListFollowingAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowingWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        System.Threading.Tasks.Task<List<GPGKey>> UserListGPGKeysAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserListGPGKeysWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the authenticated user&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        System.Threading.Tasks.Task<List<Hook>> UserListHooksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the authenticated user&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Hook>>> UserListHooksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        System.Threading.Tasks.Task<List<PublicKey>> UserListKeysAsync(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserListKeysWithHttpInfoAsync(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserListReposAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserListReposWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserListStarredAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserListStarredWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> UserListSubscriptionsAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> UserListSubscriptionsWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all the teams a user belongs to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> UserListTeamsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all the teams a user belongs to
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> UserListTeamsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearch200Response</returns>
        System.Threading.Tasks.Task<UserSearch200Response> UserSearchAsync(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSearch200Response>> UserSearchWithHttpInfoAsync(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserUnblockUserAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unblock a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserUnblockUserWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserUpdateAvatarAsync(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserUpdateAvatarWithHttpInfoAsync(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        System.Threading.Tasks.Task<OAuth2Application> UserUpdateOAuth2ApplicationAsync(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Application>> UserUpdateOAuth2ApplicationWithHttpInfoAsync(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        System.Threading.Tasks.Task<GPGKey> UserVerifyGPGKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify a GPG key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserVerifyGPGKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Gitea.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                new Gitea.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Gitea.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Gitea.Net.Client.ISynchronousClient client, Gitea.Net.Client.IAsynchronousClient asyncClient, Gitea.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Gitea.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Gitea.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Repository</returns>
        public Repository CreateCurrentUserRepo(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Repository> localVarResponse = CreateCurrentUserRepoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Repository</returns>
        public Gitea.Net.Client.ApiResponse<Repository> CreateCurrentUserRepoWithHttpInfo(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.CreateCurrentUserRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Repository>("/user/repos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> CreateCurrentUserRepoAsync(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Repository> localVarResponse = await CreateCurrentUserRepoWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Repository>> CreateCurrentUserRepoWithHttpInfoAsync(CreateRepoOption? body = default(CreateRepoOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.CreateCurrentUserRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Repository>("/user/repos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a user-level variable 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateUserVariable(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0)
        {
            CreateUserVariableWithHttpInfo(variablename, body);
        }

        /// <summary>
        /// Create a user-level variable 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> CreateUserVariableWithHttpInfo(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0)
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->CreateUserVariable");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.CreateUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a user-level variable 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateUserVariableAsync(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateUserVariableWithHttpInfoAsync(variablename, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create a user-level variable 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> CreateUserVariableWithHttpInfoAsync(string variablename, CreateVariableOption? body = default(CreateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->CreateUserVariable");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.CreateUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a secret in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUserSecret(string secretname, int operationIndex = 0)
        {
            DeleteUserSecretWithHttpInfo(secretname);
        }

        /// <summary>
        /// Delete a secret in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> DeleteUserSecretWithHttpInfo(string secretname, int operationIndex = 0)
        {
            // verify the required parameter 'secretname' is set
            if (secretname == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'secretname' when calling UserApi->DeleteUserSecret");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("secretname", Gitea.Net.Client.ClientUtils.ParameterToString(secretname)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserSecret";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/actions/secrets/{secretname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a secret in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserSecretAsync(string secretname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserSecretWithHttpInfoAsync(secretname, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a secret in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> DeleteUserSecretWithHttpInfoAsync(string secretname, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'secretname' is set
            if (secretname == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'secretname' when calling UserApi->DeleteUserSecret");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("secretname", Gitea.Net.Client.ClientUtils.ParameterToString(secretname)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserSecret";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/actions/secrets/{secretname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUserVariable(string variablename, int operationIndex = 0)
        {
            DeleteUserVariableWithHttpInfo(variablename);
        }

        /// <summary>
        /// Delete a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> DeleteUserVariableWithHttpInfo(string variablename, int operationIndex = 0)
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->DeleteUserVariable");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserVariableAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserVariableWithHttpInfoAsync(variablename, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> DeleteUserVariableWithHttpInfoAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->DeleteUserVariable");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSettings&gt;</returns>
        public List<UserSettings> GetUserSettings(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<UserSettings>> localVarResponse = GetUserSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSettings&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<UserSettings>> GetUserSettingsWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetUserSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserSettings>>("/user/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSettings&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSettings>> GetUserSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<UserSettings>> localVarResponse = await GetUserSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSettings&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<UserSettings>>> GetUserSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetUserSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserSettings>>("/user/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActionVariable</returns>
        public ActionVariable GetUserVariable(string variablename, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<ActionVariable> localVarResponse = GetUserVariableWithHttpInfo(variablename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActionVariable</returns>
        public Gitea.Net.Client.ApiResponse<ActionVariable> GetUserVariableWithHttpInfo(string variablename, int operationIndex = 0)
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->GetUserVariable");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ActionVariable>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActionVariable</returns>
        public async System.Threading.Tasks.Task<ActionVariable> GetUserVariableAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<ActionVariable> localVarResponse = await GetUserVariableWithHttpInfoAsync(variablename, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActionVariable)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<ActionVariable>> GetUserVariableWithHttpInfoAsync(string variablename, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->GetUserVariable");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActionVariable>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user-level list of variables which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActionVariable&gt;</returns>
        public List<ActionVariable> GetUserVariablesList(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<ActionVariable>> localVarResponse = GetUserVariablesListWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user-level list of variables which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActionVariable&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<ActionVariable>> GetUserVariablesListWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserVariablesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActionVariable>>("/user/actions/variables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserVariablesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the user-level list of variables which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActionVariable&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActionVariable>> GetUserVariablesListAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<ActionVariable>> localVarResponse = await GetUserVariablesListWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user-level list of variables which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActionVariable&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<ActionVariable>>> GetUserVariablesListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserVariablesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActionVariable>>("/user/actions/variables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserVariablesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Token to verify 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetVerificationToken(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<string> localVarResponse = GetVerificationTokenWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Token to verify 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Gitea.Net.Client.ApiResponse<string> GetVerificationTokenWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetVerificationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/user/gpg_key_token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerificationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Token to verify 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetVerificationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<string> localVarResponse = await GetVerificationTokenWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Token to verify 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<string>> GetVerificationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetVerificationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/user/gpg_key_token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVerificationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update a secret value in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateUserSecret(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0)
        {
            UpdateUserSecretWithHttpInfo(secretname, body);
        }

        /// <summary>
        /// Create or Update a secret value in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UpdateUserSecretWithHttpInfo(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0)
        {
            // verify the required parameter 'secretname' is set
            if (secretname == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'secretname' when calling UserApi->UpdateUserSecret");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("secretname", Gitea.Net.Client.ClientUtils.ParameterToString(secretname)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserSecret";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/actions/secrets/{secretname}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update a secret value in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserSecretAsync(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateUserSecretWithHttpInfoAsync(secretname, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or Update a secret value in a user scope 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secretname">name of the secret</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UpdateUserSecretWithHttpInfoAsync(string secretname, CreateOrUpdateSecretOption? body = default(CreateOrUpdateSecretOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'secretname' is set
            if (secretname == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'secretname' when calling UserApi->UpdateUserSecret");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("secretname", Gitea.Net.Client.ClientUtils.ParameterToString(secretname)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserSecret";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/actions/secrets/{secretname}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserSecret", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserSettings&gt;</returns>
        public List<UserSettings> UpdateUserSettings(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<UserSettings>> localVarResponse = UpdateUserSettingsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserSettings&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<UserSettings>> UpdateUserSettingsWithHttpInfo(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<List<UserSettings>>("/user/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserSettings&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserSettings>> UpdateUserSettingsAsync(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<UserSettings>> localVarResponse = await UpdateUserSettingsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user settings 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserSettings&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<UserSettings>>> UpdateUserSettingsWithHttpInfoAsync(UserSettingsOptions? body = default(UserSettingsOptions?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<List<UserSettings>>("/user/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateUserVariable(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0)
        {
            UpdateUserVariableWithHttpInfo(variablename, body);
        }

        /// <summary>
        /// Update a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UpdateUserVariableWithHttpInfo(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0)
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->UpdateUserVariable");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserVariableAsync(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateUserVariableWithHttpInfoAsync(variablename, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update a user-level variable which is created by current doer 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variablename">name of the variable</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UpdateUserVariableWithHttpInfoAsync(string variablename, UpdateVariableOption? body = default(UpdateVariableOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'variablename' is set
            if (variablename == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'variablename' when calling UserApi->UpdateUserVariable");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("variablename", Gitea.Net.Client.ClientUtils.ParameterToString(variablename)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UpdateUserVariable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/actions/variables/{variablename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserVariable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> UserAddEmail(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = UserAddEmailWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Email>> UserAddEmailWithHttpInfo(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserAddEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Email>>("/user/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAddEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> UserAddEmailAsync(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = await UserAddEmailWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Email>>> UserAddEmailWithHttpInfoAsync(CreateEmailOption? body = default(CreateEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserAddEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Email>>("/user/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAddEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Block a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserBlockUser(string username, string? note = default(string?), int operationIndex = 0)
        {
            UserBlockUserWithHttpInfo(username, note);
        }

        /// <summary>
        /// Block a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserBlockUserWithHttpInfo(string username, string? note = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserBlockUser");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (note != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "note", note));
            }

            localVarRequestOptions.Operation = "UserApi.UserBlockUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserBlockUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Block a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserBlockUserAsync(string username, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserBlockUserWithHttpInfoAsync(username, note, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Block a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to block</param>
        /// <param name="note">optional note for the block (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserBlockUserWithHttpInfoAsync(string username, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserBlockUser");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (note != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "note", note));
            }

            localVarRequestOptions.Operation = "UserApi.UserBlockUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserBlockUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if one user is following another user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCheckFollowing(string username, string target, int operationIndex = 0)
        {
            UserCheckFollowingWithHttpInfo(username, target);
        }

        /// <summary>
        /// Check if one user is following another user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCheckFollowingWithHttpInfo(string username, string target, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCheckFollowing");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'target' when calling UserApi->UserCheckFollowing");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Gitea.Net.Client.ClientUtils.ParameterToString(target)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCheckFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/{username}/following/{target}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCheckFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if one user is following another user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCheckFollowingAsync(string username, string target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCheckFollowingWithHttpInfoAsync(username, target, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if one user is following another user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of following user</param>
        /// <param name="target">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCheckFollowingWithHttpInfoAsync(string username, string target, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCheckFollowing");
            }

            // verify the required parameter 'target' is set
            if (target == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'target' when calling UserApi->UserCheckFollowing");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("target", Gitea.Net.Client.ClientUtils.ParameterToString(target)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCheckFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/{username}/following/{target}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCheckFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a user is blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCheckUserBlock(string username, int operationIndex = 0)
        {
            UserCheckUserBlockWithHttpInfo(username);
        }

        /// <summary>
        /// Check if a user is blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCheckUserBlockWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCheckUserBlock");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCheckUserBlock";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCheckUserBlock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if a user is blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCheckUserBlockAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCheckUserBlockWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if a user is blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to check</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCheckUserBlockWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCheckUserBlock");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCheckUserBlock";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCheckUserBlock", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook UserCreateHook(CreateHookOption body, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = UserCreateHookWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> UserCreateHookWithHttpInfo(CreateHookOption body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserCreateHook");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Hook>("/user/hooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> UserCreateHookAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await UserCreateHookWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> UserCreateHookWithHttpInfoAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserCreateHook");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Hook>("/user/hooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// creates a new OAuth2 application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        public OAuth2Application UserCreateOAuth2Application(CreateOAuth2ApplicationOptions body, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = UserCreateOAuth2ApplicationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// creates a new OAuth2 application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        public Gitea.Net.Client.ApiResponse<OAuth2Application> UserCreateOAuth2ApplicationWithHttpInfo(CreateOAuth2ApplicationOptions body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserCreateOAuth2Application");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Application>("/user/applications/oauth2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// creates a new OAuth2 application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        public async System.Threading.Tasks.Task<OAuth2Application> UserCreateOAuth2ApplicationAsync(CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = await UserCreateOAuth2ApplicationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// creates a new OAuth2 application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<OAuth2Application>> UserCreateOAuth2ApplicationWithHttpInfoAsync(CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserCreateOAuth2Application");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Application>("/user/applications/oauth2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccessToken</returns>
        public AccessToken UserCreateToken(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<AccessToken> localVarResponse = UserCreateTokenWithHttpInfo(username, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccessToken</returns>
        public Gitea.Net.Client.ApiResponse<AccessToken> UserCreateTokenWithHttpInfo(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCreateToken");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccessToken>("/users/{username}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccessToken</returns>
        public async System.Threading.Tasks.Task<AccessToken> UserCreateTokenAsync(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<AccessToken> localVarResponse = await UserCreateTokenWithHttpInfoAsync(username, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccessToken)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<AccessToken>> UserCreateTokenWithHttpInfoAsync(string username, CreateAccessTokenOption? body = default(CreateAccessTokenOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCreateToken");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCreateToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccessToken>("/users/{username}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCreateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentCheckFollowing(string username, int operationIndex = 0)
        {
            UserCurrentCheckFollowingWithHttpInfo(username);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentCheckFollowingWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentCheckFollowing");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentCheckFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentCheckFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentCheckFollowingAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentCheckFollowingWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of followed user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentCheckFollowingWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentCheckFollowing");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentCheckFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentCheckFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Whether the authenticated is starring the repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentCheckStarring(string owner, string repo, int operationIndex = 0)
        {
            UserCurrentCheckStarringWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentCheckStarringWithHttpInfo(string owner, string repo, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentCheckStarring");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentCheckStarring");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentCheckStarring";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentCheckStarring", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Whether the authenticated is starring the repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentCheckStarringAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentCheckStarringWithHttpInfoAsync(owner, repo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentCheckStarringWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentCheckStarring");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentCheckStarring");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentCheckStarring";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentCheckStarring", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentDeleteFollow(string username, int operationIndex = 0)
        {
            UserCurrentDeleteFollowWithHttpInfo(username);
        }

        /// <summary>
        /// Unfollow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentDeleteFollowWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentDeleteFollow");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteFollow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteFollow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unfollow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteFollowAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentDeleteFollowWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unfollow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to unfollow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentDeleteFollowWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentDeleteFollow");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteFollow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteFollow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentDeleteGPGKey(long id, int operationIndex = 0)
        {
            UserCurrentDeleteGPGKeyWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentDeleteGPGKeyWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/gpg_keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteGPGKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentDeleteGPGKeyWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentDeleteGPGKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/gpg_keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentDeleteKey(long id, int operationIndex = 0)
        {
            UserCurrentDeleteKeyWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentDeleteKeyWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentDeleteKeyWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentDeleteKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unstar the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentDeleteStar(string owner, string repo, int operationIndex = 0)
        {
            UserCurrentDeleteStarWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Unstar the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentDeleteStarWithHttpInfo(string owner, string repo, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentDeleteStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentDeleteStar");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteStar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteStar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unstar the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteStarAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentDeleteStarWithHttpInfoAsync(owner, repo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unstar the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentDeleteStarWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentDeleteStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentDeleteStar");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentDeleteStar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentDeleteStar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        public GPGKey UserCurrentGetGPGKey(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = UserCurrentGetGPGKeyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        public Gitea.Net.Client.ApiResponse<GPGKey> UserCurrentGetGPGKeyWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentGetGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GPGKey>("/user/gpg_keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentGetGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        public async System.Threading.Tasks.Task<GPGKey> UserCurrentGetGPGKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = await UserCurrentGetGPGKeyWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<GPGKey>> UserCurrentGetGPGKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentGetGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GPGKey>("/user/gpg_keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentGetGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        public PublicKey UserCurrentGetKey(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = UserCurrentGetKeyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        public Gitea.Net.Client.ApiResponse<PublicKey> UserCurrentGetKeyWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentGetKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PublicKey>("/user/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentGetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        public async System.Threading.Tasks.Task<PublicKey> UserCurrentGetKeyAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = await UserCurrentGetKeyWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of key to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<PublicKey>> UserCurrentGetKeyWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentGetKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PublicKey>("/user/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentGetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserCurrentListFollowers(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = UserCurrentListFollowersWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> UserCurrentListFollowersWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/user/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserCurrentListFollowersAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await UserCurrentListFollowersWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> UserCurrentListFollowersWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/user/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users that the authenticated user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserCurrentListFollowing(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = UserCurrentListFollowingWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the authenticated user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> UserCurrentListFollowingWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/user/following", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users that the authenticated user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserCurrentListFollowingAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await UserCurrentListFollowingWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the authenticated user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> UserCurrentListFollowingWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/user/following", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        public List<GPGKey> UserCurrentListGPGKeys(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<GPGKey>> localVarResponse = UserCurrentListGPGKeysWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<GPGKey>> UserCurrentListGPGKeysWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListGPGKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GPGKey>>("/user/gpg_keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListGPGKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<GPGKey>> UserCurrentListGPGKeysAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<GPGKey>> localVarResponse = await UserCurrentListGPGKeysWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<GPGKey>>> UserCurrentListGPGKeysWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListGPGKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GPGKey>>("/user/gpg_keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListGPGKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        public List<PublicKey> UserCurrentListKeys(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<PublicKey>> localVarResponse = UserCurrentListKeysWithHttpInfo(fingerprint, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<PublicKey>> UserCurrentListKeysWithHttpInfo(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fingerprint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "fingerprint", fingerprint));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PublicKey>>("/user/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicKey>> UserCurrentListKeysAsync(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<PublicKey>> localVarResponse = await UserCurrentListKeysWithHttpInfoAsync(fingerprint, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<PublicKey>>> UserCurrentListKeysWithHttpInfoAsync(string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fingerprint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "fingerprint", fingerprint));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PublicKey>>("/user/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repos that the authenticated user owns 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserCurrentListRepos(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserCurrentListReposWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos that the authenticated user owns 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserCurrentListReposWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/user/repos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repos that the authenticated user owns 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserCurrentListReposAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserCurrentListReposWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos that the authenticated user owns 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserCurrentListReposWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/user/repos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The repos that the authenticated user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserCurrentListStarred(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserCurrentListStarredWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the authenticated user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserCurrentListStarredWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/user/starred", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The repos that the authenticated user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserCurrentListStarredAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserCurrentListStarredWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the authenticated user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserCurrentListStarredWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/user/starred", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List repositories watched by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserCurrentListSubscriptions(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserCurrentListSubscriptionsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List repositories watched by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserCurrentListSubscriptionsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/user/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List repositories watched by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserCurrentListSubscriptionsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserCurrentListSubscriptionsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List repositories watched by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserCurrentListSubscriptionsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentListSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/user/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentListSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        public GPGKey UserCurrentPostGPGKey(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = UserCurrentPostGPGKeyWithHttpInfo(form);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        public Gitea.Net.Client.ApiResponse<GPGKey> UserCurrentPostGPGKeyWithHttpInfo(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = form;

            localVarRequestOptions.Operation = "UserApi.UserCurrentPostGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GPGKey>("/user/gpg_keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPostGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        public async System.Threading.Tasks.Task<GPGKey> UserCurrentPostGPGKeyAsync(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = await UserCurrentPostGPGKeyWithHttpInfoAsync(form, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="form"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<GPGKey>> UserCurrentPostGPGKeyWithHttpInfoAsync(CreateGPGKeyOption? form = default(CreateGPGKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = form;

            localVarRequestOptions.Operation = "UserApi.UserCurrentPostGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GPGKey>("/user/gpg_keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPostGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        public PublicKey UserCurrentPostKey(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = UserCurrentPostKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        public Gitea.Net.Client.ApiResponse<PublicKey> UserCurrentPostKeyWithHttpInfo(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCurrentPostKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PublicKey>("/user/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPostKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        public async System.Threading.Tasks.Task<PublicKey> UserCurrentPostKeyAsync(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = await UserCurrentPostKeyWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<PublicKey>> UserCurrentPostKeyWithHttpInfoAsync(CreateKeyOption? body = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserCurrentPostKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublicKey>("/user/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPostKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentPutFollow(string username, int operationIndex = 0)
        {
            UserCurrentPutFollowWithHttpInfo(username);
        }

        /// <summary>
        /// Follow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentPutFollowWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentPutFollow");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentPutFollow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPutFollow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Follow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentPutFollowAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentPutFollowWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Follow a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to follow</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentPutFollowWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentPutFollow");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentPutFollow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/following/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPutFollow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Star the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserCurrentPutStar(string owner, string repo, int operationIndex = 0)
        {
            UserCurrentPutStarWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Star the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserCurrentPutStarWithHttpInfo(string owner, string repo, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentPutStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentPutStar");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentPutStar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPutStar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Star the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentPutStarAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserCurrentPutStarWithHttpInfoAsync(owner, repo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Star the given repo 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserCurrentPutStarWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentPutStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentPutStar");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserCurrentPutStar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/user/starred/{owner}/{repo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentPutStar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the current user&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        public List<TrackedTime> UserCurrentTrackedTimes(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<TrackedTime>> localVarResponse = UserCurrentTrackedTimesWithHttpInfo(page, limit, since, before);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the current user&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<TrackedTime>> UserCurrentTrackedTimesWithHttpInfo(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentTrackedTimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TrackedTime>>("/user/times", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentTrackedTimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the current user&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedTime>> UserCurrentTrackedTimesAsync(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<TrackedTime>> localVarResponse = await UserCurrentTrackedTimesWithHttpInfoAsync(page, limit, since, before, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the current user&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<TrackedTime>>> UserCurrentTrackedTimesWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), DateTime? since = default(DateTime?), DateTime? before = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            localVarRequestOptions.Operation = "UserApi.UserCurrentTrackedTimes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TrackedTime>>("/user/times", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserCurrentTrackedTimes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserDeleteAccessToken(string username, string token, int operationIndex = 0)
        {
            UserDeleteAccessTokenWithHttpInfo(username, token);
        }

        /// <summary>
        /// delete an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserDeleteAccessTokenWithHttpInfo(string username, string token, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserDeleteAccessToken");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'token' when calling UserApi->UserDeleteAccessToken");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Gitea.Net.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{username}/tokens/{token}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteAccessTokenAsync(string username, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserDeleteAccessTokenWithHttpInfoAsync(username, token, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete an access token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="token">token to be deleted, identified by ID and if not available by name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserDeleteAccessTokenWithHttpInfoAsync(string username, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserDeleteAccessToken");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'token' when calling UserApi->UserDeleteAccessToken");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("token", Gitea.Net.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteAccessToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{username}/tokens/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteAccessToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserDeleteAvatar(int operationIndex = 0)
        {
            UserDeleteAvatarWithHttpInfo();
        }

        /// <summary>
        /// Delete Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserDeleteAvatarWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserDeleteAvatar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/avatar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteAvatar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteAvatarAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserDeleteAvatarWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserDeleteAvatarWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserDeleteAvatar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/avatar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteAvatar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserDeleteEmail(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0)
        {
            UserDeleteEmailWithHttpInfo(body);
        }

        /// <summary>
        /// Delete email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserDeleteEmailWithHttpInfo(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserDeleteEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteEmailAsync(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserDeleteEmailWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserDeleteEmailWithHttpInfoAsync(DeleteEmailOption? body = default(DeleteEmailOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserDeleteEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserDeleteHook(long id, int operationIndex = 0)
        {
            UserDeleteHookWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserDeleteHookWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserDeleteHookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserDeleteHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserDeleteOAuth2Application(long id, int operationIndex = 0)
        {
            UserDeleteOAuth2ApplicationWithHttpInfo(id);
        }

        /// <summary>
        /// delete an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserDeleteOAuth2ApplicationWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteOAuth2ApplicationAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserDeleteOAuth2ApplicationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">token to be deleted</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserDeleteOAuth2ApplicationWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserDeleteOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDeleteOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook UserEditHook(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = UserEditHookWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> UserEditHookWithHttpInfo(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserEditHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Hook>("/user/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserEditHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> UserEditHookAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await UserEditHookWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> UserEditHookWithHttpInfoAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserEditHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Hook>("/user/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserEditHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User UserGet(string username, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = UserGetWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Gitea.Net.Client.ApiResponse<User> UserGetWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGet");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserGetAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = await UserGetWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<User>> UserGetWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGet");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User UserGetCurrent(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = UserGetCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Gitea.Net.Client.ApiResponse<User> UserGetCurrentWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserGetCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = await UserGetCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<User>> UserGetCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s heatmap 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserHeatmapData&gt;</returns>
        public List<UserHeatmapData> UserGetHeatmapData(string username, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<UserHeatmapData>> localVarResponse = UserGetHeatmapDataWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s heatmap 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserHeatmapData&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<UserHeatmapData>> UserGetHeatmapDataWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGetHeatmapData");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetHeatmapData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserHeatmapData>>("/users/{username}/heatmap", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetHeatmapData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s heatmap 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserHeatmapData&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserHeatmapData>> UserGetHeatmapDataAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<UserHeatmapData>> localVarResponse = await UserGetHeatmapDataWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s heatmap 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserHeatmapData&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<UserHeatmapData>>> UserGetHeatmapDataWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGetHeatmapData");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetHeatmapData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserHeatmapData>>("/users/{username}/heatmap", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetHeatmapData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook UserGetHook(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = UserGetHookWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> UserGetHookWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Hook>("/user/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> UserGetHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await UserGetHookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> UserGetHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Hook>("/user/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        public OAuth2Application UserGetOAuth2Application(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = UserGetOAuth2ApplicationWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        public Gitea.Net.Client.ApiResponse<OAuth2Application> UserGetOAuth2ApplicationWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuth2Application>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        public async System.Threading.Tasks.Task<OAuth2Application> UserGetOAuth2ApplicationAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = await UserGetOAuth2ApplicationWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get an OAuth2 Application 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Application ID to be found</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<OAuth2Application>> UserGetOAuth2ApplicationWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserGetOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuth2Application>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OAuth2Application&gt;</returns>
        public List<OAuth2Application> UserGetOauth2Application(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<OAuth2Application>> localVarResponse = UserGetOauth2ApplicationWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OAuth2Application&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<OAuth2Application>> UserGetOauth2ApplicationWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetOauth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Application>>("/user/applications/oauth2", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetOauth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Application&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Application>> UserGetOauth2ApplicationAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<OAuth2Application>> localVarResponse = await UserGetOauth2ApplicationWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s oauth2 applications 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Application&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<OAuth2Application>>> UserGetOauth2ApplicationWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetOauth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Application>>("/user/applications/oauth2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetOauth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an user&#39;s actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserGetRunnerRegistrationToken(int operationIndex = 0)
        {
            UserGetRunnerRegistrationTokenWithHttpInfo();
        }

        /// <summary>
        /// Get an user&#39;s actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserGetRunnerRegistrationTokenWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetRunnerRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/user/actions/runners/registration-token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetRunnerRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an user&#39;s actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserGetRunnerRegistrationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserGetRunnerRegistrationTokenWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an user&#39;s actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserGetRunnerRegistrationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserGetRunnerRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/user/actions/runners/registration-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetRunnerRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all existing stopwatches 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StopWatch&gt;</returns>
        public List<StopWatch> UserGetStopWatches(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<StopWatch>> localVarResponse = UserGetStopWatchesWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all existing stopwatches 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StopWatch&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<StopWatch>> UserGetStopWatchesWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetStopWatches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StopWatch>>("/user/stopwatches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetStopWatches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list of all existing stopwatches 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StopWatch&gt;</returns>
        public async System.Threading.Tasks.Task<List<StopWatch>> UserGetStopWatchesAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<StopWatch>> localVarResponse = await UserGetStopWatchesWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of all existing stopwatches 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StopWatch&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<StopWatch>>> UserGetStopWatchesWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetStopWatches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StopWatch>>("/user/stopwatches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetStopWatches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AccessToken&gt;</returns>
        public List<AccessToken> UserGetTokens(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<AccessToken>> localVarResponse = UserGetTokensWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AccessToken&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<AccessToken>> UserGetTokensWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGetTokens");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccessToken>>("/users/{username}/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccessToken>> UserGetTokensAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<AccessToken>> localVarResponse = await UserGetTokensWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessToken&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<AccessToken>>> UserGetTokensWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGetTokens");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserGetTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccessToken>>("/users/{username}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s activity feeds 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Activity&gt;</returns>
        public List<Activity> UserListActivityFeeds(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Activity>> localVarResponse = UserListActivityFeedsWithHttpInfo(username, onlyPerformedBy, date, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s activity feeds 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Activity>> UserListActivityFeedsWithHttpInfo(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListActivityFeeds");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (onlyPerformedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "only-performed-by", onlyPerformedBy));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListActivityFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Activity>>("/users/{username}/activities/feeds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListActivityFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s activity feeds 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        public async System.Threading.Tasks.Task<List<Activity>> UserListActivityFeedsAsync(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Activity>> localVarResponse = await UserListActivityFeedsWithHttpInfoAsync(username, onlyPerformedBy, date, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s activity feeds 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="onlyPerformedBy">if true, only show actions performed by the requested user (optional)</param>
        /// <param name="date">the date of the activities to be found (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Activity>>> UserListActivityFeedsWithHttpInfoAsync(string username, bool? onlyPerformedBy = default(bool?), DateOnly? date = default(DateOnly?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListActivityFeeds");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (onlyPerformedBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "only-performed-by", onlyPerformedBy));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListActivityFeeds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Activity>>("/users/{username}/activities/feeds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListActivityFeeds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserListBlocks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = UserListBlocksWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> UserListBlocksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListBlocks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/user/blocks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListBlocks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List users blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListBlocksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await UserListBlocksWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List users blocked by the authenticated user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> UserListBlocksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListBlocks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/user/blocks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListBlocks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> UserListEmails(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = UserListEmailsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Email>> UserListEmailsWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserListEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Email>>("/user/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> UserListEmailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = await UserListEmailsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Email>>> UserListEmailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserListEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Email>>("/user/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserListFollowers(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = UserListFollowersWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> UserListFollowersWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowers");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/users/{username}/followers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListFollowersAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await UserListFollowersWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s followers 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> UserListFollowersWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowers");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListFollowers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users/{username}/followers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListFollowers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users that the given user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserListFollowing(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = UserListFollowingWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the given user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> UserListFollowingWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowing");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/users/{username}/following", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users that the given user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListFollowingAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await UserListFollowingWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the given user is following 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> UserListFollowingWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowing");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListFollowing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users/{username}/following", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListFollowing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        public List<GPGKey> UserListGPGKeys(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<GPGKey>> localVarResponse = UserListGPGKeysWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<GPGKey>> UserListGPGKeysWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListGPGKeys");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListGPGKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GPGKey>>("/users/{username}/gpg_keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListGPGKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<GPGKey>> UserListGPGKeysAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<GPGKey>> localVarResponse = await UserListGPGKeysWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<GPGKey>>> UserListGPGKeysWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListGPGKeys");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListGPGKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GPGKey>>("/users/{username}/gpg_keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListGPGKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Hook&gt;</returns>
        public List<Hook> UserListHooks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Hook>> localVarResponse = UserListHooksWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Hook>> UserListHooksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Hook>>("/user/hooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the authenticated user&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Hook>> UserListHooksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Hook>> localVarResponse = await UserListHooksWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Hook>>> UserListHooksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Hook>>("/user/hooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        public List<PublicKey> UserListKeys(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<PublicKey>> localVarResponse = UserListKeysWithHttpInfo(username, fingerprint, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<PublicKey>> UserListKeysWithHttpInfo(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListKeys");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (fingerprint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "fingerprint", fingerprint));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PublicKey>>("/users/{username}/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the given user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicKey>> UserListKeysAsync(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<PublicKey>> localVarResponse = await UserListKeysWithHttpInfoAsync(username, fingerprint, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s public keys 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<PublicKey>>> UserListKeysWithHttpInfoAsync(string username, string? fingerprint = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListKeys");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (fingerprint != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "fingerprint", fingerprint));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PublicKey>>("/users/{username}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repos owned by the given user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserListRepos(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserListReposWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos owned by the given user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserListReposWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListRepos");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/users/{username}/repos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repos owned by the given user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserListReposAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserListReposWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos owned by the given user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserListReposWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListRepos");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListRepos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/users/{username}/repos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListRepos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The repos that the given user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserListStarred(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserListStarredWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the given user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserListStarredWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListStarred");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/users/{username}/starred", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The repos that the given user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserListStarredAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserListStarredWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the given user has starred 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserListStarredWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListStarred");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListStarred";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/users/{username}/starred", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListStarred", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repositories watched by a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> UserListSubscriptions(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = UserListSubscriptionsWithHttpInfo(username, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repositories watched by a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Repository>> UserListSubscriptionsWithHttpInfo(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListSubscriptions");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Repository>>("/users/{username}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the repositories watched by a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> UserListSubscriptionsAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Repository>> localVarResponse = await UserListSubscriptionsWithHttpInfoAsync(username, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the repositories watched by a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Repository>>> UserListSubscriptionsWithHttpInfoAsync(string username, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListSubscriptions");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Repository>>("/users/{username}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the teams a user belongs to 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> UserListTeams(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Team>> localVarResponse = UserListTeamsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the teams a user belongs to 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Team>> UserListTeamsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListTeams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/user/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all the teams a user belongs to 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> UserListTeamsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Team>> localVarResponse = await UserListTeamsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all the teams a user belongs to 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Team>>> UserListTeamsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserListTeams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/user/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserListTeams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSearch200Response</returns>
        public UserSearch200Response UserSearch(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<UserSearch200Response> localVarResponse = UserSearchWithHttpInfo(q, uid, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSearch200Response</returns>
        public Gitea.Net.Client.ApiResponse<UserSearch200Response> UserSearchWithHttpInfo(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSearch200Response>("/users/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSearch200Response</returns>
        public async System.Threading.Tasks.Task<UserSearch200Response> UserSearchAsync(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<UserSearch200Response> localVarResponse = await UserSearchWithHttpInfoAsync(q, uid, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="uid">ID of the user to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSearch200Response)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<UserSearch200Response>> UserSearchWithHttpInfoAsync(string? q = default(string?), long? uid = default(long?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "UserApi.UserSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSearch200Response>("/users/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unblock a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserUnblockUser(string username, int operationIndex = 0)
        {
            UserUnblockUserWithHttpInfo(username);
        }

        /// <summary>
        /// Unblock a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserUnblockUserWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserUnblockUser");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserUnblockUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUnblockUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unblock a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserUnblockUserAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserUnblockUserWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unblock a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">user to unblock</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserUnblockUserWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->UserUnblockUser");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "UserApi.UserUnblockUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/user/blocks/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUnblockUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserUpdateAvatar(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0)
        {
            UserUpdateAvatarWithHttpInfo(body);
        }

        /// <summary>
        /// Update Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> UserUpdateAvatarWithHttpInfo(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserUpdateAvatar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/user/avatar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateAvatar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserUpdateAvatarAsync(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UserUpdateAvatarWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Avatar 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> UserUpdateAvatarWithHttpInfoAsync(UpdateUserAvatarOption? body = default(UpdateUserAvatarOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserUpdateAvatar";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/user/avatar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateAvatar", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OAuth2Application</returns>
        public OAuth2Application UserUpdateOAuth2Application(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = UserUpdateOAuth2ApplicationWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OAuth2Application</returns>
        public Gitea.Net.Client.ApiResponse<OAuth2Application> UserUpdateOAuth2ApplicationWithHttpInfo(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserUpdateOAuth2Application");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserUpdateOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<OAuth2Application>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Application</returns>
        public async System.Threading.Tasks.Task<OAuth2Application> UserUpdateOAuth2ApplicationAsync(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<OAuth2Application> localVarResponse = await UserUpdateOAuth2ApplicationWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update an OAuth2 Application, this includes regenerating the client secret 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">application to be updated</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Application)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<OAuth2Application>> UserUpdateOAuth2ApplicationWithHttpInfoAsync(long id, CreateOAuth2ApplicationOptions body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling UserApi->UserUpdateOAuth2Application");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "UserApi.UserUpdateOAuth2Application";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<OAuth2Application>("/user/applications/oauth2/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserUpdateOAuth2Application", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GPGKey</returns>
        public GPGKey UserVerifyGPGKey(int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = UserVerifyGPGKeyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GPGKey</returns>
        public Gitea.Net.Client.ApiResponse<GPGKey> UserVerifyGPGKeyWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserVerifyGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GPGKey>("/user/gpg_key_verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerifyGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GPGKey</returns>
        public async System.Threading.Tasks.Task<GPGKey> UserVerifyGPGKeyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<GPGKey> localVarResponse = await UserVerifyGPGKeyWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify a GPG key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<GPGKey>> UserVerifyGPGKeyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.UserVerifyGPGKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GPGKey>("/user/gpg_key_verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerifyGPGKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
