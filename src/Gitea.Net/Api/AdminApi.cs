/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Gitea.Net.Client;
using Gitea.Net.Model;

namespace Gitea.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a badge to a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminAddUserBadges(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0);

        /// <summary>
        /// Add a badge to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminAddUserBadgesWithHttpInfo(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0);
        /// <summary>
        /// Adopt unadopted files as a repository
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminAdoptRepository(string owner, string repo, int operationIndex = 0);

        /// <summary>
        /// Adopt unadopted files as a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminAdoptRepositoryWithHttpInfo(string owner, string repo, int operationIndex = 0);
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook AdminCreateHook(CreateHookOption body, int operationIndex = 0);

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> AdminCreateHookWithHttpInfo(CreateHookOption body, int operationIndex = 0);
        /// <summary>
        /// Create an organization
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        Organization AdminCreateOrg(string username, CreateOrgOption organization, int operationIndex = 0);

        /// <summary>
        /// Create an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> AdminCreateOrgWithHttpInfo(string username, CreateOrgOption organization, int operationIndex = 0);
        /// <summary>
        /// Add a public key on behalf of a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        PublicKey AdminCreatePublicKey(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0);

        /// <summary>
        /// Add a public key on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        ApiResponse<PublicKey> AdminCreatePublicKeyWithHttpInfo(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0);
        /// <summary>
        /// Create a repository on behalf of a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Repository</returns>
        Repository AdminCreateRepo(string username, CreateRepoOption repository, int operationIndex = 0);

        /// <summary>
        /// Create a repository on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> AdminCreateRepoWithHttpInfo(string username, CreateRepoOption repository, int operationIndex = 0);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User AdminCreateUser(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> AdminCreateUserWithHttpInfo(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0);
        /// <summary>
        /// List cron tasks
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Cron&gt;</returns>
        List<Cron> AdminCronList(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List cron tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Cron&gt;</returns>
        ApiResponse<List<Cron>> AdminCronListWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Run cron task
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminCronRun(string task, int operationIndex = 0);

        /// <summary>
        /// Run cron task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminCronRunWithHttpInfo(string task, int operationIndex = 0);
        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminDeleteHook(long id, int operationIndex = 0);

        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteHookWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Delete unadopted files
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminDeleteUnadoptedRepository(string owner, string repo, int operationIndex = 0);

        /// <summary>
        /// Delete unadopted files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteUnadoptedRepositoryWithHttpInfo(string owner, string repo, int operationIndex = 0);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminDeleteUser(string username, bool? purge = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteUserWithHttpInfo(string username, bool? purge = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove a badge from a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminDeleteUserBadges(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0);

        /// <summary>
        /// Remove a badge from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteUserBadgesWithHttpInfo(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0);
        /// <summary>
        /// Delete a user&#39;s public key
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminDeleteUserPublicKey(string username, long id, int operationIndex = 0);

        /// <summary>
        /// Delete a user&#39;s public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteUserPublicKeyWithHttpInfo(string username, long id, int operationIndex = 0);
        /// <summary>
        /// Update a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook AdminEditHook(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0);

        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> AdminEditHookWithHttpInfo(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0);
        /// <summary>
        /// Edit an existing user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User AdminEditUser(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0);

        /// <summary>
        /// Edit an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> AdminEditUserWithHttpInfo(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0);
        /// <summary>
        /// List all emails
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> AdminGetAllEmails(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> AdminGetAllEmailsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all organizations
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Organization&gt;</returns>
        List<Organization> AdminGetAllOrgs(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        ApiResponse<List<Organization>> AdminGetAllOrgsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        Hook AdminGetHook(long id, int operationIndex = 0);

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> AdminGetHookWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Get an global actions runner registration token
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminGetRunnerRegistrationToken(int operationIndex = 0);

        /// <summary>
        /// Get an global actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminGetRunnerRegistrationTokenWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List system&#39;s webhooks
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Hook&gt;</returns>
        List<Hook> AdminListHooks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List system&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        ApiResponse<List<Hook>> AdminListHooksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List a user&#39;s badges
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Badge&gt;</returns>
        List<Badge> AdminListUserBadges(string username, int operationIndex = 0);

        /// <summary>
        /// List a user&#39;s badges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Badge&gt;</returns>
        ApiResponse<List<Badge>> AdminListUserBadgesWithHttpInfo(string username, int operationIndex = 0);
        /// <summary>
        /// Rename a user
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AdminRenameUser(string username, RenameUserOption body, int operationIndex = 0);

        /// <summary>
        /// Rename a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminRenameUserWithHttpInfo(string username, RenameUserOption body, int operationIndex = 0);
        /// <summary>
        /// Search all emails
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> AdminSearchEmails(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> AdminSearchEmailsWithHttpInfo(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search users according filter conditions
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> AdminSearchUsers(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search users according filter conditions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> AdminSearchUsersWithHttpInfo(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// List unadopted repositories
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> AdminUnadoptedList(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0);

        /// <summary>
        /// List unadopted repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> AdminUnadoptedListWithHttpInfo(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a badge to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminAddUserBadgesAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a badge to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminAddUserBadgesWithHttpInfoAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adopt unadopted files as a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminAdoptRepositoryAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adopt unadopted files as a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminAdoptRepositoryWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> AdminCreateHookAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> AdminCreateHookWithHttpInfoAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> AdminCreateOrgAsync(string username, CreateOrgOption organization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> AdminCreateOrgWithHttpInfoAsync(string username, CreateOrgOption organization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a public key on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        System.Threading.Tasks.Task<PublicKey> AdminCreatePublicKeyAsync(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a public key on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicKey>> AdminCreatePublicKeyWithHttpInfoAsync(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a repository on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> AdminCreateRepoAsync(string username, CreateRepoOption repository, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a repository on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> AdminCreateRepoWithHttpInfoAsync(string username, CreateRepoOption repository, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> AdminCreateUserAsync(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> AdminCreateUserWithHttpInfoAsync(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List cron tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Cron&gt;</returns>
        System.Threading.Tasks.Task<List<Cron>> AdminCronListAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List cron tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Cron&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Cron>>> AdminCronListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Run cron task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminCronRunAsync(string task, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Run cron task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminCronRunWithHttpInfoAsync(string task, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete unadopted files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteUnadoptedRepositoryAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete unadopted files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUnadoptedRepositoryWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteUserAsync(string username, bool? purge = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUserWithHttpInfoAsync(string username, bool? purge = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a badge from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteUserBadgesAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a badge from a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUserBadgesWithHttpInfoAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user&#39;s public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteUserPublicKeyAsync(string username, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user&#39;s public key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUserPublicKeyWithHttpInfoAsync(string username, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> AdminEditHookAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> AdminEditHookWithHttpInfoAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> AdminEditUserAsync(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> AdminEditUserWithHttpInfoAsync(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> AdminGetAllEmailsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> AdminGetAllEmailsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        System.Threading.Tasks.Task<List<Organization>> AdminGetAllOrgsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all organizations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organization>>> AdminGetAllOrgsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> AdminGetHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> AdminGetHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an global actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminGetRunnerRegistrationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an global actions runner registration token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminGetRunnerRegistrationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List system&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        System.Threading.Tasks.Task<List<Hook>> AdminListHooksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List system&#39;s webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Hook>>> AdminListHooksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List a user&#39;s badges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Badge&gt;</returns>
        System.Threading.Tasks.Task<List<Badge>> AdminListUserBadgesAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List a user&#39;s badges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Badge&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Badge>>> AdminListUserBadgesWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rename a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminRenameUserAsync(string username, RenameUserOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rename a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminRenameUserWithHttpInfoAsync(string username, RenameUserOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> AdminSearchEmailsAsync(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search all emails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> AdminSearchEmailsWithHttpInfoAsync(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search users according filter conditions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> AdminSearchUsersAsync(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search users according filter conditions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> AdminSearchUsersWithHttpInfoAsync(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List unadopted repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> AdminUnadoptedListAsync(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List unadopted repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> AdminUnadoptedListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IAdminApiSync, IAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Gitea.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(string basePath)
        {
            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                new Gitea.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Gitea.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Gitea.Net.Client.Configuration.MergeConfigurations(
                Gitea.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Gitea.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdminApi(Gitea.Net.Client.ISynchronousClient client, Gitea.Net.Client.IAsynchronousClient asyncClient, Gitea.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Gitea.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Gitea.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Gitea.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a badge to a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminAddUserBadges(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0)
        {
            AdminAddUserBadgesWithHttpInfo(username, body);
        }

        /// <summary>
        /// Add a badge to a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminAddUserBadgesWithHttpInfo(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminAddUserBadges");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminAddUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminAddUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a badge to a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminAddUserBadgesAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminAddUserBadgesWithHttpInfoAsync(username, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add a badge to a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminAddUserBadgesWithHttpInfoAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminAddUserBadges");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminAddUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminAddUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adopt unadopted files as a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminAdoptRepository(string owner, string repo, int operationIndex = 0)
        {
            AdminAdoptRepositoryWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Adopt unadopted files as a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminAdoptRepositoryWithHttpInfo(string owner, string repo, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling AdminApi->AdminAdoptRepository");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling AdminApi->AdminAdoptRepository");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminAdoptRepository";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/unadopted/{owner}/{repo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminAdoptRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adopt unadopted files as a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminAdoptRepositoryAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminAdoptRepositoryWithHttpInfoAsync(owner, repo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Adopt unadopted files as a repository 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminAdoptRepositoryWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling AdminApi->AdminAdoptRepository");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling AdminApi->AdminAdoptRepository");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminAdoptRepository";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/unadopted/{owner}/{repo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminAdoptRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook AdminCreateHook(CreateHookOption body, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = AdminCreateHookWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> AdminCreateHookWithHttpInfo(CreateHookOption body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->AdminCreateHook");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Hook>("/admin/hooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> AdminCreateHookAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await AdminCreateHookWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> AdminCreateHookWithHttpInfoAsync(CreateHookOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->AdminCreateHook");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Hook>("/admin/hooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an organization 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Organization</returns>
        public Organization AdminCreateOrg(string username, CreateOrgOption organization, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Organization> localVarResponse = AdminCreateOrgWithHttpInfo(username, organization);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an organization 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Organization</returns>
        public Gitea.Net.Client.ApiResponse<Organization> AdminCreateOrgWithHttpInfo(string username, CreateOrgOption organization, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreateOrg");
            }

            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'organization' when calling AdminApi->AdminCreateOrg");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = organization;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateOrg";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Organization>("/admin/users/{username}/orgs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateOrg", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an organization 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> AdminCreateOrgAsync(string username, CreateOrgOption organization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Organization> localVarResponse = await AdminCreateOrgWithHttpInfoAsync(username, organization, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an organization 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user that will own the created organization</param>
        /// <param name="organization"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Organization>> AdminCreateOrgWithHttpInfoAsync(string username, CreateOrgOption organization, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreateOrg");
            }

            // verify the required parameter 'organization' is set
            if (organization == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'organization' when calling AdminApi->AdminCreateOrg");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = organization;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateOrg";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Organization>("/admin/users/{username}/orgs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateOrg", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a public key on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublicKey</returns>
        public PublicKey AdminCreatePublicKey(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = AdminCreatePublicKeyWithHttpInfo(username, key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a public key on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublicKey</returns>
        public Gitea.Net.Client.ApiResponse<PublicKey> AdminCreatePublicKeyWithHttpInfo(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreatePublicKey");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = key;

            localVarRequestOptions.Operation = "AdminApi.AdminCreatePublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PublicKey>("/admin/users/{username}/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreatePublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a public key on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublicKey</returns>
        public async System.Threading.Tasks.Task<PublicKey> AdminCreatePublicKeyAsync(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<PublicKey> localVarResponse = await AdminCreatePublicKeyWithHttpInfoAsync(username, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a public key on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<PublicKey>> AdminCreatePublicKeyWithHttpInfoAsync(string username, CreateKeyOption? key = default(CreateKeyOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreatePublicKey");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = key;

            localVarRequestOptions.Operation = "AdminApi.AdminCreatePublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublicKey>("/admin/users/{username}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreatePublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a repository on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Repository</returns>
        public Repository AdminCreateRepo(string username, CreateRepoOption repository, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Repository> localVarResponse = AdminCreateRepoWithHttpInfo(username, repository);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Repository</returns>
        public Gitea.Net.Client.ApiResponse<Repository> AdminCreateRepoWithHttpInfo(string username, CreateRepoOption repository, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreateRepo");
            }

            // verify the required parameter 'repository' is set
            if (repository == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repository' when calling AdminApi->AdminCreateRepo");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = repository;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Repository>("/admin/users/{username}/repos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a repository on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> AdminCreateRepoAsync(string username, CreateRepoOption repository, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Repository> localVarResponse = await AdminCreateRepoWithHttpInfoAsync(username, repository, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository on behalf of a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of the user. This user will own the created repository</param>
        /// <param name="repository"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Repository>> AdminCreateRepoWithHttpInfoAsync(string username, CreateRepoOption repository, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminCreateRepo");
            }

            // verify the required parameter 'repository' is set
            if (repository == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repository' when calling AdminApi->AdminCreateRepo");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = repository;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateRepo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Repository>("/admin/users/{username}/repos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateRepo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User AdminCreateUser(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = AdminCreateUserWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Gitea.Net.Client.ApiResponse<User> AdminCreateUserWithHttpInfo(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/admin/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> AdminCreateUserAsync(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = await AdminCreateUserWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<User>> AdminCreateUserWithHttpInfoAsync(CreateUserOption? body = default(CreateUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminCreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/admin/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cron tasks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Cron&gt;</returns>
        public List<Cron> AdminCronList(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Cron>> localVarResponse = AdminCronListWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List cron tasks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Cron&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Cron>> AdminCronListWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminCronList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Cron>>("/admin/cron", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCronList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List cron tasks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Cron&gt;</returns>
        public async System.Threading.Tasks.Task<List<Cron>> AdminCronListAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Cron>> localVarResponse = await AdminCronListWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List cron tasks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Cron&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Cron>>> AdminCronListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminCronList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Cron>>("/admin/cron", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCronList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run cron task 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminCronRun(string task, int operationIndex = 0)
        {
            AdminCronRunWithHttpInfo(task);
        }

        /// <summary>
        /// Run cron task 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminCronRunWithHttpInfo(string task, int operationIndex = 0)
        {
            // verify the required parameter 'task' is set
            if (task == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'task' when calling AdminApi->AdminCronRun");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task", Gitea.Net.Client.ClientUtils.ParameterToString(task)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminCronRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/cron/{task}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCronRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run cron task 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminCronRunAsync(string task, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminCronRunWithHttpInfoAsync(task, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Run cron task 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="task">task to run</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminCronRunWithHttpInfoAsync(string task, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'task' is set
            if (task == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'task' when calling AdminApi->AdminCronRun");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task", Gitea.Net.Client.ClientUtils.ParameterToString(task)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminCronRun";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/cron/{task}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminCronRun", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminDeleteHook(long id, int operationIndex = 0)
        {
            AdminDeleteHookWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminDeleteHookWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminDeleteHookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminDeleteHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete unadopted files 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminDeleteUnadoptedRepository(string owner, string repo, int operationIndex = 0)
        {
            AdminDeleteUnadoptedRepositoryWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Delete unadopted files 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminDeleteUnadoptedRepositoryWithHttpInfo(string owner, string repo, int operationIndex = 0)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling AdminApi->AdminDeleteUnadoptedRepository");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling AdminApi->AdminDeleteUnadoptedRepository");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUnadoptedRepository";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/unadopted/{owner}/{repo}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUnadoptedRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete unadopted files 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteUnadoptedRepositoryAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminDeleteUnadoptedRepositoryWithHttpInfoAsync(owner, repo, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete unadopted files 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminDeleteUnadoptedRepositoryWithHttpInfoAsync(string owner, string repo, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'owner' when calling AdminApi->AdminDeleteUnadoptedRepository");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'repo' when calling AdminApi->AdminDeleteUnadoptedRepository");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("owner", Gitea.Net.Client.ClientUtils.ParameterToString(owner)); // path parameter
            localVarRequestOptions.PathParameters.Add("repo", Gitea.Net.Client.ClientUtils.ParameterToString(repo)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUnadoptedRepository";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/unadopted/{owner}/{repo}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUnadoptedRepository", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminDeleteUser(string username, bool? purge = default(bool?), int operationIndex = 0)
        {
            AdminDeleteUserWithHttpInfo(username, purge);
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminDeleteUserWithHttpInfo(string username, bool? purge = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUser");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (purge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "purge", purge));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/users/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteUserAsync(string username, bool? purge = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminDeleteUserWithHttpInfoAsync(username, purge, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to delete</param>
        /// <param name="purge">purge the user from the system completely (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminDeleteUserWithHttpInfoAsync(string username, bool? purge = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUser");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            if (purge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "purge", purge));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a badge from a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminDeleteUserBadges(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0)
        {
            AdminDeleteUserBadgesWithHttpInfo(username, body);
        }

        /// <summary>
        /// Remove a badge from a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminDeleteUserBadgesWithHttpInfo(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUserBadges");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a badge from a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteUserBadgesAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminDeleteUserBadgesWithHttpInfoAsync(username, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a badge from a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminDeleteUserBadgesWithHttpInfoAsync(string username, UserBadgeOption? body = default(UserBadgeOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUserBadges");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user&#39;s public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminDeleteUserPublicKey(string username, long id, int operationIndex = 0)
        {
            AdminDeleteUserPublicKeyWithHttpInfo(username, id);
        }

        /// <summary>
        /// Delete a user&#39;s public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminDeleteUserPublicKeyWithHttpInfo(string username, long id, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUserPublicKey");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUserPublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/admin/users/{username}/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUserPublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user&#39;s public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteUserPublicKeyAsync(string username, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminDeleteUserPublicKeyWithHttpInfoAsync(username, id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a user&#39;s public key 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="id">id of the key to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminDeleteUserPublicKeyWithHttpInfoAsync(string username, long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminDeleteUserPublicKey");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminDeleteUserPublicKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/admin/users/{username}/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminDeleteUserPublicKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook AdminEditHook(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = AdminEditHookWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> AdminEditHookWithHttpInfo(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminEditHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Hook>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminEditHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> AdminEditHookAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await AdminEditHookWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to update</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> AdminEditHookWithHttpInfoAsync(long id, EditHookOption? body = default(EditHookOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminEditHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Hook>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminEditHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User AdminEditUser(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = AdminEditUserWithHttpInfo(username, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Gitea.Net.Client.ApiResponse<User> AdminEditUserWithHttpInfo(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminEditUser");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminEditUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<User>("/admin/users/{username}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminEditUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> AdminEditUserAsync(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<User> localVarResponse = await AdminEditUserWithHttpInfoAsync(username, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user to edit</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<User>> AdminEditUserWithHttpInfoAsync(string username, EditUserOption? body = default(EditUserOption?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminEditUser");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminEditUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<User>("/admin/users/{username}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminEditUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> AdminGetAllEmails(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = AdminGetAllEmailsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Email>> AdminGetAllEmailsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminGetAllEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Email>>("/admin/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetAllEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> AdminGetAllEmailsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = await AdminGetAllEmailsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Email>>> AdminGetAllEmailsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminGetAllEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Email>>("/admin/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetAllEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all organizations 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Organization&gt;</returns>
        public List<Organization> AdminGetAllOrgs(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Organization>> localVarResponse = AdminGetAllOrgsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all organizations 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Organization&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Organization>> AdminGetAllOrgsWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminGetAllOrgs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Organization>>("/admin/orgs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetAllOrgs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all organizations 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Organization&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organization>> AdminGetAllOrgsAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Organization>> localVarResponse = await AdminGetAllOrgsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all organizations 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Organization&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Organization>>> AdminGetAllOrgsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminGetAllOrgs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Organization>>("/admin/orgs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetAllOrgs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Hook</returns>
        public Hook AdminGetHook(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = AdminGetHookWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Hook</returns>
        public Gitea.Net.Client.ApiResponse<Hook> AdminGetHookWithHttpInfo(long id, int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminGetHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Hook>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> AdminGetHookAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<Hook> localVarResponse = await AdminGetHookWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the hook to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Hook>> AdminGetHookWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Gitea.Net.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminGetHook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Hook>("/admin/hooks/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetHook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an global actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminGetRunnerRegistrationToken(int operationIndex = 0)
        {
            AdminGetRunnerRegistrationTokenWithHttpInfo();
        }

        /// <summary>
        /// Get an global actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminGetRunnerRegistrationTokenWithHttpInfo(int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AdminApi.AdminGetRunnerRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/admin/runners/registration-token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetRunnerRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an global actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminGetRunnerRegistrationTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminGetRunnerRegistrationTokenWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an global actions runner registration token 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminGetRunnerRegistrationTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AdminApi.AdminGetRunnerRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/admin/runners/registration-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminGetRunnerRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List system&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Hook&gt;</returns>
        public List<Hook> AdminListHooks(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Hook>> localVarResponse = AdminListHooksWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List system&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Hook>> AdminListHooksWithHttpInfo(int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminListHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Hook>>("/admin/hooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminListHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List system&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Hook>> AdminListHooksAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Hook>> localVarResponse = await AdminListHooksWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List system&#39;s webhooks 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Hook>>> AdminListHooksWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminListHooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Hook>>("/admin/hooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminListHooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s badges 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Badge&gt;</returns>
        public List<Badge> AdminListUserBadges(string username, int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Badge>> localVarResponse = AdminListUserBadgesWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s badges 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Badge&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Badge>> AdminListUserBadgesWithHttpInfo(string username, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminListUserBadges");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminListUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Badge>>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminListUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a user&#39;s badges 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Badge&gt;</returns>
        public async System.Threading.Tasks.Task<List<Badge>> AdminListUserBadgesAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Badge>> localVarResponse = await AdminListUserBadgesWithHttpInfoAsync(username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s badges 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">username of user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Badge&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Badge>>> AdminListUserBadgesWithHttpInfoAsync(string username, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminListUserBadges");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.AdminListUserBadges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Badge>>("/admin/users/{username}/badges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminListUserBadges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AdminRenameUser(string username, RenameUserOption body, int operationIndex = 0)
        {
            AdminRenameUserWithHttpInfo(username, body);
        }

        /// <summary>
        /// Rename a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Gitea.Net.Client.ApiResponse<Object> AdminRenameUserWithHttpInfo(string username, RenameUserOption body, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminRenameUser");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->AdminRenameUser");
            }

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminRenameUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/admin/users/{username}/rename", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminRenameUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminRenameUserAsync(string username, RenameUserOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AdminRenameUserWithHttpInfoAsync(username, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Rename a user 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">existing username of user</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<Object>> AdminRenameUserWithHttpInfoAsync(string username, RenameUserOption body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'username' when calling AdminApi->AdminRenameUser");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Gitea.Net.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->AdminRenameUser");
            }


            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", Gitea.Net.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.AdminRenameUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/admin/users/{username}/rename", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminRenameUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> AdminSearchEmails(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = AdminSearchEmailsWithHttpInfo(q, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<Email>> AdminSearchEmailsWithHttpInfo(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminSearchEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Email>>("/admin/emails/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminSearchEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> AdminSearchEmailsAsync(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<Email>> localVarResponse = await AdminSearchEmailsWithHttpInfoAsync(q, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search all emails 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<Email>>> AdminSearchEmailsWithHttpInfoAsync(string? q = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminSearchEmails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Email>>("/admin/emails/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminSearchEmails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users according filter conditions 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> AdminSearchUsers(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = AdminSearchUsersWithHttpInfo(sourceId, loginName, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users according filter conditions 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<User>> AdminSearchUsersWithHttpInfo(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "source_id", sourceId));
            }
            if (loginName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "login_name", loginName));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminSearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/admin/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminSearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search users according filter conditions 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> AdminSearchUsersAsync(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<User>> localVarResponse = await AdminSearchUsersWithHttpInfoAsync(sourceId, loginName, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search users according filter conditions 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">ID of the user&#39;s login source to search for (optional)</param>
        /// <param name="loginName">user&#39;s login name to search for (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<User>>> AdminSearchUsersWithHttpInfoAsync(long? sourceId = default(long?), string? loginName = default(string?), int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "source_id", sourceId));
            }
            if (loginName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "login_name", loginName));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminSearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/admin/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminSearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List unadopted repositories 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> AdminUnadoptedList(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.ApiResponse<List<string>> localVarResponse = AdminUnadoptedListWithHttpInfo(page, limit, pattern);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List unadopted repositories 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Gitea.Net.Client.ApiResponse<List<string>> AdminUnadoptedListWithHttpInfo(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0)
        {
            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (pattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "pattern", pattern));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminUnadoptedList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/admin/unadopted", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminUnadoptedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List unadopted repositories 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> AdminUnadoptedListAsync(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Gitea.Net.Client.ApiResponse<List<string>> localVarResponse = await AdminUnadoptedListWithHttpInfoAsync(page, limit, pattern, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List unadopted repositories 
        /// </summary>
        /// <exception cref="Gitea.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <param name="pattern">pattern of repositories to search for (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Gitea.Net.Client.ApiResponse<List<string>>> AdminUnadoptedListWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), string? pattern = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Gitea.Net.Client.RequestOptions localVarRequestOptions = new Gitea.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Gitea.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Gitea.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (pattern != null)
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "pattern", pattern));
            }

            localVarRequestOptions.Operation = "AdminApi.AdminUnadoptedList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TOTPHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-GITEA-OTP", this.Configuration.GetApiKeyWithPrefix("X-GITEA-OTP"));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (SudoHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarRequestOptions.HeaderParameters.Add("Sudo", this.Configuration.GetApiKeyWithPrefix("Sudo"));
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Gitea.Net.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (SudoParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarRequestOptions.QueryParameters.Add(Gitea.Net.Client.ClientUtils.ParameterToMultiMap("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "token " + this.Configuration.GetApiKeyWithPrefix("token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/admin/unadopted", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdminUnadoptedList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
