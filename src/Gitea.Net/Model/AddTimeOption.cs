/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// AddTimeOption options for adding time to an issue
    /// </summary>
    [DataContract(Name = "AddTimeOption")]
    public partial class AddTimeOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTimeOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddTimeOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTimeOption" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="time">time in seconds (required).</param>
        /// <param name="userName">User who spent the time (optional).</param>
        public AddTimeOption(DateTime created = default(DateTime), long time = default(long), string userName = default(string))
        {
            this.Time = time;
            this.Created = created;
            this.UserName = userName;
        }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// time in seconds
        /// </summary>
        /// <value>time in seconds</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public long Time { get; set; }

        /// <summary>
        /// User who spent the time (optional)
        /// </summary>
        /// <value>User who spent the time (optional)</value>
        [DataMember(Name = "user_name", EmitDefaultValue = false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddTimeOption {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
