/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Tag represents a repository tag
    /// </summary>
    [DataContract(Name = "Tag")]
    public partial class Tag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag" /> class.
        /// </summary>
        /// <param name="commit">commit.</param>
        /// <param name="id">id.</param>
        /// <param name="message">message.</param>
        /// <param name="name">name.</param>
        /// <param name="tarballUrl">tarballUrl.</param>
        /// <param name="zipballUrl">zipballUrl.</param>
        public Tag(CommitMeta commit = default(CommitMeta), string id = default(string), string message = default(string), string name = default(string), string tarballUrl = default(string), string zipballUrl = default(string))
        {
            this.Commit = commit;
            this.Id = id;
            this.Message = message;
            this.Name = name;
            this.TarballUrl = tarballUrl;
            this.ZipballUrl = zipballUrl;
        }

        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name = "commit", EmitDefaultValue = false)]
        public CommitMeta Commit { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TarballUrl
        /// </summary>
        [DataMember(Name = "tarball_url", EmitDefaultValue = false)]
        public string TarballUrl { get; set; }

        /// <summary>
        /// Gets or Sets ZipballUrl
        /// </summary>
        [DataMember(Name = "zipball_url", EmitDefaultValue = false)]
        public string ZipballUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tag {\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TarballUrl: ").Append(TarballUrl).Append("\n");
            sb.Append("  ZipballUrl: ").Append(ZipballUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
