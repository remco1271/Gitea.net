/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// CreateLabelOption options for creating a label
    /// </summary>
    [DataContract(Name = "CreateLabelOption")]
    public partial class CreateLabelOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLabelOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateLabelOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLabelOption" /> class.
        /// </summary>
        /// <param name="color">color (required).</param>
        /// <param name="description">description.</param>
        /// <param name="exclusive">exclusive.</param>
        /// <param name="isArchived">isArchived.</param>
        /// <param name="name">name (required).</param>
        public CreateLabelOption(string color = default(string), string description = default(string), bool exclusive = default(bool), bool isArchived = default(bool), string name = default(string))
        {
            // to ensure "color" is required (not null)
            if (color == null)
            {
                throw new ArgumentNullException("color is a required property for CreateLabelOption and cannot be null");
            }
            this.Color = color;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateLabelOption and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Exclusive = exclusive;
            this.IsArchived = isArchived;
        }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        /// <example>#00aabb</example>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Exclusive
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "exclusive", EmitDefaultValue = true)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// Gets or Sets IsArchived
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "is_archived", EmitDefaultValue = true)]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLabelOption {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Exclusive: ").Append(Exclusive).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
