/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// ExternalWiki represents setting for external wiki
    /// </summary>
    [DataContract(Name = "ExternalWiki")]
    public partial class ExternalWiki : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalWiki" /> class.
        /// </summary>
        /// <param name="externalWikiUrl">URL of external wiki..</param>
        public ExternalWiki(string externalWikiUrl = default(string))
        {
            this.ExternalWikiUrl = externalWikiUrl;
        }

        /// <summary>
        /// URL of external wiki.
        /// </summary>
        /// <value>URL of external wiki.</value>
        [DataMember(Name = "external_wiki_url", EmitDefaultValue = false)]
        public string ExternalWikiUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalWiki {\n");
            sb.Append("  ExternalWikiUrl: ").Append(ExternalWikiUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
