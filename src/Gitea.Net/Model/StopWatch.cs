/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// StopWatch represent a running stopwatch
    /// </summary>
    [DataContract(Name = "StopWatch")]
    public partial class StopWatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StopWatch" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="duration">duration.</param>
        /// <param name="issueIndex">issueIndex.</param>
        /// <param name="issueTitle">issueTitle.</param>
        /// <param name="repoName">repoName.</param>
        /// <param name="repoOwnerName">repoOwnerName.</param>
        /// <param name="seconds">seconds.</param>
        public StopWatch(DateTime created = default(DateTime), string duration = default(string), long issueIndex = default(long), string issueTitle = default(string), string repoName = default(string), string repoOwnerName = default(string), long seconds = default(long))
        {
            this.Created = created;
            this.Duration = duration;
            this.IssueIndex = issueIndex;
            this.IssueTitle = issueTitle;
            this.RepoName = repoName;
            this.RepoOwnerName = repoOwnerName;
            this.Seconds = seconds;
        }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets IssueIndex
        /// </summary>
        [DataMember(Name = "issue_index", EmitDefaultValue = false)]
        public long IssueIndex { get; set; }

        /// <summary>
        /// Gets or Sets IssueTitle
        /// </summary>
        [DataMember(Name = "issue_title", EmitDefaultValue = false)]
        public string IssueTitle { get; set; }

        /// <summary>
        /// Gets or Sets RepoName
        /// </summary>
        [DataMember(Name = "repo_name", EmitDefaultValue = false)]
        public string RepoName { get; set; }

        /// <summary>
        /// Gets or Sets RepoOwnerName
        /// </summary>
        [DataMember(Name = "repo_owner_name", EmitDefaultValue = false)]
        public string RepoOwnerName { get; set; }

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public long Seconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StopWatch {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IssueIndex: ").Append(IssueIndex).Append("\n");
            sb.Append("  IssueTitle: ").Append(IssueTitle).Append("\n");
            sb.Append("  RepoName: ").Append(RepoName).Append("\n");
            sb.Append("  RepoOwnerName: ").Append(RepoOwnerName).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
