/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// CreateIssueOption options to create one issue
    /// </summary>
    [DataContract(Name = "CreateIssueOption")]
    public partial class CreateIssueOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssueOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateIssueOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssueOption" /> class.
        /// </summary>
        /// <param name="assignee">deprecated.</param>
        /// <param name="assignees">assignees.</param>
        /// <param name="body">body.</param>
        /// <param name="closed">closed.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="labels">list of label ids.</param>
        /// <param name="milestone">milestone id.</param>
        /// <param name="varRef">varRef.</param>
        /// <param name="title">title (required).</param>
        public CreateIssueOption(string assignee = default(string), List<string> assignees = default(List<string>), string body = default(string), bool closed = default(bool), DateTime dueDate = default(DateTime), List<long> labels = default(List<long>), long milestone = default(long), string varRef = default(string), string title = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CreateIssueOption and cannot be null");
            }
            this.Title = title;
            this.Assignee = assignee;
            this.Assignees = assignees;
            this.Body = body;
            this.Closed = closed;
            this.DueDate = dueDate;
            this.Labels = labels;
            this.Milestone = milestone;
            this.Ref = varRef;
        }

        /// <summary>
        /// deprecated
        /// </summary>
        /// <value>deprecated</value>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public string Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [DataMember(Name = "assignees", EmitDefaultValue = false)]
        public List<string> Assignees { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Closed
        /// </summary>
        [DataMember(Name = "closed", EmitDefaultValue = true)]
        public bool Closed { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// list of label ids
        /// </summary>
        /// <value>list of label ids</value>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<long> Labels { get; set; }

        /// <summary>
        /// milestone id
        /// </summary>
        /// <value>milestone id</value>
        [DataMember(Name = "milestone", EmitDefaultValue = false)]
        public long Milestone { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public string Ref { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateIssueOption {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
