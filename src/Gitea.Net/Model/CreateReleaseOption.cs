/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// CreateReleaseOption options when creating a release
    /// </summary>
    [DataContract(Name = "CreateReleaseOption")]
    public partial class CreateReleaseOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReleaseOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateReleaseOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateReleaseOption" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="draft">draft.</param>
        /// <param name="name">name.</param>
        /// <param name="prerelease">prerelease.</param>
        /// <param name="tagName">tagName (required).</param>
        /// <param name="targetCommitish">targetCommitish.</param>
        public CreateReleaseOption(string body = default(string), bool draft = default(bool), string name = default(string), bool prerelease = default(bool), string tagName = default(string), string targetCommitish = default(string))
        {
            // to ensure "tagName" is required (not null)
            if (tagName == null)
            {
                throw new ArgumentNullException("tagName is a required property for CreateReleaseOption and cannot be null");
            }
            this.TagName = tagName;
            this.Body = body;
            this.Draft = draft;
            this.Name = name;
            this.Prerelease = prerelease;
            this.TargetCommitish = targetCommitish;
        }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [DataMember(Name = "draft", EmitDefaultValue = true)]
        public bool Draft { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prerelease
        /// </summary>
        [DataMember(Name = "prerelease", EmitDefaultValue = true)]
        public bool Prerelease { get; set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [DataMember(Name = "tag_name", IsRequired = true, EmitDefaultValue = true)]
        public string TagName { get; set; }

        /// <summary>
        /// Gets or Sets TargetCommitish
        /// </summary>
        [DataMember(Name = "target_commitish", EmitDefaultValue = false)]
        public string TargetCommitish { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateReleaseOption {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prerelease: ").Append(Prerelease).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  TargetCommitish: ").Append(TargetCommitish).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
