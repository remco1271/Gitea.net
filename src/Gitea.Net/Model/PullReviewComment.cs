/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// PullReviewComment represents a comment on a pull request review
    /// </summary>
    [DataContract(Name = "PullReviewComment")]
    public partial class PullReviewComment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullReviewComment" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="commitId">commitId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="diffHunk">diffHunk.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="originalCommitId">originalCommitId.</param>
        /// <param name="originalPosition">originalPosition.</param>
        /// <param name="path">path.</param>
        /// <param name="position">position.</param>
        /// <param name="pullRequestReviewId">pullRequestReviewId.</param>
        /// <param name="pullRequestUrl">pullRequestUrl.</param>
        /// <param name="resolver">resolver.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="user">user.</param>
        public PullReviewComment(string body = default(string), string commitId = default(string), DateTime createdAt = default(DateTime), string diffHunk = default(string), string htmlUrl = default(string), long id = default(long), string originalCommitId = default(string), int originalPosition = default(int), string path = default(string), int position = default(int), long pullRequestReviewId = default(long), string pullRequestUrl = default(string), User resolver = default(User), DateTime updatedAt = default(DateTime), User user = default(User))
        {
            this.Body = body;
            this.CommitId = commitId;
            this.CreatedAt = createdAt;
            this.DiffHunk = diffHunk;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.OriginalCommitId = originalCommitId;
            this.OriginalPosition = originalPosition;
            this.Path = path;
            this.Position = position;
            this.PullRequestReviewId = pullRequestReviewId;
            this.PullRequestUrl = pullRequestUrl;
            this.Resolver = resolver;
            this.UpdatedAt = updatedAt;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CommitId
        /// </summary>
        [DataMember(Name = "commit_id", EmitDefaultValue = false)]
        public string CommitId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DiffHunk
        /// </summary>
        [DataMember(Name = "diff_hunk", EmitDefaultValue = false)]
        public string DiffHunk { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCommitId
        /// </summary>
        [DataMember(Name = "original_commit_id", EmitDefaultValue = false)]
        public string OriginalCommitId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPosition
        /// </summary>
        [DataMember(Name = "original_position", EmitDefaultValue = false)]
        public int OriginalPosition { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public int Position { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestReviewId
        /// </summary>
        [DataMember(Name = "pull_request_review_id", EmitDefaultValue = false)]
        public long PullRequestReviewId { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestUrl
        /// </summary>
        [DataMember(Name = "pull_request_url", EmitDefaultValue = false)]
        public string PullRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets Resolver
        /// </summary>
        [DataMember(Name = "resolver", EmitDefaultValue = false)]
        public User Resolver { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PullReviewComment {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CommitId: ").Append(CommitId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DiffHunk: ").Append(DiffHunk).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OriginalCommitId: ").Append(OriginalCommitId).Append("\n");
            sb.Append("  OriginalPosition: ").Append(OriginalPosition).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PullRequestReviewId: ").Append(PullRequestReviewId).Append("\n");
            sb.Append("  PullRequestUrl: ").Append(PullRequestUrl).Append("\n");
            sb.Append("  Resolver: ").Append(Resolver).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
