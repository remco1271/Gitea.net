/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// ExternalTracker represents settings for external tracker
    /// </summary>
    [DataContract(Name = "ExternalTracker")]
    public partial class ExternalTracker : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTracker" /> class.
        /// </summary>
        /// <param name="externalTrackerFormat">External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index..</param>
        /// <param name="externalTrackerRegexpPattern">External Issue Tracker issue regular expression.</param>
        /// <param name="externalTrackerStyle">External Issue Tracker Number Format, either &#x60;numeric&#x60;, &#x60;alphanumeric&#x60;, or &#x60;regexp&#x60;.</param>
        /// <param name="externalTrackerUrl">URL of external issue tracker..</param>
        public ExternalTracker(string externalTrackerFormat = default(string), string externalTrackerRegexpPattern = default(string), string externalTrackerStyle = default(string), string externalTrackerUrl = default(string))
        {
            this.ExternalTrackerFormat = externalTrackerFormat;
            this.ExternalTrackerRegexpPattern = externalTrackerRegexpPattern;
            this.ExternalTrackerStyle = externalTrackerStyle;
            this.ExternalTrackerUrl = externalTrackerUrl;
        }

        /// <summary>
        /// External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
        /// </summary>
        /// <value>External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.</value>
        [DataMember(Name = "external_tracker_format", EmitDefaultValue = false)]
        public string ExternalTrackerFormat { get; set; }

        /// <summary>
        /// External Issue Tracker issue regular expression
        /// </summary>
        /// <value>External Issue Tracker issue regular expression</value>
        [DataMember(Name = "external_tracker_regexp_pattern", EmitDefaultValue = false)]
        public string ExternalTrackerRegexpPattern { get; set; }

        /// <summary>
        /// External Issue Tracker Number Format, either &#x60;numeric&#x60;, &#x60;alphanumeric&#x60;, or &#x60;regexp&#x60;
        /// </summary>
        /// <value>External Issue Tracker Number Format, either &#x60;numeric&#x60;, &#x60;alphanumeric&#x60;, or &#x60;regexp&#x60;</value>
        [DataMember(Name = "external_tracker_style", EmitDefaultValue = false)]
        public string ExternalTrackerStyle { get; set; }

        /// <summary>
        /// URL of external issue tracker.
        /// </summary>
        /// <value>URL of external issue tracker.</value>
        [DataMember(Name = "external_tracker_url", EmitDefaultValue = false)]
        public string ExternalTrackerUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalTracker {\n");
            sb.Append("  ExternalTrackerFormat: ").Append(ExternalTrackerFormat).Append("\n");
            sb.Append("  ExternalTrackerRegexpPattern: ").Append(ExternalTrackerRegexpPattern).Append("\n");
            sb.Append("  ExternalTrackerStyle: ").Append(ExternalTrackerStyle).Append("\n");
            sb.Append("  ExternalTrackerUrl: ").Append(ExternalTrackerUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
