/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Team represents a team in an organization
    /// </summary>
    [DataContract(Name = "Team")]
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// Defines Permission
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PermissionEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Read for value: read
            /// </summary>
            [EnumMember(Value = "read")]
            Read = 2,

            /// <summary>
            /// Enum Write for value: write
            /// </summary>
            [EnumMember(Value = "write")]
            Write = 3,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 4,

            /// <summary>
            /// Enum Owner for value: owner
            /// </summary>
            [EnumMember(Value = "owner")]
            Owner = 5
        }


        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name = "permission", EmitDefaultValue = false)]
        public PermissionEnum? Permission { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="canCreateOrgRepo">canCreateOrgRepo.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="includesAllRepositories">includesAllRepositories.</param>
        /// <param name="name">name.</param>
        /// <param name="organization">organization.</param>
        /// <param name="permission">permission.</param>
        /// <param name="units">units.</param>
        /// <param name="unitsMap">unitsMap.</param>
        public Team(bool canCreateOrgRepo = default(bool), string description = default(string), long id = default(long), bool includesAllRepositories = default(bool), string name = default(string), Organization organization = default(Organization), PermissionEnum? permission = default(PermissionEnum?), List<string> units = default(List<string>), Dictionary<string, string> unitsMap = default(Dictionary<string, string>))
        {
            this.CanCreateOrgRepo = canCreateOrgRepo;
            this.Description = description;
            this.Id = id;
            this.IncludesAllRepositories = includesAllRepositories;
            this.Name = name;
            this.Organization = organization;
            this.Permission = permission;
            this.Units = units;
            this.UnitsMap = unitsMap;
        }

        /// <summary>
        /// Gets or Sets CanCreateOrgRepo
        /// </summary>
        [DataMember(Name = "can_create_org_repo", EmitDefaultValue = true)]
        public bool CanCreateOrgRepo { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IncludesAllRepositories
        /// </summary>
        [DataMember(Name = "includes_all_repositories", EmitDefaultValue = true)]
        public bool IncludesAllRepositories { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public Organization Organization { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        /// <example>[repo.code, repo.issues, repo.ext_issues, repo.wiki, repo.pulls, repo.releases, repo.projects, repo.ext_wiki]</example>
        [DataMember(Name = "units", EmitDefaultValue = false)]
        public List<string> Units { get; set; }

        /// <summary>
        /// Gets or Sets UnitsMap
        /// </summary>
        /// <example>{&quot;repo.code&quot;:&quot;read&quot;,&quot;repo.ext_issues&quot;:&quot;none&quot;,&quot;repo.ext_wiki&quot;:&quot;none&quot;,&quot;repo.issues&quot;:&quot;write&quot;,&quot;repo.projects&quot;:&quot;none&quot;,&quot;repo.pulls&quot;:&quot;owner&quot;,&quot;repo.releases&quot;:&quot;none&quot;,&quot;repo.wiki&quot;:&quot;admin&quot;}</example>
        [DataMember(Name = "units_map", EmitDefaultValue = false)]
        public Dictionary<string, string> UnitsMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  CanCreateOrgRepo: ").Append(CanCreateOrgRepo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncludesAllRepositories: ").Append(IncludesAllRepositories).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  UnitsMap: ").Append(UnitsMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
