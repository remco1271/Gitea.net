/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Comment represents a comment on a commit or issue
    /// </summary>
    [DataContract(Name = "Comment")]
    public partial class Comment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comment" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="body">body.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="issueUrl">issueUrl.</param>
        /// <param name="originalAuthor">originalAuthor.</param>
        /// <param name="originalAuthorId">originalAuthorId.</param>
        /// <param name="pullRequestUrl">pullRequestUrl.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="user">user.</param>
        public Comment(List<Attachment> assets = default(List<Attachment>), string body = default(string), DateTime createdAt = default(DateTime), string htmlUrl = default(string), long id = default(long), string issueUrl = default(string), string originalAuthor = default(string), long originalAuthorId = default(long), string pullRequestUrl = default(string), DateTime updatedAt = default(DateTime), User user = default(User))
        {
            this.Assets = assets;
            this.Body = body;
            this.CreatedAt = createdAt;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IssueUrl = issueUrl;
            this.OriginalAuthor = originalAuthor;
            this.OriginalAuthorId = originalAuthorId;
            this.PullRequestUrl = pullRequestUrl;
            this.UpdatedAt = updatedAt;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public List<Attachment> Assets { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IssueUrl
        /// </summary>
        [DataMember(Name = "issue_url", EmitDefaultValue = false)]
        public string IssueUrl { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAuthor
        /// </summary>
        [DataMember(Name = "original_author", EmitDefaultValue = false)]
        public string OriginalAuthor { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAuthorId
        /// </summary>
        [DataMember(Name = "original_author_id", EmitDefaultValue = false)]
        public long OriginalAuthorId { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestUrl
        /// </summary>
        [DataMember(Name = "pull_request_url", EmitDefaultValue = false)]
        public string PullRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Comment {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueUrl: ").Append(IssueUrl).Append("\n");
            sb.Append("  OriginalAuthor: ").Append(OriginalAuthor).Append("\n");
            sb.Append("  OriginalAuthorId: ").Append(OriginalAuthorId).Append("\n");
            sb.Append("  PullRequestUrl: ").Append(PullRequestUrl).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
