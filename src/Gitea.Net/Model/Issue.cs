/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Issue represents an issue in a repository
    /// </summary>
    [DataContract(Name = "Issue")]
    public partial class Issue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Issue" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignees">assignees.</param>
        /// <param name="body">body.</param>
        /// <param name="closedAt">closedAt.</param>
        /// <param name="comments">comments.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="isLocked">isLocked.</param>
        /// <param name="labels">labels.</param>
        /// <param name="milestone">milestone.</param>
        /// <param name="number">number.</param>
        /// <param name="originalAuthor">originalAuthor.</param>
        /// <param name="originalAuthorId">originalAuthorId.</param>
        /// <param name="pinOrder">pinOrder.</param>
        /// <param name="pullRequest">pullRequest.</param>
        /// <param name="varRef">varRef.</param>
        /// <param name="repository">repository.</param>
        /// <param name="state">StateType issue state type.</param>
        /// <param name="title">title.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="url">url.</param>
        /// <param name="user">user.</param>
        public Issue(List<Attachment> assets = default(List<Attachment>), User assignee = default(User), List<User> assignees = default(List<User>), string body = default(string), DateTime closedAt = default(DateTime), long comments = default(long), DateTime createdAt = default(DateTime), DateTime dueDate = default(DateTime), string htmlUrl = default(string), long id = default(long), bool isLocked = default(bool), List<Label> labels = default(List<Label>), Milestone milestone = default(Milestone), long number = default(long), string originalAuthor = default(string), long originalAuthorId = default(long), long pinOrder = default(long), PullRequestMeta pullRequest = default(PullRequestMeta), string varRef = default(string), RepositoryMeta repository = default(RepositoryMeta), string state = default(string), string title = default(string), DateTime updatedAt = default(DateTime), string url = default(string), User user = default(User))
        {
            this.Assets = assets;
            this.Assignee = assignee;
            this.Assignees = assignees;
            this.Body = body;
            this.ClosedAt = closedAt;
            this.Comments = comments;
            this.CreatedAt = createdAt;
            this.DueDate = dueDate;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IsLocked = isLocked;
            this.Labels = labels;
            this.Milestone = milestone;
            this.Number = number;
            this.OriginalAuthor = originalAuthor;
            this.OriginalAuthorId = originalAuthorId;
            this.PinOrder = pinOrder;
            this.PullRequest = pullRequest;
            this.Ref = varRef;
            this.Repository = repository;
            this.State = state;
            this.Title = title;
            this.UpdatedAt = updatedAt;
            this.Url = url;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public List<Attachment> Assets { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name = "assignee", EmitDefaultValue = false)]
        public User Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [DataMember(Name = "assignees", EmitDefaultValue = false)]
        public List<User> Assignees { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ClosedAt
        /// </summary>
        [DataMember(Name = "closed_at", EmitDefaultValue = false)]
        public DateTime ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public long Comments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name = "is_locked", EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<Label> Labels { get; set; }

        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [DataMember(Name = "milestone", EmitDefaultValue = false)]
        public Milestone Milestone { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public long Number { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAuthor
        /// </summary>
        [DataMember(Name = "original_author", EmitDefaultValue = false)]
        public string OriginalAuthor { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAuthorId
        /// </summary>
        [DataMember(Name = "original_author_id", EmitDefaultValue = false)]
        public long OriginalAuthorId { get; set; }

        /// <summary>
        /// Gets or Sets PinOrder
        /// </summary>
        [DataMember(Name = "pin_order", EmitDefaultValue = false)]
        public long PinOrder { get; set; }

        /// <summary>
        /// Gets or Sets PullRequest
        /// </summary>
        [DataMember(Name = "pull_request", EmitDefaultValue = false)]
        public PullRequestMeta PullRequest { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public string Ref { get; set; }

        /// <summary>
        /// Gets or Sets Repository
        /// </summary>
        [DataMember(Name = "repository", EmitDefaultValue = false)]
        public RepositoryMeta Repository { get; set; }

        /// <summary>
        /// StateType issue state type
        /// </summary>
        /// <value>StateType issue state type</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Issue {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OriginalAuthor: ").Append(OriginalAuthor).Append("\n");
            sb.Append("  OriginalAuthorId: ").Append(OriginalAuthorId).Append("\n");
            sb.Append("  PinOrder: ").Append(PinOrder).Append("\n");
            sb.Append("  PullRequest: ").Append(PullRequest).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  Repository: ").Append(Repository).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
