/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// CreateRepoOption options when creating repository
    /// </summary>
    [DataContract(Name = "CreateRepoOption")]
    public partial class CreateRepoOption : IValidatableObject
    {
        /// <summary>
        /// ObjectFormatName of the underlying git repository
        /// </summary>
        /// <value>ObjectFormatName of the underlying git repository</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectFormatNameEnum
        {
            /// <summary>
            /// Enum Sha1 for value: sha1
            /// </summary>
            [EnumMember(Value = "sha1")]
            Sha1 = 1,

            /// <summary>
            /// Enum Sha256 for value: sha256
            /// </summary>
            [EnumMember(Value = "sha256")]
            Sha256 = 2
        }


        /// <summary>
        /// ObjectFormatName of the underlying git repository
        /// </summary>
        /// <value>ObjectFormatName of the underlying git repository</value>
        [DataMember(Name = "object_format_name", EmitDefaultValue = false)]
        public ObjectFormatNameEnum? ObjectFormatName { get; set; }
        /// <summary>
        /// TrustModel of the repository
        /// </summary>
        /// <value>TrustModel of the repository</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrustModelEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Collaborator for value: collaborator
            /// </summary>
            [EnumMember(Value = "collaborator")]
            Collaborator = 2,

            /// <summary>
            /// Enum Committer for value: committer
            /// </summary>
            [EnumMember(Value = "committer")]
            Committer = 3,

            /// <summary>
            /// Enum Collaboratorcommitter for value: collaboratorcommitter
            /// </summary>
            [EnumMember(Value = "collaboratorcommitter")]
            Collaboratorcommitter = 4
        }


        /// <summary>
        /// TrustModel of the repository
        /// </summary>
        /// <value>TrustModel of the repository</value>
        [DataMember(Name = "trust_model", EmitDefaultValue = false)]
        public TrustModelEnum? TrustModel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepoOption" /> class.
        /// </summary>
        /// <param name="autoInit">Whether the repository should be auto-initialized?.</param>
        /// <param name="defaultBranch">DefaultBranch of the repository (used when initializes and in template).</param>
        /// <param name="description">Description of the repository to create.</param>
        /// <param name="gitignores">Gitignores to use.</param>
        /// <param name="issueLabels">Label-Set to use.</param>
        /// <param name="license">License to use.</param>
        /// <param name="name">Name of the repository to create (required).</param>
        /// <param name="objectFormatName">ObjectFormatName of the underlying git repository.</param>
        /// <param name="varPrivate">Whether the repository is private.</param>
        /// <param name="readme">Readme of the repository to create.</param>
        /// <param name="template">Whether the repository is template.</param>
        /// <param name="trustModel">TrustModel of the repository.</param>
        public CreateRepoOption(bool autoInit = default(bool), string defaultBranch = default(string), string description = default(string), string gitignores = default(string), string issueLabels = default(string), string license = default(string), string name = default(string), ObjectFormatNameEnum? objectFormatName = default(ObjectFormatNameEnum?), bool varPrivate = default(bool), string readme = default(string), bool template = default(bool), TrustModelEnum? trustModel = default(TrustModelEnum?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateRepoOption and cannot be null");
            }
            this.Name = name;
            this.AutoInit = autoInit;
            this.DefaultBranch = defaultBranch;
            this.Description = description;
            this.Gitignores = gitignores;
            this.IssueLabels = issueLabels;
            this.License = license;
            this.ObjectFormatName = objectFormatName;
            this.Private = varPrivate;
            this.Readme = readme;
            this.Template = template;
            this.TrustModel = trustModel;
        }

        /// <summary>
        /// Whether the repository should be auto-initialized?
        /// </summary>
        /// <value>Whether the repository should be auto-initialized?</value>
        [DataMember(Name = "auto_init", EmitDefaultValue = true)]
        public bool AutoInit { get; set; }

        /// <summary>
        /// DefaultBranch of the repository (used when initializes and in template)
        /// </summary>
        /// <value>DefaultBranch of the repository (used when initializes and in template)</value>
        [DataMember(Name = "default_branch", EmitDefaultValue = false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// Description of the repository to create
        /// </summary>
        /// <value>Description of the repository to create</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gitignores to use
        /// </summary>
        /// <value>Gitignores to use</value>
        [DataMember(Name = "gitignores", EmitDefaultValue = false)]
        public string Gitignores { get; set; }

        /// <summary>
        /// Label-Set to use
        /// </summary>
        /// <value>Label-Set to use</value>
        [DataMember(Name = "issue_labels", EmitDefaultValue = false)]
        public string IssueLabels { get; set; }

        /// <summary>
        /// License to use
        /// </summary>
        /// <value>License to use</value>
        [DataMember(Name = "license", EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// Name of the repository to create
        /// </summary>
        /// <value>Name of the repository to create</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the repository is private
        /// </summary>
        /// <value>Whether the repository is private</value>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// Readme of the repository to create
        /// </summary>
        /// <value>Readme of the repository to create</value>
        [DataMember(Name = "readme", EmitDefaultValue = false)]
        public string Readme { get; set; }

        /// <summary>
        /// Whether the repository is template
        /// </summary>
        /// <value>Whether the repository is template</value>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public bool Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRepoOption {\n");
            sb.Append("  AutoInit: ").Append(AutoInit).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gitignores: ").Append(Gitignores).Append("\n");
            sb.Append("  IssueLabels: ").Append(IssueLabels).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObjectFormatName: ").Append(ObjectFormatName).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Readme: ").Append(Readme).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TrustModel: ").Append(TrustModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
