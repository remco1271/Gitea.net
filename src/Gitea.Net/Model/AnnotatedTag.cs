/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// AnnotatedTag represents an annotated tag
    /// </summary>
    [DataContract(Name = "AnnotatedTag")]
    public partial class AnnotatedTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnnotatedTag" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="varObject">varObject.</param>
        /// <param name="sha">sha.</param>
        /// <param name="tag">tag.</param>
        /// <param name="tagger">tagger.</param>
        /// <param name="url">url.</param>
        /// <param name="verification">verification.</param>
        public AnnotatedTag(string message = default(string), AnnotatedTagObject varObject = default(AnnotatedTagObject), string sha = default(string), string tag = default(string), CommitUser tagger = default(CommitUser), string url = default(string), PayloadCommitVerification verification = default(PayloadCommitVerification))
        {
            this.Message = message;
            this.Object = varObject;
            this.Sha = sha;
            this.Tag = tag;
            this.Tagger = tagger;
            this.Url = url;
            this.Verification = verification;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public AnnotatedTagObject Object { get; set; }

        /// <summary>
        /// Gets or Sets Sha
        /// </summary>
        [DataMember(Name = "sha", EmitDefaultValue = false)]
        public string Sha { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Tagger
        /// </summary>
        [DataMember(Name = "tagger", EmitDefaultValue = false)]
        public CommitUser Tagger { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Verification
        /// </summary>
        [DataMember(Name = "verification", EmitDefaultValue = false)]
        public PayloadCommitVerification Verification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnnotatedTag {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Sha: ").Append(Sha).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Tagger: ").Append(Tagger).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Verification: ").Append(Verification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
