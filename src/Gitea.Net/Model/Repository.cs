/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Repository represents a repository
    /// </summary>
    [DataContract(Name = "Repository")]
    public partial class Repository : IValidatableObject
    {
        /// <summary>
        /// ObjectFormatName of the underlying git repository
        /// </summary>
        /// <value>ObjectFormatName of the underlying git repository</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectFormatNameEnum
        {
            /// <summary>
            /// Enum Sha1 for value: sha1
            /// </summary>
            [EnumMember(Value = "sha1")]
            Sha1 = 1,

            /// <summary>
            /// Enum Sha256 for value: sha256
            /// </summary>
            [EnumMember(Value = "sha256")]
            Sha256 = 2
        }


        /// <summary>
        /// ObjectFormatName of the underlying git repository
        /// </summary>
        /// <value>ObjectFormatName of the underlying git repository</value>
        [DataMember(Name = "object_format_name", EmitDefaultValue = false)]
        public ObjectFormatNameEnum? ObjectFormatName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Repository" /> class.
        /// </summary>
        /// <param name="allowFastForwardOnlyMerge">allowFastForwardOnlyMerge.</param>
        /// <param name="allowMergeCommits">allowMergeCommits.</param>
        /// <param name="allowRebase">allowRebase.</param>
        /// <param name="allowRebaseExplicit">allowRebaseExplicit.</param>
        /// <param name="allowRebaseUpdate">allowRebaseUpdate.</param>
        /// <param name="allowSquashMerge">allowSquashMerge.</param>
        /// <param name="archived">archived.</param>
        /// <param name="archivedAt">archivedAt.</param>
        /// <param name="avatarUrl">avatarUrl.</param>
        /// <param name="cloneUrl">cloneUrl.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="defaultAllowMaintainerEdit">defaultAllowMaintainerEdit.</param>
        /// <param name="defaultBranch">defaultBranch.</param>
        /// <param name="defaultDeleteBranchAfterMerge">defaultDeleteBranchAfterMerge.</param>
        /// <param name="defaultMergeStyle">defaultMergeStyle.</param>
        /// <param name="description">description.</param>
        /// <param name="empty">empty.</param>
        /// <param name="externalTracker">externalTracker.</param>
        /// <param name="externalWiki">externalWiki.</param>
        /// <param name="fork">fork.</param>
        /// <param name="forksCount">forksCount.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="hasActions">hasActions.</param>
        /// <param name="hasIssues">hasIssues.</param>
        /// <param name="hasPackages">hasPackages.</param>
        /// <param name="hasProjects">hasProjects.</param>
        /// <param name="hasPullRequests">hasPullRequests.</param>
        /// <param name="hasReleases">hasReleases.</param>
        /// <param name="hasWiki">hasWiki.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="ignoreWhitespaceConflicts">ignoreWhitespaceConflicts.</param>
        /// <param name="varInternal">varInternal.</param>
        /// <param name="internalTracker">internalTracker.</param>
        /// <param name="language">language.</param>
        /// <param name="languagesUrl">languagesUrl.</param>
        /// <param name="link">link.</param>
        /// <param name="mirror">mirror.</param>
        /// <param name="mirrorInterval">mirrorInterval.</param>
        /// <param name="mirrorUpdated">mirrorUpdated.</param>
        /// <param name="name">name.</param>
        /// <param name="objectFormatName">ObjectFormatName of the underlying git repository.</param>
        /// <param name="openIssuesCount">openIssuesCount.</param>
        /// <param name="openPrCounter">openPrCounter.</param>
        /// <param name="originalUrl">originalUrl.</param>
        /// <param name="owner">owner.</param>
        /// <param name="parent">parent.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="varPrivate">varPrivate.</param>
        /// <param name="projectsMode">projectsMode.</param>
        /// <param name="releaseCounter">releaseCounter.</param>
        /// <param name="repoTransfer">repoTransfer.</param>
        /// <param name="size">size.</param>
        /// <param name="sshUrl">sshUrl.</param>
        /// <param name="starsCount">starsCount.</param>
        /// <param name="template">template.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="url">url.</param>
        /// <param name="watchersCount">watchersCount.</param>
        /// <param name="website">website.</param>
        public Repository(bool allowFastForwardOnlyMerge = default(bool), bool allowMergeCommits = default(bool), bool allowRebase = default(bool), bool allowRebaseExplicit = default(bool), bool allowRebaseUpdate = default(bool), bool allowSquashMerge = default(bool), bool archived = default(bool), DateTime archivedAt = default(DateTime), string avatarUrl = default(string), string cloneUrl = default(string), DateTime createdAt = default(DateTime), bool defaultAllowMaintainerEdit = default(bool), string defaultBranch = default(string), bool defaultDeleteBranchAfterMerge = default(bool), string defaultMergeStyle = default(string), string description = default(string), bool empty = default(bool), ExternalTracker externalTracker = default(ExternalTracker), ExternalWiki externalWiki = default(ExternalWiki), bool fork = default(bool), long forksCount = default(long), string fullName = default(string), bool hasActions = default(bool), bool hasIssues = default(bool), bool hasPackages = default(bool), bool hasProjects = default(bool), bool hasPullRequests = default(bool), bool hasReleases = default(bool), bool hasWiki = default(bool), string htmlUrl = default(string), long id = default(long), bool ignoreWhitespaceConflicts = default(bool), bool varInternal = default(bool), InternalTracker internalTracker = default(InternalTracker), string language = default(string), string languagesUrl = default(string), string link = default(string), bool mirror = default(bool), string mirrorInterval = default(string), DateTime mirrorUpdated = default(DateTime), string name = default(string), ObjectFormatNameEnum? objectFormatName = default(ObjectFormatNameEnum?), long openIssuesCount = default(long), long openPrCounter = default(long), string originalUrl = default(string), User owner = default(User), Repository parent = default(Repository), Permission permissions = default(Permission), bool varPrivate = default(bool), string projectsMode = default(string), long releaseCounter = default(long), RepoTransfer repoTransfer = default(RepoTransfer), long size = default(long), string sshUrl = default(string), long starsCount = default(long), bool template = default(bool), DateTime updatedAt = default(DateTime), string url = default(string), long watchersCount = default(long), string website = default(string))
        {
            this.AllowFastForwardOnlyMerge = allowFastForwardOnlyMerge;
            this.AllowMergeCommits = allowMergeCommits;
            this.AllowRebase = allowRebase;
            this.AllowRebaseExplicit = allowRebaseExplicit;
            this.AllowRebaseUpdate = allowRebaseUpdate;
            this.AllowSquashMerge = allowSquashMerge;
            this.Archived = archived;
            this.ArchivedAt = archivedAt;
            this.AvatarUrl = avatarUrl;
            this.CloneUrl = cloneUrl;
            this.CreatedAt = createdAt;
            this.DefaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
            this.DefaultBranch = defaultBranch;
            this.DefaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
            this.DefaultMergeStyle = defaultMergeStyle;
            this.Description = description;
            this.Empty = empty;
            this.ExternalTracker = externalTracker;
            this.ExternalWiki = externalWiki;
            this.Fork = fork;
            this.ForksCount = forksCount;
            this.FullName = fullName;
            this.HasActions = hasActions;
            this.HasIssues = hasIssues;
            this.HasPackages = hasPackages;
            this.HasProjects = hasProjects;
            this.HasPullRequests = hasPullRequests;
            this.HasReleases = hasReleases;
            this.HasWiki = hasWiki;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IgnoreWhitespaceConflicts = ignoreWhitespaceConflicts;
            this.Internal = varInternal;
            this.InternalTracker = internalTracker;
            this.Language = language;
            this.LanguagesUrl = languagesUrl;
            this.Link = link;
            this.Mirror = mirror;
            this.MirrorInterval = mirrorInterval;
            this.MirrorUpdated = mirrorUpdated;
            this.Name = name;
            this.ObjectFormatName = objectFormatName;
            this.OpenIssuesCount = openIssuesCount;
            this.OpenPrCounter = openPrCounter;
            this.OriginalUrl = originalUrl;
            this.Owner = owner;
            this.Parent = parent;
            this.Permissions = permissions;
            this.Private = varPrivate;
            this.ProjectsMode = projectsMode;
            this.ReleaseCounter = releaseCounter;
            this.RepoTransfer = repoTransfer;
            this.Size = size;
            this.SshUrl = sshUrl;
            this.StarsCount = starsCount;
            this.Template = template;
            this.UpdatedAt = updatedAt;
            this.Url = url;
            this.WatchersCount = watchersCount;
            this.Website = website;
        }

        /// <summary>
        /// Gets or Sets AllowFastForwardOnlyMerge
        /// </summary>
        [DataMember(Name = "allow_fast_forward_only_merge", EmitDefaultValue = true)]
        public bool AllowFastForwardOnlyMerge { get; set; }

        /// <summary>
        /// Gets or Sets AllowMergeCommits
        /// </summary>
        [DataMember(Name = "allow_merge_commits", EmitDefaultValue = true)]
        public bool AllowMergeCommits { get; set; }

        /// <summary>
        /// Gets or Sets AllowRebase
        /// </summary>
        [DataMember(Name = "allow_rebase", EmitDefaultValue = true)]
        public bool AllowRebase { get; set; }

        /// <summary>
        /// Gets or Sets AllowRebaseExplicit
        /// </summary>
        [DataMember(Name = "allow_rebase_explicit", EmitDefaultValue = true)]
        public bool AllowRebaseExplicit { get; set; }

        /// <summary>
        /// Gets or Sets AllowRebaseUpdate
        /// </summary>
        [DataMember(Name = "allow_rebase_update", EmitDefaultValue = true)]
        public bool AllowRebaseUpdate { get; set; }

        /// <summary>
        /// Gets or Sets AllowSquashMerge
        /// </summary>
        [DataMember(Name = "allow_squash_merge", EmitDefaultValue = true)]
        public bool AllowSquashMerge { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets ArchivedAt
        /// </summary>
        [DataMember(Name = "archived_at", EmitDefaultValue = false)]
        public DateTime ArchivedAt { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name = "avatar_url", EmitDefaultValue = false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets CloneUrl
        /// </summary>
        [DataMember(Name = "clone_url", EmitDefaultValue = false)]
        public string CloneUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAllowMaintainerEdit
        /// </summary>
        [DataMember(Name = "default_allow_maintainer_edit", EmitDefaultValue = true)]
        public bool DefaultAllowMaintainerEdit { get; set; }

        /// <summary>
        /// Gets or Sets DefaultBranch
        /// </summary>
        [DataMember(Name = "default_branch", EmitDefaultValue = false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDeleteBranchAfterMerge
        /// </summary>
        [DataMember(Name = "default_delete_branch_after_merge", EmitDefaultValue = true)]
        public bool DefaultDeleteBranchAfterMerge { get; set; }

        /// <summary>
        /// Gets or Sets DefaultMergeStyle
        /// </summary>
        [DataMember(Name = "default_merge_style", EmitDefaultValue = false)]
        public string DefaultMergeStyle { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name = "empty", EmitDefaultValue = true)]
        public bool Empty { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTracker
        /// </summary>
        [DataMember(Name = "external_tracker", EmitDefaultValue = false)]
        public ExternalTracker ExternalTracker { get; set; }

        /// <summary>
        /// Gets or Sets ExternalWiki
        /// </summary>
        [DataMember(Name = "external_wiki", EmitDefaultValue = false)]
        public ExternalWiki ExternalWiki { get; set; }

        /// <summary>
        /// Gets or Sets Fork
        /// </summary>
        [DataMember(Name = "fork", EmitDefaultValue = true)]
        public bool Fork { get; set; }

        /// <summary>
        /// Gets or Sets ForksCount
        /// </summary>
        [DataMember(Name = "forks_count", EmitDefaultValue = false)]
        public long ForksCount { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets HasActions
        /// </summary>
        [DataMember(Name = "has_actions", EmitDefaultValue = true)]
        public bool HasActions { get; set; }

        /// <summary>
        /// Gets or Sets HasIssues
        /// </summary>
        [DataMember(Name = "has_issues", EmitDefaultValue = true)]
        public bool HasIssues { get; set; }

        /// <summary>
        /// Gets or Sets HasPackages
        /// </summary>
        [DataMember(Name = "has_packages", EmitDefaultValue = true)]
        public bool HasPackages { get; set; }

        /// <summary>
        /// Gets or Sets HasProjects
        /// </summary>
        [DataMember(Name = "has_projects", EmitDefaultValue = true)]
        public bool HasProjects { get; set; }

        /// <summary>
        /// Gets or Sets HasPullRequests
        /// </summary>
        [DataMember(Name = "has_pull_requests", EmitDefaultValue = true)]
        public bool HasPullRequests { get; set; }

        /// <summary>
        /// Gets or Sets HasReleases
        /// </summary>
        [DataMember(Name = "has_releases", EmitDefaultValue = true)]
        public bool HasReleases { get; set; }

        /// <summary>
        /// Gets or Sets HasWiki
        /// </summary>
        [DataMember(Name = "has_wiki", EmitDefaultValue = true)]
        public bool HasWiki { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreWhitespaceConflicts
        /// </summary>
        [DataMember(Name = "ignore_whitespace_conflicts", EmitDefaultValue = true)]
        public bool IgnoreWhitespaceConflicts { get; set; }

        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name = "internal", EmitDefaultValue = true)]
        public bool Internal { get; set; }

        /// <summary>
        /// Gets or Sets InternalTracker
        /// </summary>
        [DataMember(Name = "internal_tracker", EmitDefaultValue = false)]
        public InternalTracker InternalTracker { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets LanguagesUrl
        /// </summary>
        [DataMember(Name = "languages_url", EmitDefaultValue = false)]
        public string LanguagesUrl { get; set; }

        /// <summary>
        /// Gets or Sets Link
        /// </summary>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Mirror
        /// </summary>
        [DataMember(Name = "mirror", EmitDefaultValue = true)]
        public bool Mirror { get; set; }

        /// <summary>
        /// Gets or Sets MirrorInterval
        /// </summary>
        [DataMember(Name = "mirror_interval", EmitDefaultValue = false)]
        public string MirrorInterval { get; set; }

        /// <summary>
        /// Gets or Sets MirrorUpdated
        /// </summary>
        [DataMember(Name = "mirror_updated", EmitDefaultValue = false)]
        public DateTime MirrorUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OpenIssuesCount
        /// </summary>
        [DataMember(Name = "open_issues_count", EmitDefaultValue = false)]
        public long OpenIssuesCount { get; set; }

        /// <summary>
        /// Gets or Sets OpenPrCounter
        /// </summary>
        [DataMember(Name = "open_pr_counter", EmitDefaultValue = false)]
        public long OpenPrCounter { get; set; }

        /// <summary>
        /// Gets or Sets OriginalUrl
        /// </summary>
        [DataMember(Name = "original_url", EmitDefaultValue = false)]
        public string OriginalUrl { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public User Owner { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public Repository Parent { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public Permission Permissions { get; set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [DataMember(Name = "private", EmitDefaultValue = true)]
        public bool Private { get; set; }

        /// <summary>
        /// Gets or Sets ProjectsMode
        /// </summary>
        [DataMember(Name = "projects_mode", EmitDefaultValue = false)]
        public string ProjectsMode { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseCounter
        /// </summary>
        [DataMember(Name = "release_counter", EmitDefaultValue = false)]
        public long ReleaseCounter { get; set; }

        /// <summary>
        /// Gets or Sets RepoTransfer
        /// </summary>
        [DataMember(Name = "repo_transfer", EmitDefaultValue = false)]
        public RepoTransfer RepoTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// Gets or Sets SshUrl
        /// </summary>
        [DataMember(Name = "ssh_url", EmitDefaultValue = false)]
        public string SshUrl { get; set; }

        /// <summary>
        /// Gets or Sets StarsCount
        /// </summary>
        [DataMember(Name = "stars_count", EmitDefaultValue = false)]
        public long StarsCount { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = true)]
        public bool Template { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets WatchersCount
        /// </summary>
        [DataMember(Name = "watchers_count", EmitDefaultValue = false)]
        public long WatchersCount { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Repository {\n");
            sb.Append("  AllowFastForwardOnlyMerge: ").Append(AllowFastForwardOnlyMerge).Append("\n");
            sb.Append("  AllowMergeCommits: ").Append(AllowMergeCommits).Append("\n");
            sb.Append("  AllowRebase: ").Append(AllowRebase).Append("\n");
            sb.Append("  AllowRebaseExplicit: ").Append(AllowRebaseExplicit).Append("\n");
            sb.Append("  AllowRebaseUpdate: ").Append(AllowRebaseUpdate).Append("\n");
            sb.Append("  AllowSquashMerge: ").Append(AllowSquashMerge).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ArchivedAt: ").Append(ArchivedAt).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  CloneUrl: ").Append(CloneUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DefaultAllowMaintainerEdit: ").Append(DefaultAllowMaintainerEdit).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  DefaultDeleteBranchAfterMerge: ").Append(DefaultDeleteBranchAfterMerge).Append("\n");
            sb.Append("  DefaultMergeStyle: ").Append(DefaultMergeStyle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  ExternalTracker: ").Append(ExternalTracker).Append("\n");
            sb.Append("  ExternalWiki: ").Append(ExternalWiki).Append("\n");
            sb.Append("  Fork: ").Append(Fork).Append("\n");
            sb.Append("  ForksCount: ").Append(ForksCount).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  HasActions: ").Append(HasActions).Append("\n");
            sb.Append("  HasIssues: ").Append(HasIssues).Append("\n");
            sb.Append("  HasPackages: ").Append(HasPackages).Append("\n");
            sb.Append("  HasProjects: ").Append(HasProjects).Append("\n");
            sb.Append("  HasPullRequests: ").Append(HasPullRequests).Append("\n");
            sb.Append("  HasReleases: ").Append(HasReleases).Append("\n");
            sb.Append("  HasWiki: ").Append(HasWiki).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IgnoreWhitespaceConflicts: ").Append(IgnoreWhitespaceConflicts).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  InternalTracker: ").Append(InternalTracker).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LanguagesUrl: ").Append(LanguagesUrl).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Mirror: ").Append(Mirror).Append("\n");
            sb.Append("  MirrorInterval: ").Append(MirrorInterval).Append("\n");
            sb.Append("  MirrorUpdated: ").Append(MirrorUpdated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObjectFormatName: ").Append(ObjectFormatName).Append("\n");
            sb.Append("  OpenIssuesCount: ").Append(OpenIssuesCount).Append("\n");
            sb.Append("  OpenPrCounter: ").Append(OpenPrCounter).Append("\n");
            sb.Append("  OriginalUrl: ").Append(OriginalUrl).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  ProjectsMode: ").Append(ProjectsMode).Append("\n");
            sb.Append("  ReleaseCounter: ").Append(ReleaseCounter).Append("\n");
            sb.Append("  RepoTransfer: ").Append(RepoTransfer).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SshUrl: ").Append(SshUrl).Append("\n");
            sb.Append("  StarsCount: ").Append(StarsCount).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  WatchersCount: ").Append(WatchersCount).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
