/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// CreateUserOption create user options
    /// </summary>
    [DataContract(Name = "CreateUserOption")]
    public partial class CreateUserOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUserOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserOption" /> class.
        /// </summary>
        /// <param name="createdAt">For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user&#39;s creation timestamp will be set to \&quot;now\&quot;..</param>
        /// <param name="email">email (required).</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="loginName">loginName.</param>
        /// <param name="mustChangePassword">mustChangePassword.</param>
        /// <param name="password">password.</param>
        /// <param name="restricted">restricted.</param>
        /// <param name="sendNotify">sendNotify.</param>
        /// <param name="sourceId">sourceId.</param>
        /// <param name="username">username (required).</param>
        /// <param name="visibility">visibility.</param>
        public CreateUserOption(DateTime createdAt = default(DateTime), string email = default(string), string fullName = default(string), string loginName = default(string), bool mustChangePassword = default(bool), string password = default(string), bool restricted = default(bool), bool sendNotify = default(bool), long sourceId = default(long), string username = default(string), string visibility = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateUserOption and cannot be null");
            }
            this.Email = email;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for CreateUserOption and cannot be null");
            }
            this.Username = username;
            this.CreatedAt = createdAt;
            this.FullName = fullName;
            this.LoginName = loginName;
            this.MustChangePassword = mustChangePassword;
            this.Password = password;
            this.Restricted = restricted;
            this.SendNotify = sendNotify;
            this.SourceId = sourceId;
            this.Visibility = visibility;
        }

        /// <summary>
        /// For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user&#39;s creation timestamp will be set to \&quot;now\&quot;.
        /// </summary>
        /// <value>For explicitly setting the user creation timestamp. Useful when users are migrated from other systems. When omitted, the user&#39;s creation timestamp will be set to \&quot;now\&quot;.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name = "login_name", EmitDefaultValue = false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [DataMember(Name = "must_change_password", EmitDefaultValue = true)]
        public bool MustChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Restricted
        /// </summary>
        [DataMember(Name = "restricted", EmitDefaultValue = true)]
        public bool Restricted { get; set; }

        /// <summary>
        /// Gets or Sets SendNotify
        /// </summary>
        [DataMember(Name = "send_notify", EmitDefaultValue = true)]
        public bool SendNotify { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name = "source_id", EmitDefaultValue = false)]
        public long SourceId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public string Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserOption {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Restricted: ").Append(Restricted).Append("\n");
            sb.Append("  SendNotify: ").Append(SendNotify).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
