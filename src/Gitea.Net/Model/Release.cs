/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// Release represents a repository release
    /// </summary>
    [DataContract(Name = "Release")]
    public partial class Release : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Release" /> class.
        /// </summary>
        /// <param name="assets">assets.</param>
        /// <param name="author">author.</param>
        /// <param name="body">body.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="draft">draft.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="prerelease">prerelease.</param>
        /// <param name="publishedAt">publishedAt.</param>
        /// <param name="tagName">tagName.</param>
        /// <param name="tarballUrl">tarballUrl.</param>
        /// <param name="targetCommitish">targetCommitish.</param>
        /// <param name="uploadUrl">uploadUrl.</param>
        /// <param name="url">url.</param>
        /// <param name="zipballUrl">zipballUrl.</param>
        public Release(List<Attachment> assets = default(List<Attachment>), User author = default(User), string body = default(string), DateTime createdAt = default(DateTime), bool draft = default(bool), string htmlUrl = default(string), long id = default(long), string name = default(string), bool prerelease = default(bool), DateTime publishedAt = default(DateTime), string tagName = default(string), string tarballUrl = default(string), string targetCommitish = default(string), string uploadUrl = default(string), string url = default(string), string zipballUrl = default(string))
        {
            this.Assets = assets;
            this.Author = author;
            this.Body = body;
            this.CreatedAt = createdAt;
            this.Draft = draft;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.Name = name;
            this.Prerelease = prerelease;
            this.PublishedAt = publishedAt;
            this.TagName = tagName;
            this.TarballUrl = tarballUrl;
            this.TargetCommitish = targetCommitish;
            this.UploadUrl = uploadUrl;
            this.Url = url;
            this.ZipballUrl = zipballUrl;
        }

        /// <summary>
        /// Gets or Sets Assets
        /// </summary>
        [DataMember(Name = "assets", EmitDefaultValue = false)]
        public List<Attachment> Assets { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public User Author { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [DataMember(Name = "draft", EmitDefaultValue = true)]
        public bool Draft { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prerelease
        /// </summary>
        [DataMember(Name = "prerelease", EmitDefaultValue = true)]
        public bool Prerelease { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name = "published_at", EmitDefaultValue = false)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [DataMember(Name = "tag_name", EmitDefaultValue = false)]
        public string TagName { get; set; }

        /// <summary>
        /// Gets or Sets TarballUrl
        /// </summary>
        [DataMember(Name = "tarball_url", EmitDefaultValue = false)]
        public string TarballUrl { get; set; }

        /// <summary>
        /// Gets or Sets TargetCommitish
        /// </summary>
        [DataMember(Name = "target_commitish", EmitDefaultValue = false)]
        public string TargetCommitish { get; set; }

        /// <summary>
        /// Gets or Sets UploadUrl
        /// </summary>
        [DataMember(Name = "upload_url", EmitDefaultValue = false)]
        public string UploadUrl { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ZipballUrl
        /// </summary>
        [DataMember(Name = "zipball_url", EmitDefaultValue = false)]
        public string ZipballUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Release {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prerelease: ").Append(Prerelease).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  TarballUrl: ").Append(TarballUrl).Append("\n");
            sb.Append("  TargetCommitish: ").Append(TargetCommitish).Append("\n");
            sb.Append("  UploadUrl: ").Append(UploadUrl).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ZipballUrl: ").Append(ZipballUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
