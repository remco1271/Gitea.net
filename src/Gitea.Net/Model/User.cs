/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// User represents a user
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="active">Is user active.</param>
        /// <param name="avatarUrl">URL to the user&#39;s avatar.</param>
        /// <param name="created">created.</param>
        /// <param name="description">the user&#39;s description.</param>
        /// <param name="email">email.</param>
        /// <param name="followersCount">user counts.</param>
        /// <param name="followingCount">followingCount.</param>
        /// <param name="fullName">the user&#39;s full name.</param>
        /// <param name="htmlUrl">URL to the user&#39;s gitea page.</param>
        /// <param name="id">the user&#39;s id.</param>
        /// <param name="isAdmin">Is the user an administrator.</param>
        /// <param name="language">User locale.</param>
        /// <param name="lastLogin">lastLogin.</param>
        /// <param name="location">the user&#39;s location.</param>
        /// <param name="login">the user&#39;s username.</param>
        /// <param name="loginName">the user&#39;s authentication sign-in name. (default to &quot;empty&quot;).</param>
        /// <param name="prohibitLogin">Is user login prohibited.</param>
        /// <param name="restricted">Is user restricted.</param>
        /// <param name="sourceId">The ID of the user&#39;s Authentication Source.</param>
        /// <param name="starredReposCount">starredReposCount.</param>
        /// <param name="visibility">User visibility level option: public, limited, private.</param>
        /// <param name="website">the user&#39;s website.</param>
        public User(bool active = default(bool), string avatarUrl = default(string), DateTime created = default(DateTime), string description = default(string), string email = default(string), long followersCount = default(long), long followingCount = default(long), string fullName = default(string), string htmlUrl = default(string), long id = default(long), bool isAdmin = default(bool), string language = default(string), DateTime lastLogin = default(DateTime), string location = default(string), string login = default(string), string loginName = @"empty", bool prohibitLogin = default(bool), bool restricted = default(bool), long sourceId = default(long), long starredReposCount = default(long), string visibility = default(string), string website = default(string))
        {
            this.Active = active;
            this.AvatarUrl = avatarUrl;
            this.Created = created;
            this.Description = description;
            this.Email = email;
            this.FollowersCount = followersCount;
            this.FollowingCount = followingCount;
            this.FullName = fullName;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IsAdmin = isAdmin;
            this.Language = language;
            this.LastLogin = lastLogin;
            this.Location = location;
            this.Login = login;
            // use default value if no "loginName" provided
            this.LoginName = loginName ?? @"empty";
            this.ProhibitLogin = prohibitLogin;
            this.Restricted = restricted;
            this.SourceId = sourceId;
            this.StarredReposCount = starredReposCount;
            this.Visibility = visibility;
            this.Website = website;
        }

        /// <summary>
        /// Is user active
        /// </summary>
        /// <value>Is user active</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// URL to the user&#39;s avatar
        /// </summary>
        /// <value>URL to the user&#39;s avatar</value>
        [DataMember(Name = "avatar_url", EmitDefaultValue = false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the user&#39;s description
        /// </summary>
        /// <value>the user&#39;s description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// user counts
        /// </summary>
        /// <value>user counts</value>
        [DataMember(Name = "followers_count", EmitDefaultValue = false)]
        public long FollowersCount { get; set; }

        /// <summary>
        /// Gets or Sets FollowingCount
        /// </summary>
        [DataMember(Name = "following_count", EmitDefaultValue = false)]
        public long FollowingCount { get; set; }

        /// <summary>
        /// the user&#39;s full name
        /// </summary>
        /// <value>the user&#39;s full name</value>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// URL to the user&#39;s gitea page
        /// </summary>
        /// <value>URL to the user&#39;s gitea page</value>
        [DataMember(Name = "html_url", EmitDefaultValue = false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// the user&#39;s id
        /// </summary>
        /// <value>the user&#39;s id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Is the user an administrator
        /// </summary>
        /// <value>Is the user an administrator</value>
        [DataMember(Name = "is_admin", EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// User locale
        /// </summary>
        /// <value>User locale</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "last_login", EmitDefaultValue = false)]
        public DateTime LastLogin { get; set; }

        /// <summary>
        /// the user&#39;s location
        /// </summary>
        /// <value>the user&#39;s location</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// the user&#39;s username
        /// </summary>
        /// <value>the user&#39;s username</value>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// the user&#39;s authentication sign-in name.
        /// </summary>
        /// <value>the user&#39;s authentication sign-in name.</value>
        [DataMember(Name = "login_name", EmitDefaultValue = false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Is user login prohibited
        /// </summary>
        /// <value>Is user login prohibited</value>
        [DataMember(Name = "prohibit_login", EmitDefaultValue = true)]
        public bool ProhibitLogin { get; set; }

        /// <summary>
        /// Is user restricted
        /// </summary>
        /// <value>Is user restricted</value>
        [DataMember(Name = "restricted", EmitDefaultValue = true)]
        public bool Restricted { get; set; }

        /// <summary>
        /// The ID of the user&#39;s Authentication Source
        /// </summary>
        /// <value>The ID of the user&#39;s Authentication Source</value>
        [DataMember(Name = "source_id", EmitDefaultValue = false)]
        public long SourceId { get; set; }

        /// <summary>
        /// Gets or Sets StarredReposCount
        /// </summary>
        [DataMember(Name = "starred_repos_count", EmitDefaultValue = false)]
        public long StarredReposCount { get; set; }

        /// <summary>
        /// User visibility level option: public, limited, private
        /// </summary>
        /// <value>User visibility level option: public, limited, private</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public string Visibility { get; set; }

        /// <summary>
        /// the user&#39;s website
        /// </summary>
        /// <value>the user&#39;s website</value>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  ProhibitLogin: ").Append(ProhibitLogin).Append("\n");
            sb.Append("  Restricted: ").Append(Restricted).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  StarredReposCount: ").Append(StarredReposCount).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
