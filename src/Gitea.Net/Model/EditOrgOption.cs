/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Gitea.Net.Client.OpenAPIDateConverter;

namespace Gitea.Net.Model
{
    /// <summary>
    /// EditOrgOption options for editing an organization
    /// </summary>
    [DataContract(Name = "EditOrgOption")]
    public partial class EditOrgOption : IValidatableObject
    {
        /// <summary>
        /// possible values are &#x60;public&#x60;, &#x60;limited&#x60; or &#x60;private&#x60;
        /// </summary>
        /// <value>possible values are &#x60;public&#x60;, &#x60;limited&#x60; or &#x60;private&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,

            /// <summary>
            /// Enum Limited for value: limited
            /// </summary>
            [EnumMember(Value = "limited")]
            Limited = 2,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 3
        }


        /// <summary>
        /// possible values are &#x60;public&#x60;, &#x60;limited&#x60; or &#x60;private&#x60;
        /// </summary>
        /// <value>possible values are &#x60;public&#x60;, &#x60;limited&#x60; or &#x60;private&#x60;</value>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditOrgOption" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="email">email.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="location">location.</param>
        /// <param name="repoAdminChangeTeamAccess">repoAdminChangeTeamAccess.</param>
        /// <param name="visibility">possible values are &#x60;public&#x60;, &#x60;limited&#x60; or &#x60;private&#x60;.</param>
        /// <param name="website">website.</param>
        public EditOrgOption(string description = default(string), string email = default(string), string fullName = default(string), string location = default(string), bool repoAdminChangeTeamAccess = default(bool), VisibilityEnum? visibility = default(VisibilityEnum?), string website = default(string))
        {
            this.Description = description;
            this.Email = email;
            this.FullName = fullName;
            this.Location = location;
            this.RepoAdminChangeTeamAccess = repoAdminChangeTeamAccess;
            this.Visibility = visibility;
            this.Website = website;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets RepoAdminChangeTeamAccess
        /// </summary>
        [DataMember(Name = "repo_admin_change_team_access", EmitDefaultValue = true)]
        public bool RepoAdminChangeTeamAccess { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditOrgOption {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RepoAdminChangeTeamAccess: ").Append(RepoAdminChangeTeamAccess).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
