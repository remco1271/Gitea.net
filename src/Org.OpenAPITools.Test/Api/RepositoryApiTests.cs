/*
 * Gitea API
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.22.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RepositoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RepositoryApiTests : IDisposable
    {
        private RepositoryApi instance;

        public RepositoryApiTests()
        {
            instance = new RepositoryApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RepositoryApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RepositoryApi
            //Assert.IsType<RepositoryApi>(instance);
        }

        /// <summary>
        /// Test AcceptRepoTransfer
        /// </summary>
        [Fact]
        public void AcceptRepoTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.AcceptRepoTransfer(owner, repo);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test CreateCurrentUserRepo
        /// </summary>
        [Fact]
        public void CreateCurrentUserRepoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateRepoOption? body = null;
            //var response = instance.CreateCurrentUserRepo(body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test CreateFork
        /// </summary>
        [Fact]
        public void CreateForkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateForkOption? body = null;
            //var response = instance.CreateFork(owner, repo, body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test CreateRepoVariable
        /// </summary>
        [Fact]
        public void CreateRepoVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string variablename = null;
            //CreateVariableOption? body = null;
            //instance.CreateRepoVariable(owner, repo, variablename, body);
        }

        /// <summary>
        /// Test DeleteRepoSecret
        /// </summary>
        [Fact]
        public void DeleteRepoSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string secretname = null;
            //instance.DeleteRepoSecret(owner, repo, secretname);
        }

        /// <summary>
        /// Test DeleteRepoVariable
        /// </summary>
        [Fact]
        public void DeleteRepoVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string variablename = null;
            //var response = instance.DeleteRepoVariable(owner, repo, variablename);
            //Assert.IsType<ActionVariable>(response);
        }

        /// <summary>
        /// Test GenerateRepo
        /// </summary>
        [Fact]
        public void GenerateRepoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateOwner = null;
            //string templateRepo = null;
            //GenerateRepoOption? body = null;
            //var response = instance.GenerateRepo(templateOwner, templateRepo, body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test GetAnnotatedTag
        /// </summary>
        [Fact]
        public void GetAnnotatedTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //var response = instance.GetAnnotatedTag(owner, repo, sha);
            //Assert.IsType<AnnotatedTag>(response);
        }

        /// <summary>
        /// Test GetBlob
        /// </summary>
        [Fact]
        public void GetBlobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //var response = instance.GetBlob(owner, repo, sha);
            //Assert.IsType<GitBlobResponse>(response);
        }

        /// <summary>
        /// Test GetRepoVariable
        /// </summary>
        [Fact]
        public void GetRepoVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string variablename = null;
            //var response = instance.GetRepoVariable(owner, repo, variablename);
            //Assert.IsType<ActionVariable>(response);
        }

        /// <summary>
        /// Test GetRepoVariablesList
        /// </summary>
        [Fact]
        public void GetRepoVariablesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetRepoVariablesList(owner, repo, page, limit);
            //Assert.IsType<List<ActionVariable>>(response);
        }

        /// <summary>
        /// Test GetTree
        /// </summary>
        [Fact]
        public void GetTreeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //bool? recursive = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetTree(owner, repo, sha, recursive, page, perPage);
            //Assert.IsType<GitTreeResponse>(response);
        }

        /// <summary>
        /// Test ListForks
        /// </summary>
        [Fact]
        public void ListForksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.ListForks(owner, repo, page, limit);
            //Assert.IsType<List<Repository>>(response);
        }

        /// <summary>
        /// Test RejectRepoTransfer
        /// </summary>
        [Fact]
        public void RejectRepoTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RejectRepoTransfer(owner, repo);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoAddCollaborator
        /// </summary>
        [Fact]
        public void RepoAddCollaboratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string collaborator = null;
            //AddCollaboratorOption? body = null;
            //instance.RepoAddCollaborator(owner, repo, collaborator, body);
        }

        /// <summary>
        /// Test RepoAddPushMirror
        /// </summary>
        [Fact]
        public void RepoAddPushMirrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreatePushMirrorOption? body = null;
            //var response = instance.RepoAddPushMirror(owner, repo, body);
            //Assert.IsType<PushMirror>(response);
        }

        /// <summary>
        /// Test RepoAddTeam
        /// </summary>
        [Fact]
        public void RepoAddTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string team = null;
            //instance.RepoAddTeam(owner, repo, team);
        }

        /// <summary>
        /// Test RepoAddTopic
        /// </summary>
        [Fact]
        public void RepoAddTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string topic = null;
            //instance.RepoAddTopic(owner, repo, topic);
        }

        /// <summary>
        /// Test RepoApplyDiffPatch
        /// </summary>
        [Fact]
        public void RepoApplyDiffPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //UpdateFileOptions body = null;
            //var response = instance.RepoApplyDiffPatch(owner, repo, body);
            //Assert.IsType<FileResponse>(response);
        }

        /// <summary>
        /// Test RepoCancelScheduledAutoMerge
        /// </summary>
        [Fact]
        public void RepoCancelScheduledAutoMergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.RepoCancelScheduledAutoMerge(owner, repo, index);
        }

        /// <summary>
        /// Test RepoChangeFiles
        /// </summary>
        [Fact]
        public void RepoChangeFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //ChangeFilesOptions body = null;
            //var response = instance.RepoChangeFiles(owner, repo, body);
            //Assert.IsType<FilesResponse>(response);
        }

        /// <summary>
        /// Test RepoCheckCollaborator
        /// </summary>
        [Fact]
        public void RepoCheckCollaboratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string collaborator = null;
            //instance.RepoCheckCollaborator(owner, repo, collaborator);
        }

        /// <summary>
        /// Test RepoCheckTeam
        /// </summary>
        [Fact]
        public void RepoCheckTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string team = null;
            //var response = instance.RepoCheckTeam(owner, repo, team);
            //Assert.IsType<Team>(response);
        }

        /// <summary>
        /// Test RepoCompareDiff
        /// </summary>
        [Fact]
        public void RepoCompareDiffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string basehead = null;
            //var response = instance.RepoCompareDiff(owner, repo, basehead);
            //Assert.IsType<Compare>(response);
        }

        /// <summary>
        /// Test RepoCreateBranch
        /// </summary>
        [Fact]
        public void RepoCreateBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateBranchRepoOption? body = null;
            //var response = instance.RepoCreateBranch(owner, repo, body);
            //Assert.IsType<Branch>(response);
        }

        /// <summary>
        /// Test RepoCreateBranchProtection
        /// </summary>
        [Fact]
        public void RepoCreateBranchProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateBranchProtectionOption? body = null;
            //var response = instance.RepoCreateBranchProtection(owner, repo, body);
            //Assert.IsType<BranchProtection>(response);
        }

        /// <summary>
        /// Test RepoCreateFile
        /// </summary>
        [Fact]
        public void RepoCreateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //CreateFileOptions body = null;
            //var response = instance.RepoCreateFile(owner, repo, filepath, body);
            //Assert.IsType<FileResponse>(response);
        }

        /// <summary>
        /// Test RepoCreateHook
        /// </summary>
        [Fact]
        public void RepoCreateHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateHookOption? body = null;
            //var response = instance.RepoCreateHook(owner, repo, body);
            //Assert.IsType<Hook>(response);
        }

        /// <summary>
        /// Test RepoCreateKey
        /// </summary>
        [Fact]
        public void RepoCreateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateKeyOption? body = null;
            //var response = instance.RepoCreateKey(owner, repo, body);
            //Assert.IsType<DeployKey>(response);
        }

        /// <summary>
        /// Test RepoCreatePullRequest
        /// </summary>
        [Fact]
        public void RepoCreatePullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreatePullRequestOption? body = null;
            //var response = instance.RepoCreatePullRequest(owner, repo, body);
            //Assert.IsType<PullRequest>(response);
        }

        /// <summary>
        /// Test RepoCreatePullReview
        /// </summary>
        [Fact]
        public void RepoCreatePullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //CreatePullReviewOptions body = null;
            //var response = instance.RepoCreatePullReview(owner, repo, index, body);
            //Assert.IsType<PullReview>(response);
        }

        /// <summary>
        /// Test RepoCreatePullReviewRequests
        /// </summary>
        [Fact]
        public void RepoCreatePullReviewRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //PullReviewRequestOptions body = null;
            //var response = instance.RepoCreatePullReviewRequests(owner, repo, index, body);
            //Assert.IsType<List<PullReview>>(response);
        }

        /// <summary>
        /// Test RepoCreateRelease
        /// </summary>
        [Fact]
        public void RepoCreateReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateReleaseOption? body = null;
            //var response = instance.RepoCreateRelease(owner, repo, body);
            //Assert.IsType<Release>(response);
        }

        /// <summary>
        /// Test RepoCreateReleaseAttachment
        /// </summary>
        [Fact]
        public void RepoCreateReleaseAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //string? name = null;
            //System.IO.Stream? attachment = null;
            //var response = instance.RepoCreateReleaseAttachment(owner, repo, id, name, attachment);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test RepoCreateStatus
        /// </summary>
        [Fact]
        public void RepoCreateStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //CreateStatusOption? body = null;
            //var response = instance.RepoCreateStatus(owner, repo, sha, body);
            //Assert.IsType<CommitStatus>(response);
        }

        /// <summary>
        /// Test RepoCreateTag
        /// </summary>
        [Fact]
        public void RepoCreateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateTagOption? body = null;
            //var response = instance.RepoCreateTag(owner, repo, body);
            //Assert.IsType<Tag>(response);
        }

        /// <summary>
        /// Test RepoCreateWikiPage
        /// </summary>
        [Fact]
        public void RepoCreateWikiPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //CreateWikiPageOptions? body = null;
            //var response = instance.RepoCreateWikiPage(owner, repo, body);
            //Assert.IsType<WikiPage>(response);
        }

        /// <summary>
        /// Test RepoDelete
        /// </summary>
        [Fact]
        public void RepoDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.RepoDelete(owner, repo);
        }

        /// <summary>
        /// Test RepoDeleteAvatar
        /// </summary>
        [Fact]
        public void RepoDeleteAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.RepoDeleteAvatar(owner, repo);
        }

        /// <summary>
        /// Test RepoDeleteBranch
        /// </summary>
        [Fact]
        public void RepoDeleteBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string branch = null;
            //instance.RepoDeleteBranch(owner, repo, branch);
        }

        /// <summary>
        /// Test RepoDeleteBranchProtection
        /// </summary>
        [Fact]
        public void RepoDeleteBranchProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string name = null;
            //instance.RepoDeleteBranchProtection(owner, repo, name);
        }

        /// <summary>
        /// Test RepoDeleteCollaborator
        /// </summary>
        [Fact]
        public void RepoDeleteCollaboratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string collaborator = null;
            //instance.RepoDeleteCollaborator(owner, repo, collaborator);
        }

        /// <summary>
        /// Test RepoDeleteFile
        /// </summary>
        [Fact]
        public void RepoDeleteFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //DeleteFileOptions body = null;
            //var response = instance.RepoDeleteFile(owner, repo, filepath, body);
            //Assert.IsType<FileDeleteResponse>(response);
        }

        /// <summary>
        /// Test RepoDeleteGitHook
        /// </summary>
        [Fact]
        public void RepoDeleteGitHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //instance.RepoDeleteGitHook(owner, repo, id);
        }

        /// <summary>
        /// Test RepoDeleteHook
        /// </summary>
        [Fact]
        public void RepoDeleteHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //instance.RepoDeleteHook(owner, repo, id);
        }

        /// <summary>
        /// Test RepoDeleteKey
        /// </summary>
        [Fact]
        public void RepoDeleteKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //instance.RepoDeleteKey(owner, repo, id);
        }

        /// <summary>
        /// Test RepoDeletePullReview
        /// </summary>
        [Fact]
        public void RepoDeletePullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //instance.RepoDeletePullReview(owner, repo, index, id);
        }

        /// <summary>
        /// Test RepoDeletePullReviewRequests
        /// </summary>
        [Fact]
        public void RepoDeletePullReviewRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //PullReviewRequestOptions body = null;
            //instance.RepoDeletePullReviewRequests(owner, repo, index, body);
        }

        /// <summary>
        /// Test RepoDeletePushMirror
        /// </summary>
        [Fact]
        public void RepoDeletePushMirrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string name = null;
            //instance.RepoDeletePushMirror(owner, repo, name);
        }

        /// <summary>
        /// Test RepoDeleteRelease
        /// </summary>
        [Fact]
        public void RepoDeleteReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //instance.RepoDeleteRelease(owner, repo, id);
        }

        /// <summary>
        /// Test RepoDeleteReleaseAttachment
        /// </summary>
        [Fact]
        public void RepoDeleteReleaseAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //instance.RepoDeleteReleaseAttachment(owner, repo, id, attachmentId);
        }

        /// <summary>
        /// Test RepoDeleteReleaseByTag
        /// </summary>
        [Fact]
        public void RepoDeleteReleaseByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string tag = null;
            //instance.RepoDeleteReleaseByTag(owner, repo, tag);
        }

        /// <summary>
        /// Test RepoDeleteTag
        /// </summary>
        [Fact]
        public void RepoDeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string tag = null;
            //instance.RepoDeleteTag(owner, repo, tag);
        }

        /// <summary>
        /// Test RepoDeleteTeam
        /// </summary>
        [Fact]
        public void RepoDeleteTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string team = null;
            //instance.RepoDeleteTeam(owner, repo, team);
        }

        /// <summary>
        /// Test RepoDeleteTopic
        /// </summary>
        [Fact]
        public void RepoDeleteTopicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string topic = null;
            //instance.RepoDeleteTopic(owner, repo, topic);
        }

        /// <summary>
        /// Test RepoDeleteWikiPage
        /// </summary>
        [Fact]
        public void RepoDeleteWikiPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string pageName = null;
            //instance.RepoDeleteWikiPage(owner, repo, pageName);
        }

        /// <summary>
        /// Test RepoDismissPullReview
        /// </summary>
        [Fact]
        public void RepoDismissPullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //DismissPullReviewOptions body = null;
            //var response = instance.RepoDismissPullReview(owner, repo, index, id, body);
            //Assert.IsType<PullReview>(response);
        }

        /// <summary>
        /// Test RepoDownloadCommitDiffOrPatch
        /// </summary>
        [Fact]
        public void RepoDownloadCommitDiffOrPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //string diffType = null;
            //var response = instance.RepoDownloadCommitDiffOrPatch(owner, repo, sha, diffType);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RepoDownloadPullDiffOrPatch
        /// </summary>
        [Fact]
        public void RepoDownloadPullDiffOrPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string diffType = null;
            //bool? binary = null;
            //var response = instance.RepoDownloadPullDiffOrPatch(owner, repo, index, diffType, binary);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RepoEdit
        /// </summary>
        [Fact]
        public void RepoEditTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //EditRepoOption? body = null;
            //var response = instance.RepoEdit(owner, repo, body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoEditBranchProtection
        /// </summary>
        [Fact]
        public void RepoEditBranchProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string name = null;
            //EditBranchProtectionOption? body = null;
            //var response = instance.RepoEditBranchProtection(owner, repo, name, body);
            //Assert.IsType<BranchProtection>(response);
        }

        /// <summary>
        /// Test RepoEditGitHook
        /// </summary>
        [Fact]
        public void RepoEditGitHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //EditGitHookOption? body = null;
            //var response = instance.RepoEditGitHook(owner, repo, id, body);
            //Assert.IsType<GitHook>(response);
        }

        /// <summary>
        /// Test RepoEditHook
        /// </summary>
        [Fact]
        public void RepoEditHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditHookOption? body = null;
            //var response = instance.RepoEditHook(owner, repo, id, body);
            //Assert.IsType<Hook>(response);
        }

        /// <summary>
        /// Test RepoEditPullRequest
        /// </summary>
        [Fact]
        public void RepoEditPullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //EditPullRequestOption? body = null;
            //var response = instance.RepoEditPullRequest(owner, repo, index, body);
            //Assert.IsType<PullRequest>(response);
        }

        /// <summary>
        /// Test RepoEditRelease
        /// </summary>
        [Fact]
        public void RepoEditReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //EditReleaseOption? body = null;
            //var response = instance.RepoEditRelease(owner, repo, id, body);
            //Assert.IsType<Release>(response);
        }

        /// <summary>
        /// Test RepoEditReleaseAttachment
        /// </summary>
        [Fact]
        public void RepoEditReleaseAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //EditAttachmentOptions? body = null;
            //var response = instance.RepoEditReleaseAttachment(owner, repo, id, attachmentId, body);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test RepoEditWikiPage
        /// </summary>
        [Fact]
        public void RepoEditWikiPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string pageName = null;
            //CreateWikiPageOptions? body = null;
            //var response = instance.RepoEditWikiPage(owner, repo, pageName, body);
            //Assert.IsType<WikiPage>(response);
        }

        /// <summary>
        /// Test RepoGet
        /// </summary>
        [Fact]
        public void RepoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGet(owner, repo);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoGetAllCommits
        /// </summary>
        [Fact]
        public void RepoGetAllCommitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? sha = null;
            //string? path = null;
            //bool? stat = null;
            //bool? verification = null;
            //bool? files = null;
            //int? page = null;
            //int? limit = null;
            //string? not = null;
            //var response = instance.RepoGetAllCommits(owner, repo, sha, path, stat, verification, files, page, limit, not);
            //Assert.IsType<List<Commit>>(response);
        }

        /// <summary>
        /// Test RepoGetArchive
        /// </summary>
        [Fact]
        public void RepoGetArchiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string archive = null;
            //instance.RepoGetArchive(owner, repo, archive);
        }

        /// <summary>
        /// Test RepoGetAssignees
        /// </summary>
        [Fact]
        public void RepoGetAssigneesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetAssignees(owner, repo);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test RepoGetBranch
        /// </summary>
        [Fact]
        public void RepoGetBranchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string branch = null;
            //var response = instance.RepoGetBranch(owner, repo, branch);
            //Assert.IsType<Branch>(response);
        }

        /// <summary>
        /// Test RepoGetBranchProtection
        /// </summary>
        [Fact]
        public void RepoGetBranchProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string name = null;
            //var response = instance.RepoGetBranchProtection(owner, repo, name);
            //Assert.IsType<BranchProtection>(response);
        }

        /// <summary>
        /// Test RepoGetByID
        /// </summary>
        [Fact]
        public void RepoGetByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.RepoGetByID(id);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoGetCombinedStatusByRef
        /// </summary>
        [Fact]
        public void RepoGetCombinedStatusByRefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string varRef = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoGetCombinedStatusByRef(owner, repo, varRef, page, limit);
            //Assert.IsType<CombinedStatus>(response);
        }

        /// <summary>
        /// Test RepoGetCommitPullRequest
        /// </summary>
        [Fact]
        public void RepoGetCommitPullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //var response = instance.RepoGetCommitPullRequest(owner, repo, sha);
            //Assert.IsType<PullRequest>(response);
        }

        /// <summary>
        /// Test RepoGetContents
        /// </summary>
        [Fact]
        public void RepoGetContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //string? varRef = null;
            //var response = instance.RepoGetContents(owner, repo, filepath, varRef);
            //Assert.IsType<ContentsResponse>(response);
        }

        /// <summary>
        /// Test RepoGetContentsList
        /// </summary>
        [Fact]
        public void RepoGetContentsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? varRef = null;
            //var response = instance.RepoGetContentsList(owner, repo, varRef);
            //Assert.IsType<List<ContentsResponse>>(response);
        }

        /// <summary>
        /// Test RepoGetEditorConfig
        /// </summary>
        [Fact]
        public void RepoGetEditorConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //string? varRef = null;
            //instance.RepoGetEditorConfig(owner, repo, filepath, varRef);
        }

        /// <summary>
        /// Test RepoGetGitHook
        /// </summary>
        [Fact]
        public void RepoGetGitHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string id = null;
            //var response = instance.RepoGetGitHook(owner, repo, id);
            //Assert.IsType<GitHook>(response);
        }

        /// <summary>
        /// Test RepoGetHook
        /// </summary>
        [Fact]
        public void RepoGetHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.RepoGetHook(owner, repo, id);
            //Assert.IsType<Hook>(response);
        }

        /// <summary>
        /// Test RepoGetIssueConfig
        /// </summary>
        [Fact]
        public void RepoGetIssueConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetIssueConfig(owner, repo);
            //Assert.IsType<IssueConfig>(response);
        }

        /// <summary>
        /// Test RepoGetIssueTemplates
        /// </summary>
        [Fact]
        public void RepoGetIssueTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetIssueTemplates(owner, repo);
            //Assert.IsType<List<IssueTemplate>>(response);
        }

        /// <summary>
        /// Test RepoGetKey
        /// </summary>
        [Fact]
        public void RepoGetKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.RepoGetKey(owner, repo, id);
            //Assert.IsType<DeployKey>(response);
        }

        /// <summary>
        /// Test RepoGetLanguages
        /// </summary>
        [Fact]
        public void RepoGetLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetLanguages(owner, repo);
            //Assert.IsType<Dictionary<string, long>>(response);
        }

        /// <summary>
        /// Test RepoGetLatestRelease
        /// </summary>
        [Fact]
        public void RepoGetLatestReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetLatestRelease(owner, repo);
            //Assert.IsType<Release>(response);
        }

        /// <summary>
        /// Test RepoGetNote
        /// </summary>
        [Fact]
        public void RepoGetNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //bool? verification = null;
            //bool? files = null;
            //var response = instance.RepoGetNote(owner, repo, sha, verification, files);
            //Assert.IsType<Note>(response);
        }

        /// <summary>
        /// Test RepoGetPullRequest
        /// </summary>
        [Fact]
        public void RepoGetPullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //var response = instance.RepoGetPullRequest(owner, repo, index);
            //Assert.IsType<PullRequest>(response);
        }

        /// <summary>
        /// Test RepoGetPullRequestByBaseHead
        /// </summary>
        [Fact]
        public void RepoGetPullRequestByBaseHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string varBase = null;
            //string head = null;
            //var response = instance.RepoGetPullRequestByBaseHead(owner, repo, varBase, head);
            //Assert.IsType<PullRequest>(response);
        }

        /// <summary>
        /// Test RepoGetPullRequestCommits
        /// </summary>
        [Fact]
        public void RepoGetPullRequestCommitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //int? page = null;
            //int? limit = null;
            //bool? verification = null;
            //bool? files = null;
            //var response = instance.RepoGetPullRequestCommits(owner, repo, index, page, limit, verification, files);
            //Assert.IsType<List<Commit>>(response);
        }

        /// <summary>
        /// Test RepoGetPullRequestFiles
        /// </summary>
        [Fact]
        public void RepoGetPullRequestFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string? skipTo = null;
            //string? whitespace = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoGetPullRequestFiles(owner, repo, index, skipTo, whitespace, page, limit);
            //Assert.IsType<List<ChangedFile>>(response);
        }

        /// <summary>
        /// Test RepoGetPullReview
        /// </summary>
        [Fact]
        public void RepoGetPullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //var response = instance.RepoGetPullReview(owner, repo, index, id);
            //Assert.IsType<PullReview>(response);
        }

        /// <summary>
        /// Test RepoGetPullReviewComments
        /// </summary>
        [Fact]
        public void RepoGetPullReviewCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //var response = instance.RepoGetPullReviewComments(owner, repo, index, id);
            //Assert.IsType<List<PullReviewComment>>(response);
        }

        /// <summary>
        /// Test RepoGetPushMirrorByRemoteName
        /// </summary>
        [Fact]
        public void RepoGetPushMirrorByRemoteNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string name = null;
            //var response = instance.RepoGetPushMirrorByRemoteName(owner, repo, name);
            //Assert.IsType<PushMirror>(response);
        }

        /// <summary>
        /// Test RepoGetRawFile
        /// </summary>
        [Fact]
        public void RepoGetRawFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //string? varRef = null;
            //instance.RepoGetRawFile(owner, repo, filepath, varRef);
        }

        /// <summary>
        /// Test RepoGetRawFileOrLFS
        /// </summary>
        [Fact]
        public void RepoGetRawFileOrLFSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //string? varRef = null;
            //instance.RepoGetRawFileOrLFS(owner, repo, filepath, varRef);
        }

        /// <summary>
        /// Test RepoGetRelease
        /// </summary>
        [Fact]
        public void RepoGetReleaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.RepoGetRelease(owner, repo, id);
            //Assert.IsType<Release>(response);
        }

        /// <summary>
        /// Test RepoGetReleaseAttachment
        /// </summary>
        [Fact]
        public void RepoGetReleaseAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //long attachmentId = null;
            //var response = instance.RepoGetReleaseAttachment(owner, repo, id, attachmentId);
            //Assert.IsType<Attachment>(response);
        }

        /// <summary>
        /// Test RepoGetReleaseByTag
        /// </summary>
        [Fact]
        public void RepoGetReleaseByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string tag = null;
            //var response = instance.RepoGetReleaseByTag(owner, repo, tag);
            //Assert.IsType<Release>(response);
        }

        /// <summary>
        /// Test RepoGetRepoPermissions
        /// </summary>
        [Fact]
        public void RepoGetRepoPermissionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string collaborator = null;
            //var response = instance.RepoGetRepoPermissions(owner, repo, collaborator);
            //Assert.IsType<RepoCollaboratorPermission>(response);
        }

        /// <summary>
        /// Test RepoGetReviewers
        /// </summary>
        [Fact]
        public void RepoGetReviewersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoGetReviewers(owner, repo);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test RepoGetRunnerRegistrationToken
        /// </summary>
        [Fact]
        public void RepoGetRunnerRegistrationTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.RepoGetRunnerRegistrationToken(owner, repo);
        }

        /// <summary>
        /// Test RepoGetSingleCommit
        /// </summary>
        [Fact]
        public void RepoGetSingleCommitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //bool? stat = null;
            //bool? verification = null;
            //bool? files = null;
            //var response = instance.RepoGetSingleCommit(owner, repo, sha, stat, verification, files);
            //Assert.IsType<Commit>(response);
        }

        /// <summary>
        /// Test RepoGetTag
        /// </summary>
        [Fact]
        public void RepoGetTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string tag = null;
            //var response = instance.RepoGetTag(owner, repo, tag);
            //Assert.IsType<Tag>(response);
        }

        /// <summary>
        /// Test RepoGetWikiPage
        /// </summary>
        [Fact]
        public void RepoGetWikiPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string pageName = null;
            //var response = instance.RepoGetWikiPage(owner, repo, pageName);
            //Assert.IsType<WikiPage>(response);
        }

        /// <summary>
        /// Test RepoGetWikiPageRevisions
        /// </summary>
        [Fact]
        public void RepoGetWikiPageRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string pageName = null;
            //int? page = null;
            //var response = instance.RepoGetWikiPageRevisions(owner, repo, pageName, page);
            //Assert.IsType<WikiCommitList>(response);
        }

        /// <summary>
        /// Test RepoGetWikiPages
        /// </summary>
        [Fact]
        public void RepoGetWikiPagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoGetWikiPages(owner, repo, page, limit);
            //Assert.IsType<List<WikiPageMetaData>>(response);
        }

        /// <summary>
        /// Test RepoListActionsSecrets
        /// </summary>
        [Fact]
        public void RepoListActionsSecretsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListActionsSecrets(owner, repo, page, limit);
            //Assert.IsType<List<Secret>>(response);
        }

        /// <summary>
        /// Test RepoListActivityFeeds
        /// </summary>
        [Fact]
        public void RepoListActivityFeedsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //DateOnly? date = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListActivityFeeds(owner, repo, date, page, limit);
            //Assert.IsType<List<Activity>>(response);
        }

        /// <summary>
        /// Test RepoListAllGitRefs
        /// </summary>
        [Fact]
        public void RepoListAllGitRefsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListAllGitRefs(owner, repo);
            //Assert.IsType<List<Reference>>(response);
        }

        /// <summary>
        /// Test RepoListBranchProtection
        /// </summary>
        [Fact]
        public void RepoListBranchProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListBranchProtection(owner, repo);
            //Assert.IsType<List<BranchProtection>>(response);
        }

        /// <summary>
        /// Test RepoListBranches
        /// </summary>
        [Fact]
        public void RepoListBranchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListBranches(owner, repo, page, limit);
            //Assert.IsType<List<Branch>>(response);
        }

        /// <summary>
        /// Test RepoListCollaborators
        /// </summary>
        [Fact]
        public void RepoListCollaboratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListCollaborators(owner, repo, page, limit);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test RepoListGitHooks
        /// </summary>
        [Fact]
        public void RepoListGitHooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListGitHooks(owner, repo);
            //Assert.IsType<List<GitHook>>(response);
        }

        /// <summary>
        /// Test RepoListGitRefs
        /// </summary>
        [Fact]
        public void RepoListGitRefsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string varRef = null;
            //var response = instance.RepoListGitRefs(owner, repo, varRef);
            //Assert.IsType<List<Reference>>(response);
        }

        /// <summary>
        /// Test RepoListHooks
        /// </summary>
        [Fact]
        public void RepoListHooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListHooks(owner, repo, page, limit);
            //Assert.IsType<List<Hook>>(response);
        }

        /// <summary>
        /// Test RepoListKeys
        /// </summary>
        [Fact]
        public void RepoListKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? keyId = null;
            //string? fingerprint = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListKeys(owner, repo, keyId, fingerprint, page, limit);
            //Assert.IsType<List<DeployKey>>(response);
        }

        /// <summary>
        /// Test RepoListPinnedIssues
        /// </summary>
        [Fact]
        public void RepoListPinnedIssuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListPinnedIssues(owner, repo);
            //Assert.IsType<List<Issue>>(response);
        }

        /// <summary>
        /// Test RepoListPinnedPullRequests
        /// </summary>
        [Fact]
        public void RepoListPinnedPullRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListPinnedPullRequests(owner, repo);
            //Assert.IsType<List<PullRequest>>(response);
        }

        /// <summary>
        /// Test RepoListPullRequests
        /// </summary>
        [Fact]
        public void RepoListPullRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? state = null;
            //string? sort = null;
            //long? milestone = null;
            //List<long>? labels = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListPullRequests(owner, repo, state, sort, milestone, labels, page, limit);
            //Assert.IsType<List<PullRequest>>(response);
        }

        /// <summary>
        /// Test RepoListPullReviews
        /// </summary>
        [Fact]
        public void RepoListPullReviewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListPullReviews(owner, repo, index, page, limit);
            //Assert.IsType<List<PullReview>>(response);
        }

        /// <summary>
        /// Test RepoListPushMirrors
        /// </summary>
        [Fact]
        public void RepoListPushMirrorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListPushMirrors(owner, repo, page, limit);
            //Assert.IsType<List<PushMirror>>(response);
        }

        /// <summary>
        /// Test RepoListReleaseAttachments
        /// </summary>
        [Fact]
        public void RepoListReleaseAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //var response = instance.RepoListReleaseAttachments(owner, repo, id);
            //Assert.IsType<List<Attachment>>(response);
        }

        /// <summary>
        /// Test RepoListReleases
        /// </summary>
        [Fact]
        public void RepoListReleasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //bool? draft = null;
            //bool? preRelease = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListReleases(owner, repo, draft, preRelease, page, limit);
            //Assert.IsType<List<Release>>(response);
        }

        /// <summary>
        /// Test RepoListStargazers
        /// </summary>
        [Fact]
        public void RepoListStargazersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListStargazers(owner, repo, page, limit);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test RepoListStatuses
        /// </summary>
        [Fact]
        public void RepoListStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string sha = null;
            //string? sort = null;
            //string? state = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListStatuses(owner, repo, sha, sort, state, page, limit);
            //Assert.IsType<List<CommitStatus>>(response);
        }

        /// <summary>
        /// Test RepoListStatusesByRef
        /// </summary>
        [Fact]
        public void RepoListStatusesByRefTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string varRef = null;
            //string? sort = null;
            //string? state = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListStatusesByRef(owner, repo, varRef, sort, state, page, limit);
            //Assert.IsType<List<CommitStatus>>(response);
        }

        /// <summary>
        /// Test RepoListSubscribers
        /// </summary>
        [Fact]
        public void RepoListSubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListSubscribers(owner, repo, page, limit);
            //Assert.IsType<List<User>>(response);
        }

        /// <summary>
        /// Test RepoListTags
        /// </summary>
        [Fact]
        public void RepoListTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListTags(owner, repo, page, limit);
            //Assert.IsType<List<Tag>>(response);
        }

        /// <summary>
        /// Test RepoListTeams
        /// </summary>
        [Fact]
        public void RepoListTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoListTeams(owner, repo);
            //Assert.IsType<List<Team>>(response);
        }

        /// <summary>
        /// Test RepoListTopics
        /// </summary>
        [Fact]
        public void RepoListTopicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoListTopics(owner, repo, page, limit);
            //Assert.IsType<TopicName>(response);
        }

        /// <summary>
        /// Test RepoMergePullRequest
        /// </summary>
        [Fact]
        public void RepoMergePullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //MergePullRequestOption? body = null;
            //instance.RepoMergePullRequest(owner, repo, index, body);
        }

        /// <summary>
        /// Test RepoMigrate
        /// </summary>
        [Fact]
        public void RepoMigrateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MigrateRepoOptions? body = null;
            //var response = instance.RepoMigrate(body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoMirrorSync
        /// </summary>
        [Fact]
        public void RepoMirrorSyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.RepoMirrorSync(owner, repo);
        }

        /// <summary>
        /// Test RepoNewPinAllowed
        /// </summary>
        [Fact]
        public void RepoNewPinAllowedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoNewPinAllowed(owner, repo);
            //Assert.IsType<NewIssuePinsAllowed>(response);
        }

        /// <summary>
        /// Test RepoPullRequestIsMerged
        /// </summary>
        [Fact]
        public void RepoPullRequestIsMergedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //instance.RepoPullRequestIsMerged(owner, repo, index);
        }

        /// <summary>
        /// Test RepoPushMirrorSync
        /// </summary>
        [Fact]
        public void RepoPushMirrorSyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.RepoPushMirrorSync(owner, repo);
        }

        /// <summary>
        /// Test RepoSearch
        /// </summary>
        [Fact]
        public void RepoSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? q = null;
            //bool? topic = null;
            //bool? includeDesc = null;
            //long? uid = null;
            //long? priorityOwnerId = null;
            //long? teamId = null;
            //long? starredBy = null;
            //bool? varPrivate = null;
            //bool? isPrivate = null;
            //bool? template = null;
            //bool? archived = null;
            //string? mode = null;
            //bool? exclusive = null;
            //string? sort = null;
            //string? order = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoSearch(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, varPrivate, isPrivate, template, archived, mode, exclusive, sort, order, page, limit);
            //Assert.IsType<SearchResults>(response);
        }

        /// <summary>
        /// Test RepoSigningKey
        /// </summary>
        [Fact]
        public void RepoSigningKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoSigningKey(owner, repo);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RepoSubmitPullReview
        /// </summary>
        [Fact]
        public void RepoSubmitPullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //SubmitPullReviewOptions body = null;
            //var response = instance.RepoSubmitPullReview(owner, repo, index, id, body);
            //Assert.IsType<PullReview>(response);
        }

        /// <summary>
        /// Test RepoTestHook
        /// </summary>
        [Fact]
        public void RepoTestHookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long id = null;
            //string? varRef = null;
            //instance.RepoTestHook(owner, repo, id, varRef);
        }

        /// <summary>
        /// Test RepoTrackedTimes
        /// </summary>
        [Fact]
        public void RepoTrackedTimesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string? user = null;
            //DateTime? since = null;
            //DateTime? before = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.RepoTrackedTimes(owner, repo, user, since, before, page, limit);
            //Assert.IsType<List<TrackedTime>>(response);
        }

        /// <summary>
        /// Test RepoTransfer
        /// </summary>
        [Fact]
        public void RepoTransferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //TransferRepoOption body = null;
            //var response = instance.RepoTransfer(owner, repo, body);
            //Assert.IsType<Repository>(response);
        }

        /// <summary>
        /// Test RepoUnDismissPullReview
        /// </summary>
        [Fact]
        public void RepoUnDismissPullReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //long id = null;
            //var response = instance.RepoUnDismissPullReview(owner, repo, index, id);
            //Assert.IsType<PullReview>(response);
        }

        /// <summary>
        /// Test RepoUpdateAvatar
        /// </summary>
        [Fact]
        public void RepoUpdateAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //UpdateRepoAvatarOption? body = null;
            //instance.RepoUpdateAvatar(owner, repo, body);
        }

        /// <summary>
        /// Test RepoUpdateFile
        /// </summary>
        [Fact]
        public void RepoUpdateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string filepath = null;
            //UpdateFileOptions body = null;
            //var response = instance.RepoUpdateFile(owner, repo, filepath, body);
            //Assert.IsType<FileResponse>(response);
        }

        /// <summary>
        /// Test RepoUpdatePullRequest
        /// </summary>
        [Fact]
        public void RepoUpdatePullRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //long index = null;
            //string? style = null;
            //instance.RepoUpdatePullRequest(owner, repo, index, style);
        }

        /// <summary>
        /// Test RepoUpdateTopics
        /// </summary>
        [Fact]
        public void RepoUpdateTopicsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //RepoTopicOptions? body = null;
            //instance.RepoUpdateTopics(owner, repo, body);
        }

        /// <summary>
        /// Test RepoValidateIssueConfig
        /// </summary>
        [Fact]
        public void RepoValidateIssueConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.RepoValidateIssueConfig(owner, repo);
            //Assert.IsType<IssueConfigValidation>(response);
        }

        /// <summary>
        /// Test TopicSearch
        /// </summary>
        [Fact]
        public void TopicSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.TopicSearch(q, page, limit);
            //Assert.IsType<List<TopicResponse>>(response);
        }

        /// <summary>
        /// Test UpdateRepoSecret
        /// </summary>
        [Fact]
        public void UpdateRepoSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string secretname = null;
            //CreateOrUpdateSecretOption? body = null;
            //instance.UpdateRepoSecret(owner, repo, secretname, body);
        }

        /// <summary>
        /// Test UpdateRepoVariable
        /// </summary>
        [Fact]
        public void UpdateRepoVariableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string variablename = null;
            //UpdateVariableOption? body = null;
            //instance.UpdateRepoVariable(owner, repo, variablename, body);
        }

        /// <summary>
        /// Test UserCurrentCheckSubscription
        /// </summary>
        [Fact]
        public void UserCurrentCheckSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.UserCurrentCheckSubscription(owner, repo);
            //Assert.IsType<WatchInfo>(response);
        }

        /// <summary>
        /// Test UserCurrentDeleteSubscription
        /// </summary>
        [Fact]
        public void UserCurrentDeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //instance.UserCurrentDeleteSubscription(owner, repo);
        }

        /// <summary>
        /// Test UserCurrentPutSubscription
        /// </summary>
        [Fact]
        public void UserCurrentPutSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //var response = instance.UserCurrentPutSubscription(owner, repo);
            //Assert.IsType<WatchInfo>(response);
        }

        /// <summary>
        /// Test UserTrackedTimes
        /// </summary>
        [Fact]
        public void UserTrackedTimesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string owner = null;
            //string repo = null;
            //string user = null;
            //var response = instance.UserTrackedTimes(owner, repo, user);
            //Assert.IsType<List<TrackedTime>>(response);
        }
    }
}
