openapi: 3.0.1
info:
  description: This documentation describes the Gitea API.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Gitea API
  version: 1.22.0
servers:
- url: /api/v1
security:
- BasicAuth: []
- Token: []
- AccessToken: []
- AuthorizationHeaderToken: []
- SudoParam: []
- SudoHeader: []
- TOTPHeader: []
paths:
  /activitypub/user-id/{user-id}:
    get:
      operationId: activitypubPerson
      parameters:
      - description: user ID of the user
        in: path
        name: user-id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityPub'
          description: ActivityPub
      summary: Returns the Person actor for a user
      tags:
      - activitypub
  /activitypub/user-id/{user-id}/inbox:
    post:
      operationId: activitypubPersonInbox
      parameters:
      - description: user ID of the user
        in: path
        name: user-id
        required: true
        schema:
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
      summary: Send to the inbox
      tags:
      - activitypub
  /admin/cron:
    get:
      operationId: adminCronList
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Cron'
                type: array
          description: CronList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List cron tasks
      tags:
      - admin
  /admin/cron/{task}:
    post:
      operationId: adminCronRun
      parameters:
      - description: task to run
        in: path
        name: task
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Run cron task
      tags:
      - admin
  /admin/emails:
    get:
      operationId: adminGetAllEmails
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
          description: EmailList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List all emails
      tags:
      - admin
  /admin/emails/search:
    get:
      operationId: adminSearchEmails
      parameters:
      - description: keyword
        in: query
        name: q
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
          description: EmailList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Search all emails
      tags:
      - admin
  /admin/hooks:
    get:
      operationId: adminListHooks
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hook'
                type: array
          description: HookList
      summary: List system's webhooks
      tags:
      - admin
    post:
      operationId: adminCreateHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHookOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Create a hook
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/hooks/{id}:
    delete:
      operationId: adminDeleteHook
      parameters:
      - description: id of the hook to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
      summary: Delete a hook
      tags:
      - admin
    get:
      operationId: adminGetHook
      parameters:
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Get a hook
      tags:
      - admin
    patch:
      operationId: adminEditHook
      parameters:
      - description: id of the hook to update
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditHookOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Update a hook
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/orgs:
    get:
      operationId: adminGetAllOrgs
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OrganizationList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List all organizations
      tags:
      - admin
  /admin/runners/registration-token:
    get:
      operationId: adminGetRunnerRegistrationToken
      responses:
        "200":
          content: {}
          description: RegistrationToken is response related to registration token
          headers:
            token:
              schema:
                type: string
      summary: Get an global actions runner registration token
      tags:
      - admin
  /admin/unadopted:
    get:
      operationId: adminUnadoptedList
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      - description: pattern of repositories to search for
        in: query
        name: pattern
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: StringSlice
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List unadopted repositories
      tags:
      - admin
  /admin/unadopted/{owner}/{repo}:
    delete:
      operationId: adminDeleteUnadoptedRepository
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete unadopted files
      tags:
      - admin
    post:
      operationId: adminAdoptRepository
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Adopt unadopted files as a repository
      tags:
      - admin
  /admin/users:
    get:
      operationId: adminSearchUsers
      parameters:
      - description: ID of the user's login source to search for
        in: query
        name: source_id
        schema:
          format: int64
          type: integer
      - description: user's login name to search for
        in: query
        name: login_name
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Search users according filter conditions
      tags:
      - admin
    post:
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a user
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/users/{username}:
    delete:
      operationId: adminDeleteUser
      parameters:
      - description: username of user to delete
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: purge the user from the system completely
        in: query
        name: purge
        schema:
          type: boolean
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a user
      tags:
      - admin
    patch:
      operationId: adminEditUser
      parameters:
      - description: username of user to edit
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit an existing user
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/users/{username}/badges:
    delete:
      operationId: adminDeleteUserBadges
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBadgeOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/UserBadgeOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Remove a badge from a user
      tags:
      - admin
      x-codegen-request-body-name: body
    get:
      operationId: adminListUserBadges
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Badge'
                type: array
          description: BadgeList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a user's badges
      tags:
      - admin
    post:
      operationId: adminAddUserBadges
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBadgeOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a badge to a user
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/users/{username}/keys:
    post:
      operationId: adminCreatePublicKey
      parameters:
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
          description: PublicKey
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a public key on behalf of a user
      tags:
      - admin
      x-codegen-request-body-name: key
  /admin/users/{username}/keys/{id}:
    delete:
      operationId: adminDeleteUserPublicKey
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: id of the key to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a user's public key
      tags:
      - admin
  /admin/users/{username}/orgs:
    post:
      operationId: adminCreateOrg
      parameters:
      - description: username of the user that will own the created organization
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create an organization
      tags:
      - admin
      x-codegen-request-body-name: organization
  /admin/users/{username}/rename:
    post:
      operationId: adminRenameUser
      parameters:
      - description: existing username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameUserOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/RenameUserOption'
        required: true
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Rename a user
      tags:
      - admin
      x-codegen-request-body-name: body
  /admin/users/{username}/repos:
    post:
      operationId: adminCreateRepo
      parameters:
      - description: username of the user. This user will own the created repository
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepoOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a repository on behalf of a user
      tags:
      - admin
      x-codegen-request-body-name: repository
  /gitignore/templates:
    get:
      operationId: listGitignoresTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: GitignoreTemplateList
      summary: Returns a list of all gitignore templates
      tags:
      - miscellaneous
  /gitignore/templates/{name}:
    get:
      operationId: getGitignoreTemplateInfo
      parameters:
      - description: name of the template
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitignoreTemplateInfo'
          description: GitignoreTemplateInfo
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns information about a gitignore template
      tags:
      - miscellaneous
  /label/templates:
    get:
      operationId: listLabelTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: LabelTemplateList
      summary: Returns a list of all label templates
      tags:
      - miscellaneous
  /label/templates/{name}:
    get:
      operationId: getLabelTemplateInfo
      parameters:
      - description: name of the template
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LabelTemplate'
                type: array
          description: LabelTemplateInfo
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns all labels in a template
      tags:
      - miscellaneous
  /licenses:
    get:
      operationId: listLicenseTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LicensesTemplateListEntry'
                type: array
          description: LicenseTemplateList
      summary: Returns a list of all license templates
      tags:
      - miscellaneous
  /licenses/{name}:
    get:
      operationId: getLicenseTemplateInfo
      parameters:
      - description: name of the license
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateInfo'
          description: LicenseTemplateInfo
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns information about a license template
      tags:
      - miscellaneous
  /markdown:
    post:
      operationId: renderMarkdown
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkdownOption'
        required: false
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: MarkdownRender is a rendered markdown document
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Render a markdown document as HTML
      tags:
      - miscellaneous
      x-codegen-request-body-name: body
  /markdown/raw:
    post:
      operationId: renderMarkdownRaw
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Request body to render
        required: true
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: MarkdownRender is a rendered markdown document
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Render raw markdown as HTML
      tags:
      - miscellaneous
      x-codegen-request-body-name: body
  /markup:
    post:
      operationId: renderMarkup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkupOption'
        required: false
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: MarkupRender is a rendered markup document
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Render a markup document as HTML
      tags:
      - miscellaneous
      x-codegen-request-body-name: body
  /nodeinfo:
    get:
      operationId: getNodeInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfo'
          description: NodeInfo
      summary: Returns the nodeinfo of the Gitea application
      tags:
      - miscellaneous
  /notifications:
    get:
      operationId: notifyGetList
      parameters:
      - description: "If true, show notifications marked as read. Default value is\
          \ false"
        in: query
        name: all
        schema:
          type: boolean
      - description: "Show notifications with the provided status types. Options are:\
          \ unread, read and/or pinned. Defaults to unread & pinned."
        explode: true
        in: query
        name: status-types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter notifications by subject type
        explode: true
        in: query
        name: subject-type
        schema:
          items:
            enum:
            - issue
            - pull
            - commit
            - repository
            type: string
          type: array
        style: form
      - description: Only show notifications updated after the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show notifications updated before the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationThread'
                type: array
          description: NotificationThreadList
      summary: List users's notification threads
      tags:
      - notification
    put:
      operationId: notifyReadList
      parameters:
      - description: Describes the last point that notifications were checked. Anything
          updated since this time will not be updated.
        in: query
        name: last_read_at
        schema:
          format: date-time
          type: string
      - description: "If true, mark all notifications on this repo. Default value\
          \ is false"
        in: query
        name: all
        schema:
          type: string
      - description: "Mark notifications with the provided status types. Options are:\
          \ unread, read and/or pinned. Defaults to unread."
        explode: true
        in: query
        name: status-types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Status to mark notifications as, Defaults to read."
        in: query
        name: to-status
        schema:
          type: string
      responses:
        "205":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationThread'
                type: array
          description: NotificationThreadList
      summary: "Mark notification threads as read, pinned or unread"
      tags:
      - notification
  /notifications/new:
    get:
      operationId: notifyNewAvailable
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCount'
            text/html:
              schema:
                $ref: '#/components/schemas/NotificationCount'
          description: Number of unread notifications
      summary: Check if unread notifications exist
      tags:
      - notification
  /notifications/threads/{id}:
    get:
      operationId: notifyGetThread
      parameters:
      - description: id of notification thread
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationThread'
          description: NotificationThread
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get notification thread by ID
      tags:
      - notification
    patch:
      operationId: notifyReadThread
      parameters:
      - description: id of notification thread
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Status to mark notifications as
        in: query
        name: to-status
        schema:
          default: read
          type: string
      responses:
        "205":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationThread'
          description: NotificationThread
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Mark notification thread as read by ID
      tags:
      - notification
  /org/{org}/repos:
    post:
      deprecated: true
      operationId: createOrgRepoDeprecated
      parameters:
      - description: name of organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepoOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a repository in an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs:
    get:
      operationId: orgGetAll
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OrganizationList
      summary: Get list of organizations
      tags:
      - organization
    post:
      operationId: orgCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrgOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create an organization
      tags:
      - organization
      x-codegen-request-body-name: organization
  /orgs/{org}:
    delete:
      operationId: orgDelete
      parameters:
      - description: organization that is to be deleted
        in: path
        name: org
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete an organization
      tags:
      - organization
    get:
      operationId: orgGet
      parameters:
      - description: name of the organization to get
        in: path
        name: org
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an organization
      tags:
      - organization
    patch:
      operationId: orgEdit
      parameters:
      - description: name of the organization to edit
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOrgOption'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/actions/runners/registration-token:
    get:
      operationId: orgGetRunnerRegistrationToken
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: RegistrationToken is response related to registration token
          headers:
            token:
              schema:
                type: string
      summary: Get an organization's actions runner registration token
      tags:
      - organization
  /orgs/{org}/actions/secrets:
    get:
      operationId: orgListActionsSecrets
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: SecretList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's actions secrets
      tags:
      - organization
  /orgs/{org}/actions/secrets/{secretname}:
    delete:
      operationId: deleteOrgSecret
      parameters:
      - description: name of organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: delete one secret of the organization
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a secret in an organization
      tags:
      - organization
    put:
      operationId: updateOrgSecret
      parameters:
      - description: name of organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateSecretOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating a secret
        "204":
          content: {}
          description: response when updating a secret
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create or Update a secret value in an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/actions/variables:
    get:
      operationId: getOrgVariablesList
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActionVariable'
                type: array
          description: VariableList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an org-level variables list
      tags:
      - organization
  /orgs/{org}/actions/variables/{variablename}:
    delete:
      operationId: deleteOrgVariable
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionVariable'
          description: ActionVariable
        "201":
          content: {}
          description: response when deleting a variable
        "204":
          content: {}
          description: response when deleting a variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete an org-level variable
      tags:
      - organization
    get:
      operationId: getOrgVariable
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionVariable'
          description: ActionVariable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an org-level variable
      tags:
      - organization
    post:
      operationId: createOrgVariable
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating an org-level variable
        "204":
          content: {}
          description: response when creating an org-level variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create an org-level variable
      tags:
      - organization
      x-codegen-request-body-name: body
    put:
      operationId: updateOrgVariable
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when updating an org-level variable
        "204":
          content: {}
          description: response when updating an org-level variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update an org-level variable
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/activities/feeds:
    get:
      operationId: orgListActivityFeeds
      parameters:
      - description: name of the org
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: the date of the activities to be found
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: ActivityFeedsList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's activity feeds
      tags:
      - organization
  /orgs/{org}/avatar:
    delete:
      operationId: orgDeleteAvatar
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete Avatar
      tags:
      - organization
    post:
      operationId: orgUpdateAvatar
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAvatarOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateUserAvatarOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update Avatar
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/blocks:
    get:
      operationId: organizationListBlocks
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
      summary: List users blocked by the organization
      tags:
      - organization
  /orgs/{org}/blocks/{username}:
    delete:
      operationId: organizationUnblockUser
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: user to unblock
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Unblock a user
      tags:
      - organization
    get:
      operationId: organizationCheckUserBlock
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: user to check
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Check if a user is blocked by the organization
      tags:
      - organization
    put:
      operationId: organizationBlockUser
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: user to block
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: optional note for the block
        in: query
        name: note
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Block a user
      tags:
      - organization
  /orgs/{org}/hooks:
    get:
      operationId: orgListHooks
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hook'
                type: array
          description: HookList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's webhooks
      tags:
      - organization
    post:
      operationId: orgCreateHook
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHookOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a hook
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/hooks/{id}:
    delete:
      operationId: orgDeleteHook
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the hook to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a hook
      tags:
      - organization
    get:
      operationId: orgGetHook
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a hook
      tags:
      - organization
    patch:
      operationId: orgEditHook
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the hook to update
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditHookOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update a hook
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/labels:
    get:
      operationId: orgListLabels
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: LabelList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's labels
      tags:
      - organization
    post:
      operationId: orgCreateLabel
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a label for an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/labels/{id}:
    delete:
      operationId: orgDeleteLabel
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the label to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a label
      tags:
      - organization
    get:
      operationId: orgGetLabel
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the label to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a single label
      tags:
      - organization
    patch:
      operationId: orgEditLabel
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: id of the label to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLabelOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Update a label
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/members:
    get:
      operationId: orgListMembers
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's members
      tags:
      - organization
  /orgs/{org}/members/{username}:
    delete:
      operationId: orgDeleteMember
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: member removed
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a member from an organization
      tags:
      - organization
    get:
      operationId: orgIsMember
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: user is a member
        "303":
          content: {}
          description: "redirection to /orgs/{org}/public_members/{username}"
        "404":
          content: {}
          description: user is not a member
      summary: Check if a user is a member of an organization
      tags:
      - organization
  /orgs/{org}/public_members:
    get:
      operationId: orgListPublicMembers
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's public members
      tags:
      - organization
  /orgs/{org}/public_members/{username}:
    delete:
      operationId: orgConcealMember
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Conceal a user's membership
      tags:
      - organization
    get:
      operationId: orgIsPublicMember
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: user is a public member
        "404":
          content: {}
          description: user is not a public member
      summary: Check if a user is a public member of an organization
      tags:
      - organization
    put:
      operationId: orgPublicizeMember
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: membership publicized
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Publicize a user's membership
      tags:
      - organization
  /orgs/{org}/repos:
    get:
      operationId: orgListRepos
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's repos
      tags:
      - organization
    post:
      operationId: createOrgRepo
      parameters:
      - description: name of organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepoOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a repository in an organization
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/teams:
    get:
      operationId: orgListTeams
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: TeamList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an organization's teams
      tags:
      - organization
    post:
      operationId: orgCreateTeam
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a team
      tags:
      - organization
      x-codegen-request-body-name: body
  /orgs/{org}/teams/search:
    get:
      operationId: teamSearch
      parameters:
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: keywords to search
        in: query
        name: q
        schema:
          type: string
      - description: include search within team description (defaults to true)
        in: query
        name: include_desc
        schema:
          type: boolean
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamSearch_200_response'
          description: SearchResults of a successful search
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Search for teams within an organization
      tags:
      - organization
  /packages/{owner}:
    get:
      operationId: listPackages
      parameters:
      - description: owner of the packages
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      - description: package type filter
        in: query
        name: type
        schema:
          enum:
          - alpine
          - cargo
          - chef
          - composer
          - conan
          - conda
          - container
          - cran
          - debian
          - generic
          - go
          - helm
          - maven
          - npm
          - nuget
          - pub
          - pypi
          - rpm
          - rubygems
          - swift
          - vagrant
          type: string
      - description: name filter
        in: query
        name: q
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Package'
                type: array
          description: PackageList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets all packages of an owner
      tags:
      - package
  /packages/{owner}/{type}/{name}/{version}:
    delete:
      operationId: deletePackage
      parameters:
      - description: owner of the package
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: type of the package
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: name of the package
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: version of the package
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a package
      tags:
      - package
    get:
      operationId: getPackage
      parameters:
      - description: owner of the package
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: type of the package
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: name of the package
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: version of the package
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
          description: Package
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets a package
      tags:
      - package
  /packages/{owner}/{type}/{name}/{version}/files:
    get:
      operationId: listPackageFiles
      parameters:
      - description: owner of the package
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: type of the package
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: name of the package
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: version of the package
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PackageFile'
                type: array
          description: PackageFileList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets all files of a package
      tags:
      - package
  /repos/issues/search:
    get:
      operationId: issueSearchIssues
      parameters:
      - description: whether issue is open or closed
        in: query
        name: state
        schema:
          type: string
      - description: comma separated list of labels. Fetch only issues that have any
          of this labels. Non existent labels are discarded
        in: query
        name: labels
        schema:
          type: string
      - description: comma separated list of milestone names. Fetch only issues that
          have any of this milestones. Non existent are discarded
        in: query
        name: milestones
        schema:
          type: string
      - description: search string
        in: query
        name: q
        schema:
          type: string
      - description: repository to prioritize in the results
        in: query
        name: priority_repo_id
        schema:
          format: int64
          type: integer
      - description: filter by type (issues / pulls) if set
        in: query
        name: type
        schema:
          type: string
      - description: Only show notifications updated after the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show notifications updated before the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: "filter (issues / pulls) assigned to you, default is false"
        in: query
        name: assigned
        schema:
          type: boolean
      - description: "filter (issues / pulls) created by you, default is false"
        in: query
        name: created
        schema:
          type: boolean
      - description: "filter (issues / pulls) mentioning you, default is false"
        in: query
        name: mentioned
        schema:
          type: boolean
      - description: "filter pulls requesting your review, default is false"
        in: query
        name: review_requested
        schema:
          type: boolean
      - description: "filter pulls reviewed by you, default is false"
        in: query
        name: reviewed
        schema:
          type: boolean
      - description: filter by owner
        in: query
        name: owner
        schema:
          type: string
      - description: filter by team (requires organization owner parameter to be provided)
        in: query
        name: team
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: IssueList
      summary: Search for issues across the repositories that the user has access
        to
      tags:
      - issue
  /repos/migrate:
    post:
      operationId: repoMigrate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MigrateRepoOptions'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "409":
          content: {}
          description: The repository with the same name already exists.
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Migrate a remote git repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/search:
    get:
      operationId: repoSearch
      parameters:
      - description: keyword
        in: query
        name: q
        schema:
          type: string
      - description: Limit search to repositories with keyword as topic
        in: query
        name: topic
        schema:
          type: boolean
      - description: include search of keyword within repository description
        in: query
        name: includeDesc
        schema:
          type: boolean
      - description: search only for repos that the user with the given id owns or
          contributes to
        in: query
        name: uid
        schema:
          format: int64
          type: integer
      - description: repo owner to prioritize in the results
        in: query
        name: priority_owner_id
        schema:
          format: int64
          type: integer
      - description: search only for repos that belong to the given team id
        in: query
        name: team_id
        schema:
          format: int64
          type: integer
      - description: search only for repos that the user with the given id has starred
        in: query
        name: starredBy
        schema:
          format: int64
          type: integer
      - description: include private repositories this user has access to (defaults
          to true)
        in: query
        name: private
        schema:
          type: boolean
      - description: "show only pubic, private or all repositories (defaults to all)"
        in: query
        name: is_private
        schema:
          type: boolean
      - description: include template repositories this user has access to (defaults
          to true)
        in: query
        name: template
        schema:
          type: boolean
      - description: "show only archived, non-archived or all repositories (defaults\
          \ to all)"
        in: query
        name: archived
        schema:
          type: boolean
      - description: "type of repository to search for. Supported values are \"fork\"\
          , \"source\", \"mirror\" and \"collaborative\""
        in: query
        name: mode
        schema:
          type: string
      - description: "if `uid` is given, search only for repos that the user owns"
        in: query
        name: exclusive
        schema:
          type: boolean
      - description: "sort repos by attribute. Supported values are \"alpha\", \"\
          created\", \"updated\", \"size\", and \"id\". Default is \"alpha\""
        in: query
        name: sort
        schema:
          type: string
      - description: "sort order, either \"asc\" (ascending) or \"desc\" (descending).\
          \ Default is \"asc\", ignored if \"sort\" is not specified."
        in: query
        name: order
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
          description: SearchResults
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Search for repositories
      tags:
      - repository
  /repos/{owner}/{repo}:
    delete:
      operationId: repoDelete
      parameters:
      - description: owner of the repo to delete
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to delete
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a repository
      tags:
      - repository
    get:
      operationId: repoGet
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a repository
      tags:
      - repository
    patch:
      operationId: repoEdit
      parameters:
      - description: owner of the repo to edit
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to edit
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditRepoOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/EditRepoOption'
        description: Properties of a repo that you can edit
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit a repository's properties. Only fields that are set will be changed.
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/actions/secrets:
    get:
      operationId: repoListActionsSecrets
      parameters:
      - description: owner of the repository
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Secret'
                type: array
          description: SecretList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an repo's actions secrets
      tags:
      - repository
  /repos/{owner}/{repo}/actions/secrets/{secretname}:
    delete:
      operationId: deleteRepoSecret
      parameters:
      - description: owner of the repository
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: delete one secret of the organization
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a secret in a repository
      tags:
      - repository
    put:
      operationId: updateRepoSecret
      parameters:
      - description: owner of the repository
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateSecretOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating a secret
        "204":
          content: {}
          description: response when updating a secret
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create or Update a secret value in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/actions/variables:
    get:
      operationId: getRepoVariablesList
      parameters:
      - description: name of the owner
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActionVariable'
                type: array
          description: VariableList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get repo-level variables list
      tags:
      - repository
  /repos/{owner}/{repo}/actions/variables/{variablename}:
    delete:
      operationId: deleteRepoVariable
      parameters:
      - description: name of the owner
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionVariable'
          description: ActionVariable
        "201":
          content: {}
          description: response when deleting a variable
        "204":
          content: {}
          description: response when deleting a variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a repo-level variable
      tags:
      - repository
    get:
      operationId: getRepoVariable
      parameters:
      - description: name of the owner
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionVariable'
          description: ActionVariable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a repo-level variable
      tags:
      - repository
    post:
      operationId: createRepoVariable
      parameters:
      - description: name of the owner
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariableOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating a repo-level variable
        "204":
          content: {}
          description: response when creating a repo-level variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a repo-level variable
      tags:
      - repository
      x-codegen-request-body-name: body
    put:
      operationId: updateRepoVariable
      parameters:
      - description: name of the owner
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repository
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVariableOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when updating a repo-level variable
        "204":
          content: {}
          description: response when updating a repo-level variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update a repo-level variable
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/activities/feeds:
    get:
      operationId: repoListActivityFeeds
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: the date of the activities to be found
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: ActivityFeedsList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's activity feeds
      tags:
      - repository
  /repos/{owner}/{repo}/archive/{archive}:
    get:
      operationId: repoGetArchive
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: the git reference for download with attached archive format (e.g.
          master.zip)
        in: path
        name: archive
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: success
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an archive of a repository
      tags:
      - repository
  /repos/{owner}/{repo}/assignees:
    get:
      operationId: repoGetAssignees
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Return all users that have write access and can be assigned to issues
      tags:
      - repository
  /repos/{owner}/{repo}/avatar:
    delete:
      operationId: repoDeleteAvatar
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete avatar
      tags:
      - repository
    post:
      operationId: repoUpdateAvatar
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepoAvatarOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateRepoAvatarOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update avatar
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/branch_protections:
    get:
      operationId: repoListBranchProtection
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BranchProtection'
                type: array
          description: BranchProtectionList
      summary: List branch protections for a repository
      tags:
      - repository
    post:
      operationId: repoCreateBranchProtection
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchProtectionOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchProtection'
          description: BranchProtection
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a branch protections for a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/branch_protections/{name}:
    delete:
      operationId: repoDeleteBranchProtection
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of protected branch
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a specific branch protection for the repository
      tags:
      - repository
    get:
      operationId: repoGetBranchProtection
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of protected branch
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchProtection'
          description: BranchProtection
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a specific branch protection for the repository
      tags:
      - repository
    patch:
      operationId: repoEditBranchProtection
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of protected branch
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditBranchProtectionOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchProtection'
          description: BranchProtection
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit a branch protections for a repository. Only fields that are set
        will be changed
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/branches:
    get:
      operationId: repoListBranches
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Branch'
                type: array
          description: BranchList
      summary: List a repository's branches
      tags:
      - repository
    post:
      operationId: repoCreateBranch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBranchRepoOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
          description: Branch
        "403":
          content: {}
          description: The branch is archived or a mirror.
        "404":
          content: {}
          description: The old branch does not exist.
        "409":
          content: {}
          description: The branch with the same name already exists.
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a branch
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/branches/{branch}:
    delete:
      operationId: repoDeleteBranch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: branch to delete
        in: path
        name: branch
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a specific branch from a repository
      tags:
      - repository
    get:
      operationId: repoGetBranch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: branch to get
        in: path
        name: branch
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
          description: Branch
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Retrieve a specific branch from a repository, including its effective\
        \ branch protection"
      tags:
      - repository
  /repos/{owner}/{repo}/collaborators:
    get:
      operationId: repoListCollaborators
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's collaborators
      tags:
      - repository
  /repos/{owner}/{repo}/collaborators/{collaborator}:
    delete:
      operationId: repoDeleteCollaborator
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: username of the collaborator to delete
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a collaborator from a repository
      tags:
      - repository
    get:
      operationId: repoCheckCollaborator
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: username of the collaborator
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Check if a user is a collaborator of a repository
      tags:
      - repository
    put:
      operationId: repoAddCollaborator
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: username of the collaborator to add
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCollaboratorOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/AddCollaboratorOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a collaborator to a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/collaborators/{collaborator}/permission:
    get:
      operationId: repoGetRepoPermissions
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: username of the collaborator
        in: path
        name: collaborator
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCollaboratorPermission'
          description: RepoCollaboratorPermission
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get repository permissions for a user
      tags:
      - repository
  /repos/{owner}/{repo}/commits:
    get:
      operationId: repoGetAllCommits
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: SHA or branch to start listing commits from (usually 'master')
        in: query
        name: sha
        schema:
          type: string
      - description: filepath of a file/dir
        in: query
        name: path
        schema:
          type: string
      - description: "include diff stats for every commit (disable for speedup, default\
          \ 'true')"
        in: query
        name: stat
        schema:
          type: boolean
      - description: "include verification for every commit (disable for speedup,\
          \ default 'true')"
        in: query
        name: verification
        schema:
          type: boolean
      - description: "include a list of affected files for every commit (disable for\
          \ speedup, default 'true')"
        in: query
        name: files
        schema:
          type: boolean
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results (ignored if used with 'path')
        in: query
        name: limit
        schema:
          type: integer
      - description: commits that match the given specifier will not be listed.
        in: query
        name: not
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Commit'
                type: array
          description: CommitList
          headers:
            X-HasMore:
              description: True if there is another page
              schema:
                type: boolean
            X-PageCount:
              description: Total number of pages
              schema:
                format: int64
                type: integer
            X-PerPage:
              description: Commits per page
              schema:
                format: int64
                type: integer
            X-Total:
              description: Total commit count
              schema:
                format: int64
                type: integer
            X-Page:
              description: The current page
              schema:
                format: int64
                type: integer
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
          description: EmptyRepository
      summary: Get a list of all commits from a repository
      tags:
      - repository
  /repos/{owner}/{repo}/commits/{ref}/status:
    get:
      operationId: repoGetCombinedStatusByRef
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of branch/tag/commit
        in: path
        name: ref
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombinedStatus'
          description: CombinedStatus
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Get a commit's combined status, by branch/tag/commit reference"
      tags:
      - repository
  /repos/{owner}/{repo}/commits/{ref}/statuses:
    get:
      operationId: repoListStatusesByRef
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of branch/tag/commit
        in: path
        name: ref
        required: true
        schema:
          type: string
      - description: type of sort
        in: query
        name: sort
        schema:
          enum:
          - oldest
          - recentupdate
          - leastupdate
          - leastindex
          - highestindex
          type: string
      - description: type of state
        in: query
        name: state
        schema:
          enum:
          - pending
          - success
          - error
          - failure
          - warning
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CommitStatus'
                type: array
          description: CommitStatusList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Get a commit's statuses, by branch/tag/commit reference"
      tags:
      - repository
  /repos/{owner}/{repo}/commits/{sha}/pull:
    get:
      operationId: repoGetCommitPullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: SHA of the commit to get
        in: path
        name: sha
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequest'
          description: PullRequest
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get the pull request of the commit
      tags:
      - repository
  /repos/{owner}/{repo}/compare/{basehead}:
    get:
      operationId: repoCompareDiff
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: compare two branches or commits
        in: path
        name: basehead
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Compare'
          description: ""
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get commit comparison information
      tags:
      - repository
  /repos/{owner}/{repo}/contents:
    get:
      operationId: repoGetContentsList
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: The name of the commit/branch/tag. Default the repository’s default
          branch (usually master)
        in: query
        name: ref
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContentsResponse'
                type: array
          description: ContentsListResponse
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets the metadata of all the entries of the root dir
      tags:
      - repository
    post:
      operationId: repoChangeFiles
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeFilesOptions'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesResponse'
          description: FilesResponse
        "403":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Modify multiple files in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/contents/{filepath}:
    delete:
      operationId: repoDeleteFile
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: path of the file to delete
        in: path
        name: filepath
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDeleteResponse'
          description: FileDeleteResponse
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a file in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
    get:
      operationId: repoGetContents
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "path of the dir, file, symlink or submodule in the repo"
        in: path
        name: filepath
        required: true
        schema:
          type: string
      - description: The name of the commit/branch/tag. Default the repository’s default
          branch (usually master)
        in: query
        name: ref
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentsResponse'
          description: ContentsResponse
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Gets the metadata and contents (if a file) of an entry in a repository,\
        \ or a list of entries if a dir"
      tags:
      - repository
    post:
      operationId: repoCreateFile
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: path of the file to create
        in: path
        name: filepath
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileOptions'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
          description: FileResponse
        "403":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a file in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
    put:
      operationId: repoUpdateFile
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: path of the file to update
        in: path
        name: filepath
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
          description: FileResponse
        "403":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Update a file in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/diffpatch:
    post:
      operationId: repoApplyDiffPatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
          description: FileResponse
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Apply diff patch to repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/editorconfig/{filepath}:
    get:
      operationId: repoGetEditorConfig
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: filepath of file to get
        in: path
        name: filepath
        required: true
        schema:
          type: string
      - description: The name of the commit/branch/tag. Default the repository’s default
          branch (usually master)
        in: query
        name: ref
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: success
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get the EditorConfig definitions of a file in a repository
      tags:
      - repository
  /repos/{owner}/{repo}/forks:
    get:
      operationId: listForks
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's forks
      tags:
      - repository
    post:
      operationId: createFork
      parameters:
      - description: owner of the repo to fork
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to fork
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateForkOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateForkOption'
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: The repository with the same name already exists.
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Fork a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/git/blobs/{sha}:
    get:
      operationId: GetBlob
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: sha of the commit
        in: path
        name: sha
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitBlobResponse'
          description: GitBlobResponse
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets the blob of a repository.
      tags:
      - repository
  /repos/{owner}/{repo}/git/commits/{sha}:
    get:
      operationId: repoGetSingleCommit
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: a git ref or commit sha
        in: path
        name: sha
        required: true
        schema:
          type: string
      - description: "include diff stats for every commit (disable for speedup, default\
          \ 'true')"
        in: query
        name: stat
        schema:
          type: boolean
      - description: "include verification for every commit (disable for speedup,\
          \ default 'true')"
        in: query
        name: verification
        schema:
          type: boolean
      - description: "include a list of affected files for every commit (disable for\
          \ speedup, default 'true')"
        in: query
        name: files
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
          description: Commit
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Get a single commit from a repository
      tags:
      - repository
  /repos/{owner}/{repo}/git/commits/{sha}.{diffType}:
    get:
      operationId: repoDownloadCommitDiffOrPatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: SHA of the commit to get
        in: path
        name: sha
        required: true
        schema:
          type: string
      - description: whether the output is diff or patch
        in: path
        name: diffType
        required: true
        schema:
          enum:
          - diff
          - patch
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: APIString is a string response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a commit's diff or patch
      tags:
      - repository
  /repos/{owner}/{repo}/git/notes/{sha}:
    get:
      operationId: repoGetNote
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: a git ref or commit sha
        in: path
        name: sha
        required: true
        schema:
          type: string
      - description: "include verification for every commit (disable for speedup,\
          \ default 'true')"
        in: query
        name: verification
        schema:
          type: boolean
      - description: "include a list of affected files for every commit (disable for\
          \ speedup, default 'true')"
        in: query
        name: files
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
          description: Note
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Get a note corresponding to a single commit from a repository
      tags:
      - repository
  /repos/{owner}/{repo}/git/refs:
    get:
      operationId: repoListAllGitRefs
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Reference'
                type: array
          description: ReferenceList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get specified ref or filtered repository's refs
      tags:
      - repository
  /repos/{owner}/{repo}/git/refs/{ref}:
    get:
      operationId: repoListGitRefs
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: part or full name of the ref
        in: path
        name: ref
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Reference'
                type: array
          description: ReferenceList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get specified ref or filtered repository's refs
      tags:
      - repository
  /repos/{owner}/{repo}/git/tags/{sha}:
    get:
      operationId: GetAnnotatedTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "sha of the tag. The Git tags API only supports annotated tag\
          \ objects, not lightweight tags."
        in: path
        name: sha
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotatedTag'
          description: AnnotatedTag
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets the tag object of an annotated tag (not lightweight tags)
      tags:
      - repository
  /repos/{owner}/{repo}/git/trees/{sha}:
    get:
      operationId: GetTree
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: sha of the commit
        in: path
        name: sha
        required: true
        schema:
          type: string
      - description: show all directories and files
        in: query
        name: recursive
        schema:
          type: boolean
      - description: "page number; the 'truncated' field in the response will be true\
          \ if there are still more items after this page, false if the last page"
        in: query
        name: page
        schema:
          type: integer
      - description: number of items per page
        in: query
        name: per_page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitTreeResponse'
          description: GitTreeResponse
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Gets the tree of a repository.
      tags:
      - repository
  /repos/{owner}/{repo}/hooks:
    get:
      operationId: repoListHooks
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hook'
                type: array
          description: HookList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the hooks in a repository
      tags:
      - repository
    post:
      operationId: repoCreateHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHookOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a hook
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/hooks/git:
    get:
      operationId: repoListGitHooks
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitHook'
                type: array
          description: GitHookList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the Git hooks in a repository
      tags:
      - repository
  /repos/{owner}/{repo}/hooks/git/{id}:
    delete:
      operationId: repoDeleteGitHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a Git hook in a repository
      tags:
      - repository
    get:
      operationId: repoGetGitHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHook'
          description: GitHook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a Git hook
      tags:
      - repository
    patch:
      operationId: repoEditGitHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditGitHookOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/EditGitHookOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHook'
          description: GitHook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit a Git hook in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/hooks/{id}:
    delete:
      operationId: repoDeleteHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a hook in a repository
      tags:
      - repository
    get:
      operationId: repoGetHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a hook
      tags:
      - repository
    patch:
      operationId: repoEditHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the hook
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditHookOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/EditHookOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit a hook in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/hooks/{id}/tests:
    post:
      operationId: repoTestHook
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the hook to test
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "The name of the commit/branch/tag, indicates which commit will\
          \ be loaded to the webhook payload."
        in: query
        name: ref
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Test a push webhook
      tags:
      - repository
  /repos/{owner}/{repo}/issue_config:
    get:
      operationId: repoGetIssueConfig
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueConfig'
          description: RepoIssueConfig
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns the issue config for a repo
      tags:
      - repository
  /repos/{owner}/{repo}/issue_config/validate:
    get:
      operationId: repoValidateIssueConfig
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueConfigValidation'
          description: RepoIssueConfigValidation
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns the validation information for a issue config
      tags:
      - repository
  /repos/{owner}/{repo}/issue_templates:
    get:
      operationId: repoGetIssueTemplates
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/IssueTemplate'
                type: array
          description: IssueTemplates
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get available issue templates for a repository
      tags:
      - repository
  /repos/{owner}/{repo}/issues:
    get:
      operationId: issueListIssues
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: whether issue is open or closed
        in: query
        name: state
        schema:
          enum:
          - closed
          - open
          - all
          type: string
      - description: comma separated list of labels. Fetch only issues that have any
          of this labels. Non existent labels are discarded
        in: query
        name: labels
        schema:
          type: string
      - description: search string
        in: query
        name: q
        schema:
          type: string
      - description: filter by type (issues / pulls) if set
        in: query
        name: type
        schema:
          enum:
          - issues
          - pulls
          type: string
      - description: comma separated list of milestone names or ids. It uses names
          and fall back to ids. Fetch only issues that have any of this milestones.
          Non existent milestones are discarded
        in: query
        name: milestones
        schema:
          type: string
      - description: Only show items updated after the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show items updated before the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: Only show items which were created by the given user
        in: query
        name: created_by
        schema:
          type: string
      - description: Only show items for which the given user is assigned
        in: query
        name: assigned_by
        schema:
          type: string
      - description: Only show items in which the given user was mentioned
        in: query
        name: mentioned_by
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: IssueList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's issues
      tags:
      - issue
    post:
      operationId: issueCreateIssue
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIssueOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "412":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: "Create an issue. If using deadline only the date will be taken into\
        \ account, and time of day ignored."
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/comments:
    get:
      operationId: issueGetRepoComments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "if provided, only comments updated since the provided time are\
          \ returned."
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: "if provided, only comments updated before the provided time\
          \ are returned."
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: CommentList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List all comments in a repository
      tags:
      - issue
  /repos/{owner}/{repo}/issues/comments/{id}:
    delete:
      operationId: issueDeleteComment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of comment to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a comment
      tags:
      - issue
    get:
      operationId: issueGetComment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Comment
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a comment
      tags:
      - issue
    patch:
      operationId: issueEditComment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditIssueCommentOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Comment
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit a comment
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/comments/{id}/assets:
    get:
      operationId: issueListIssueCommentAttachments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: AttachmentList
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List comment's attachments
      tags:
      - issue
    post:
      operationId: issueCreateIssueCommentAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: name of the attachment
        in: query
        name: name
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/issueCreateIssueCommentAttachment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a comment attachment
      tags:
      - issue
  /repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}:
    delete:
      operationId: issueDeleteIssueCommentAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to delete
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a comment attachment
      tags:
      - issue
    get:
      operationId: issueGetIssueCommentAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to get
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Get a comment attachment
      tags:
      - issue
    patch:
      operationId: issueEditIssueCommentAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to edit
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAttachmentOptions'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit a comment attachment
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/comments/{id}/reactions:
    delete:
      operationId: issueDeleteCommentReaction
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReactionOption'
        required: false
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a reaction from a comment of an issue
      tags:
      - issue
      x-codegen-request-body-name: content
    get:
      operationId: issueGetCommentReactions
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Reaction'
                type: array
          description: ReactionList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a list of reactions from a comment of an issue
      tags:
      - issue
    post:
      operationId: issuePostCommentReaction
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the comment to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReactionOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
          description: Reaction
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
          description: Reaction
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add a reaction to a comment of an issue
      tags:
      - issue
      x-codegen-request-body-name: content
  /repos/{owner}/{repo}/issues/pinned:
    get:
      operationId: repoListPinnedIssues
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: IssueList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's pinned issues
      tags:
      - repository
  /repos/{owner}/{repo}/issues/{index}:
    delete:
      operationId: issueDelete
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of issue to delete
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete an issue
      tags:
      - issue
    get:
      operationId: issueGetIssue
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an issue
      tags:
      - issue
    patch:
      operationId: issueEditIssue
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to edit
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditIssueOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "412":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: "Edit an issue. If using deadline only the date will be taken into\
        \ account, and time of day ignored."
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/assets:
    get:
      operationId: issueListIssueAttachments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: AttachmentList
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List issue's attachments
      tags:
      - issue
    post:
      operationId: issueCreateIssueAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: name of the attachment
        in: query
        name: name
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/issueCreateIssueCommentAttachment_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create an issue attachment
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}:
    delete:
      operationId: issueDeleteIssueAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to delete
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete an issue attachment
      tags:
      - issue
    get:
      operationId: issueGetIssueAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to get
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Get an issue attachment
      tags:
      - issue
    patch:
      operationId: issueEditIssueAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to edit
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAttachmentOptions'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit an issue attachment
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/blocks:
    delete:
      operationId: issueRemoveIssueBlocking
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueMeta'
          text/plain:
            schema:
              $ref: '#/components/schemas/IssueMeta'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unblock the issue given in the body by the issue in path
      tags:
      - issue
      x-codegen-request-body-name: body
    get:
      operationId: issueListBlocks
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: IssueList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List issues that are blocked by this issue
      tags:
      - issue
    post:
      operationId: issueCreateIssueBlocking
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueMeta'
          text/plain:
            schema:
              $ref: '#/components/schemas/IssueMeta'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "404":
          content: {}
          description: the issue does not exist
      summary: Block the issue given in the body by the issue in path
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/comments:
    get:
      operationId: issueGetComments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: "if provided, only comments updated since the specified time\
          \ are returned."
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: "if provided, only comments updated before the provided time\
          \ are returned."
        in: query
        name: before
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: CommentList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List all comments on an issue
      tags:
      - issue
    post:
      operationId: issueCreateComment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIssueCommentOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Comment
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a comment to an issue
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/comments/{id}:
    delete:
      deprecated: true
      operationId: issueDeleteCommentDeprecated
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: this parameter is ignored
        in: path
        name: index
        required: true
        schema:
          type: integer
      - description: id of comment to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a comment
      tags:
      - issue
    patch:
      deprecated: true
      operationId: issueEditCommentDeprecated
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: this parameter is ignored
        in: path
        name: index
        required: true
        schema:
          type: integer
      - description: id of the comment to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditIssueCommentOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Comment
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit a comment
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/deadline:
    post:
      operationId: issueEditIssueDeadline
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to create or update a deadline on
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditDeadlineOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueDeadline'
          description: IssueDeadline
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Set an issue deadline. If set to null, the deadline is deleted. If\
        \ using deadline only the date will be taken into account, and time of day\
        \ ignored."
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/dependencies:
    delete:
      operationId: issueRemoveIssueDependencies
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueMeta'
          text/plain:
            schema:
              $ref: '#/components/schemas/IssueMeta'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Remove an issue dependency
      tags:
      - issue
      x-codegen-request-body-name: body
    get:
      operationId: issueListIssueDependencies
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: IssueList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "List an issue's dependencies, i.e all issues that block this issue."
      tags:
      - issue
    post:
      operationId: issueCreateIssueDependencies
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueMeta'
          text/plain:
            schema:
              $ref: '#/components/schemas/IssueMeta'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          description: Issue
        "404":
          content: {}
          description: the issue does not exist
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Make the issue in the url depend on the issue in the form.
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/labels:
    delete:
      operationId: issueClearLabels
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove all labels from an issue
      tags:
      - issue
    get:
      operationId: issueGetLabels
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: LabelList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get an issue's labels
      tags:
      - issue
    post:
      operationId: issueAddLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueLabelsOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: LabelList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add a label to an issue
      tags:
      - issue
      x-codegen-request-body-name: body
    put:
      operationId: issueReplaceLabels
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueLabelsOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: LabelList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Replace an issue's labels
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/labels/{id}:
    delete:
      operationId: issueRemoveLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the label to remove
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Remove a label from an issue
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/pin:
    delete:
      operationId: unpinIssue
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of issue to unpin
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unpin an Issue
      tags:
      - issue
    post:
      operationId: pinIssue
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of issue to pin
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Pin an Issue
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/pin/{position}:
    patch:
      operationId: moveIssuePin
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: the new position
        in: path
        name: position
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Moves the Pin to the given Position
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/reactions:
    delete:
      operationId: issueDeleteIssueReaction
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReactionOption'
        required: false
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a reaction from an issue
      tags:
      - issue
      x-codegen-request-body-name: content
    get:
      operationId: issueGetIssueReactions
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Reaction'
                type: array
          description: ReactionList
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a list reactions of an issue
      tags:
      - issue
    post:
      operationId: issuePostIssueReaction
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReactionOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
          description: Reaction
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
          description: Reaction
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add a reaction to an issue
      tags:
      - issue
      x-codegen-request-body-name: content
  /repos/{owner}/{repo}/issues/{index}/stopwatch/delete:
    delete:
      operationId: issueDeleteStopWatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to stop the stopwatch on
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: "Not repo writer, user does not have rights to toggle stopwatch"
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: Cannot cancel a non existent stopwatch
      summary: Delete an issue's existing stopwatch.
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/stopwatch/start:
    post:
      operationId: issueStartStopWatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to create the stopwatch on
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "201":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: "Not repo writer, user does not have rights to toggle stopwatch"
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: Cannot start a stopwatch again if it already exists
      summary: Start stopwatch on an issue.
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/stopwatch/stop:
    post:
      operationId: issueStopStopWatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to stop the stopwatch on
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "201":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: "Not repo writer, user does not have rights to toggle stopwatch"
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: Cannot stop a non existent stopwatch
      summary: Stop an issue's existing stopwatch.
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/subscriptions:
    get:
      operationId: issueSubscriptions
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get users who subscribed on an issue.
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/subscriptions/check:
    get:
      operationId: issueCheckSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchInfo'
          description: WatchInfo
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Check if user is subscribed to an issue
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/subscriptions/{user}:
    delete:
      operationId: issueDeleteSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: user witch unsubscribe
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Already unsubscribed
        "201":
          content: {}
          description: Successfully Unsubscribed
        "304":
          content: {}
          description: User can only subscribe itself if he is no admin
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unsubscribe user from issue
      tags:
      - issue
    put:
      operationId: issueAddSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: user to subscribe
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Already subscribed
        "201":
          content: {}
          description: Successfully Subscribed
        "304":
          content: {}
          description: User can only subscribe itself if he is no admin
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Subscribe user to issue
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/timeline:
    get:
      operationId: issueGetCommentsAndTimeline
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: "if provided, only comments updated since the specified time\
          \ are returned."
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      - description: "if provided, only comments updated before the provided time\
          \ are returned."
        in: query
        name: before
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TimelineComment'
                type: array
          description: TimelineList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List all comments and events on an issue
      tags:
      - issue
  /repos/{owner}/{repo}/issues/{index}/times:
    delete:
      operationId: issueResetTime
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue to add tracked time to
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Reset a tracked time of an issue
      tags:
      - issue
    get:
      operationId: issueTrackedTimes
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: optional filter by user (available for issue managers)
        in: query
        name: user
        schema:
          type: string
      - description: Only show times updated after the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show times updated before the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TrackedTime'
                type: array
          description: TrackedTimeList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List an issue's tracked times
      tags:
      - issue
    post:
      operationId: issueAddTime
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTimeOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackedTime'
          description: TrackedTime
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add tracked time to a issue
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/issues/{index}/times/{id}:
    delete:
      operationId: issueDeleteTime
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the issue
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of time to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete specific tracked time
      tags:
      - issue
  /repos/{owner}/{repo}/keys:
    get:
      operationId: repoListKeys
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: the key_id to search for
        in: query
        name: key_id
        schema:
          type: integer
      - description: fingerprint of the key
        in: query
        name: fingerprint
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeployKey'
                type: array
          description: DeployKeyList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's keys
      tags:
      - repository
    post:
      operationId: repoCreateKey
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployKey'
          description: DeployKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a key to a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/keys/{id}:
    delete:
      operationId: repoDeleteKey
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the key to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a key from a repository
      tags:
      - repository
    get:
      operationId: repoGetKey
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the key to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployKey'
          description: DeployKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a repository's key by id
      tags:
      - repository
  /repos/{owner}/{repo}/labels:
    get:
      operationId: issueListLabels
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Label'
                type: array
          description: LabelList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get all of a repository's labels
      tags:
      - issue
    post:
      operationId: issueCreateLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a label
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/labels/{id}:
    delete:
      operationId: issueDeleteLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the label to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a label
      tags:
      - issue
    get:
      operationId: issueGetLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the label to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a single label
      tags:
      - issue
    patch:
      operationId: issueEditLabel
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the label to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLabelOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Label
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Update a label
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/languages:
    get:
      operationId: repoGetLanguages
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: LanguageStatistics
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get languages and number of bytes of code written
      tags:
      - repository
  /repos/{owner}/{repo}/media/{filepath}:
    get:
      operationId: repoGetRawFileOrLFS
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: filepath of the file to get
        in: path
        name: filepath
        required: true
        schema:
          type: string
      - description: The name of the commit/branch/tag. Default the repository’s default
          branch (usually master)
        in: query
        name: ref
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Returns raw file content.
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a file or it's LFS object from a repository
      tags:
      - repository
  /repos/{owner}/{repo}/milestones:
    get:
      operationId: issueGetMilestonesList
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "Milestone state, Recognized values are open, closed and all.\
          \ Defaults to \"open\""
        in: query
        name: state
        schema:
          type: string
      - description: filter by milestone name
        in: query
        name: name
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Milestone'
                type: array
          description: MilestoneList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get all of a repository's opened milestones
      tags:
      - issue
    post:
      operationId: issueCreateMilestone
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMilestoneOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: Milestone
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a milestone
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/milestones/{id}:
    delete:
      operationId: issueDeleteMilestone
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "the milestone to delete, identified by ID and if not available\
          \ by name"
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a milestone
      tags:
      - issue
    get:
      operationId: issueGetMilestone
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "the milestone to get, identified by ID and if not available\
          \ by name"
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: Milestone
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a milestone
      tags:
      - issue
    patch:
      operationId: issueEditMilestone
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "the milestone to edit, identified by ID and if not available\
          \ by name"
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMilestoneOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
          description: Milestone
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update a milestone
      tags:
      - issue
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/mirror-sync:
    post:
      operationId: repoMirrorSync
      parameters:
      - description: owner of the repo to sync
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to sync
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Sync a mirrored repository
      tags:
      - repository
  /repos/{owner}/{repo}/new_pin_allowed:
    get:
      operationId: repoNewPinAllowed
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewIssuePinsAllowed'
          description: RepoNewIssuePinsAllowed
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Returns if new Issue Pins are allowed
      tags:
      - repository
  /repos/{owner}/{repo}/notifications:
    get:
      operationId: notifyGetRepoList
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "If true, show notifications marked as read. Default value is\
          \ false"
        in: query
        name: all
        schema:
          type: boolean
      - description: "Show notifications with the provided status types. Options are:\
          \ unread, read and/or pinned. Defaults to unread & pinned"
        explode: true
        in: query
        name: status-types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter notifications by subject type
        explode: true
        in: query
        name: subject-type
        schema:
          items:
            enum:
            - issue
            - pull
            - commit
            - repository
            type: string
          type: array
        style: form
      - description: Only show notifications updated after the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show notifications updated before the given time. This is
          a timestamp in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationThread'
                type: array
          description: NotificationThreadList
      summary: List users's notification threads on a specific repo
      tags:
      - notification
    put:
      operationId: notifyReadRepoList
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "If true, mark all notifications on this repo. Default value\
          \ is false"
        in: query
        name: all
        schema:
          type: string
      - description: "Mark notifications with the provided status types. Options are:\
          \ unread, read and/or pinned. Defaults to unread."
        explode: true
        in: query
        name: status-types
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Status to mark notifications as. Defaults to read.
        in: query
        name: to-status
        schema:
          type: string
      - description: Describes the last point that notifications were checked. Anything
          updated since this time will not be updated.
        in: query
        name: last_read_at
        schema:
          format: date-time
          type: string
      responses:
        "205":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationThread'
                type: array
          description: NotificationThreadList
      summary: "Mark notification threads as read, pinned or unread on a specific\
        \ repo"
      tags:
      - notification
  /repos/{owner}/{repo}/pulls:
    get:
      operationId: repoListPullRequests
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "State of pull request: open or closed (optional)"
        in: query
        name: state
        schema:
          enum:
          - closed
          - open
          - all
          type: string
      - description: Type of sort
        in: query
        name: sort
        schema:
          enum:
          - oldest
          - recentupdate
          - leastupdate
          - mostcomment
          - leastcomment
          - priority
          type: string
      - description: ID of the milestone
        in: query
        name: milestone
        schema:
          format: int64
          type: integer
      - description: Label IDs
        explode: true
        in: query
        name: labels
        schema:
          items:
            format: int64
            type: integer
          type: array
        style: form
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullRequest'
                type: array
          description: PullRequestList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's pull requests
      tags:
      - repository
    post:
      operationId: repoCreatePullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullRequestOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequest'
          description: PullRequest
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/pinned:
    get:
      operationId: repoListPinnedPullRequests
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullRequest'
                type: array
          description: PullRequestList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's pinned pull requests
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{base}/{head}:
    get:
      operationId: repoGetPullRequestByBaseHead
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: base of the pull request to get
        in: path
        name: base
        required: true
        schema:
          type: string
      - description: head of the pull request to get
        in: path
        name: head
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequest'
          description: PullRequest
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a pull request by base and head
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}:
    get:
      operationId: repoGetPullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequest'
          description: PullRequest
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a pull request
      tags:
      - repository
    patch:
      operationId: repoEditPullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to edit
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPullRequestOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullRequest'
          description: PullRequest
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "412":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: "Update a pull request. If using deadline only the date will be taken\
        \ into account, and time of day ignored."
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}.{diffType}:
    get:
      operationId: repoDownloadPullDiffOrPatch
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: whether the output is diff or patch
        in: path
        name: diffType
        required: true
        schema:
          enum:
          - diff
          - patch
          type: string
      - description: "whether to include binary file changes. if true, the diff is\
          \ applicable with `git apply`"
        in: query
        name: binary
        schema:
          type: boolean
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: APIString is a string response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a pull request diff or patch
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}/commits:
    get:
      operationId: repoGetPullRequestCommits
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      - description: "include verification for every commit (disable for speedup,\
          \ default 'true')"
        in: query
        name: verification
        schema:
          type: boolean
      - description: "include a list of affected files for every commit (disable for\
          \ speedup, default 'true')"
        in: query
        name: files
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Commit'
                type: array
          description: CommitList
          headers:
            X-HasMore:
              description: True if there is another page
              schema:
                type: boolean
            X-PageCount:
              description: Total number of pages
              schema:
                format: int64
                type: integer
            X-PerPage:
              description: Commits per page
              schema:
                format: int64
                type: integer
            X-Total:
              description: Total commit count
              schema:
                format: int64
                type: integer
            X-Page:
              description: The current page
              schema:
                format: int64
                type: integer
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get commits for a pull request
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}/files:
    get:
      operationId: repoGetPullRequestFiles
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: skip to given file
        in: query
        name: skip-to
        schema:
          type: string
      - description: whitespace behavior
        in: query
        name: whitespace
        schema:
          enum:
          - ignore-all
          - ignore-change
          - ignore-eol
          - show-all
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChangedFile'
                type: array
          description: ChangedFileList
          headers:
            X-HasMore:
              description: True if there is another page
              schema:
                type: boolean
            X-PageCount:
              description: Total number of pages
              schema:
                format: int64
                type: integer
            X-PerPage:
              description: Commits per page
              schema:
                format: int64
                type: integer
            X-Total:
              description: Total commit count
              schema:
                format: int64
                type: integer
            X-Page:
              description: The current page
              schema:
                format: int64
                type: integer
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get changed files for a pull request
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}/merge:
    delete:
      operationId: repoCancelScheduledAutoMerge
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to merge
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Cancel the scheduled auto merge for the given pull request
      tags:
      - repository
    get:
      operationId: repoPullRequestIsMerged
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: pull request has been merged
        "404":
          content: {}
          description: pull request has not been merged
      summary: Check if a pull request has been merged
      tags:
      - repository
    post:
      operationId: repoMergePullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to merge
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergePullRequestOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/MergePullRequestOption'
        required: false
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIEmpty is an empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Merge a pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}/requested_reviewers:
    delete:
      operationId: repoDeletePullReviewRequests
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullReviewRequestOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/PullReviewRequestOptions'
        required: true
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: cancel review requests for a pull request
      tags:
      - repository
      x-codegen-request-body-name: body
    post:
      operationId: repoCreatePullReviewRequests
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullReviewRequestOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/PullReviewRequestOptions'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullReview'
                type: array
          description: PullReviewList
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: create review requests for a pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}/reviews:
    get:
      operationId: repoListPullReviews
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullReview'
                type: array
          description: PullReviewList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List all reviews for a pull request
      tags:
      - repository
    post:
      operationId: repoCreatePullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePullReviewOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreatePullReviewOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullReview'
          description: PullReview
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a review to an pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}/reviews/{id}:
    delete:
      operationId: repoDeletePullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a specific review from a pull request
      tags:
      - repository
    get:
      operationId: repoGetPullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullReview'
          description: PullReview
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a specific review for a pull request
      tags:
      - repository
    post:
      operationId: repoSubmitPullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitPullReviewOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/SubmitPullReviewOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullReview'
          description: PullReview
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Submit a pending review to an pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments:
    get:
      operationId: repoGetPullReviewComments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PullReviewComment'
                type: array
          description: PullCommentList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a specific review for a pull request
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals:
    post:
      operationId: repoDismissPullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DismissPullReviewOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/DismissPullReviewOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullReview'
          description: PullReview
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Dismiss a review for a pull request
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals:
    post:
      operationId: repoUnDismissPullReview
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the review
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullReview'
          description: PullReview
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Cancel to dismiss a review for a pull request
      tags:
      - repository
  /repos/{owner}/{repo}/pulls/{index}/update:
    post:
      operationId: repoUpdatePullRequest
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: index of the pull request to get
        in: path
        name: index
        required: true
        schema:
          format: int64
          type: integer
      - description: how to update pull request
        in: query
        name: style
        schema:
          enum:
          - merge
          - rebase
          type: string
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Merge PR's baseBranch into headBranch
      tags:
      - repository
  /repos/{owner}/{repo}/push_mirrors:
    get:
      operationId: repoListPushMirrors
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PushMirror'
                type: array
          description: PushMirrorList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get all push mirrors of the repository
      tags:
      - repository
    post:
      operationId: repoAddPushMirror
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePushMirrorOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushMirror'
          description: PushMirror
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: add a push mirror to the repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/push_mirrors-sync:
    post:
      operationId: repoPushMirrorSync
      parameters:
      - description: owner of the repo to sync
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to sync
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: APIEmpty is an empty response
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Sync all push mirrored repository
      tags:
      - repository
  /repos/{owner}/{repo}/push_mirrors/{name}:
    delete:
      operationId: repoDeletePushMirror
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: remote name of the pushMirror
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: deletes a push mirror from a repository by remoteName
      tags:
      - repository
    get:
      operationId: repoGetPushMirrorByRemoteName
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: remote name of push mirror
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushMirror'
          description: PushMirror
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get push mirror of the repository by remoteName
      tags:
      - repository
  /repos/{owner}/{repo}/raw/{filepath}:
    get:
      operationId: repoGetRawFile
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: filepath of the file to get
        in: path
        name: filepath
        required: true
        schema:
          type: string
      - description: The name of the commit/branch/tag. Default the repository’s default
          branch (usually master)
        in: query
        name: ref
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Returns raw file content.
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a file from a repository
      tags:
      - repository
  /repos/{owner}/{repo}/releases:
    get:
      operationId: repoListReleases
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: "filter (exclude / include) drafts, if you dont have repo write\
          \ access none will show"
        in: query
        name: draft
        schema:
          type: boolean
      - description: filter (exclude / include) pre-releases
        in: query
        name: pre-release
        schema:
          type: boolean
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Release'
                type: array
          description: ReleaseList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's releases
      tags:
      - repository
    post:
      operationId: repoCreateRelease
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReleaseOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
          description: Release
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a release
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/releases/latest:
    get:
      operationId: repoGetLatestRelease
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
          description: Release
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "Gets the most recent non-prerelease, non-draft release of a repository,\
        \ sorted by created_at"
      tags:
      - repository
  /repos/{owner}/{repo}/releases/tags/{tag}:
    delete:
      operationId: repoDeleteReleaseByTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: tag name of the release to delete
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a release by tag name
      tags:
      - repository
    get:
      operationId: repoGetReleaseByTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: tag name of the release to get
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
          description: Release
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a release by tag name
      tags:
      - repository
  /repos/{owner}/{repo}/releases/{id}:
    delete:
      operationId: repoDeleteRelease
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a release
      tags:
      - repository
    get:
      operationId: repoGetRelease
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
          description: Release
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a release
      tags:
      - repository
    patch:
      operationId: repoEditRelease
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release to edit
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReleaseOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
          description: Release
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update a release
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/releases/{id}/assets:
    get:
      operationId: repoListReleaseAttachments
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: AttachmentList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List release's attachments
      tags:
      - repository
    post:
      operationId: repoCreateReleaseAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: name of the attachment
        in: query
        name: name
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/repoCreateReleaseAttachment_request'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/repoCreateReleaseAttachment_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a release attachment
      tags:
      - repository
  /repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}:
    delete:
      operationId: repoDeleteReleaseAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to delete
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a release attachment
      tags:
      - repository
    get:
      operationId: repoGetReleaseAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to get
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a release attachment
      tags:
      - repository
    patch:
      operationId: repoEditReleaseAttachment
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: id of the release
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: id of the attachment to edit
        in: path
        name: attachment_id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAttachmentOptions'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Attachment
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit a release attachment
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/reviewers:
    get:
      operationId: repoGetReviewers
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Return all users that can be requested to review in this repo
      tags:
      - repository
  /repos/{owner}/{repo}/runners/registration-token:
    get:
      operationId: repoGetRunnerRegistrationToken
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: RegistrationToken is response related to registration token
          headers:
            token:
              schema:
                type: string
      summary: Get a repository's actions runner registration token
      tags:
      - repository
  /repos/{owner}/{repo}/signing-key.gpg:
    get:
      operationId: repoSigningKey
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: GPG armored public key
      summary: Get signing-key.gpg for given repository
      tags:
      - repository
  /repos/{owner}/{repo}/stargazers:
    get:
      operationId: repoListStargazers
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's stargazers
      tags:
      - repository
  /repos/{owner}/{repo}/statuses/{sha}:
    get:
      operationId: repoListStatuses
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: sha of the commit
        in: path
        name: sha
        required: true
        schema:
          type: string
      - description: type of sort
        in: query
        name: sort
        schema:
          enum:
          - oldest
          - recentupdate
          - leastupdate
          - leastindex
          - highestindex
          type: string
      - description: type of state
        in: query
        name: state
        schema:
          enum:
          - pending
          - success
          - error
          - failure
          - warning
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CommitStatus'
                type: array
          description: CommitStatusList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a commit's statuses
      tags:
      - repository
    post:
      operationId: repoCreateStatus
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: sha of the commit
        in: path
        name: sha
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStatusOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateStatusOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitStatus'
          description: CommitStatus
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a commit status
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/subscribers:
    get:
      operationId: repoListSubscribers
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's watchers
      tags:
      - repository
  /repos/{owner}/{repo}/subscription:
    delete:
      operationId: userCurrentDeleteSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unwatch a repo
      tags:
      - repository
    get:
      operationId: userCurrentCheckSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchInfo'
            text/html:
              schema:
                $ref: '#/components/schemas/WatchInfo'
          description: WatchInfo
        "404":
          content: {}
          description: User is not watching this repo or repo do not exist
      summary: Check if the current user is watching a repo
      tags:
      - repository
    put:
      operationId: userCurrentPutSubscription
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchInfo'
            text/html:
              schema:
                $ref: '#/components/schemas/WatchInfo'
          description: WatchInfo
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Watch a repo
      tags:
      - repository
  /repos/{owner}/{repo}/tags:
    get:
      operationId: repoListTags
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: "page size of results, default maximum page size is 50"
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
          description: TagList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's tags
      tags:
      - repository
    post:
      operationId: repoCreateTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateTagOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Tag
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIEmpty is an empty response
        "409":
          content: {}
          description: APIConflict is a conflict empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a new git tag in a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/tags/{tag}:
    delete:
      operationId: repoDeleteTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of tag to delete
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIEmpty is an empty response
        "409":
          content: {}
          description: APIConflict is a conflict empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a repository's tag by name
      tags:
      - repository
    get:
      operationId: repoGetTag
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Tag
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get the tag of a repository by tag name
      tags:
      - repository
  /repos/{owner}/{repo}/teams:
    get:
      operationId: repoListTeams
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: TeamList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repository's teams
      tags:
      - repository
  /repos/{owner}/{repo}/teams/{team}:
    delete:
      operationId: repoDeleteTeam
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: team name
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a team from a repository
      tags:
      - repository
    get:
      operationId: repoCheckTeam
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: team name
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Check if a team is assigned to a repository
      tags:
      - repository
    put:
      operationId: repoAddTeam
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: team name
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "405":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add a team to a repository
      tags:
      - repository
  /repos/{owner}/{repo}/times:
    get:
      operationId: repoTrackedTimes
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: optional filter by user (available for issue managers)
        in: query
        name: user
        schema:
          type: string
      - description: Only show times updated after the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show times updated before the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TrackedTime'
                type: array
          description: TrackedTimeList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a repo's tracked times
      tags:
      - repository
  /repos/{owner}/{repo}/times/{user}:
    get:
      deprecated: true
      operationId: userTrackedTimes
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: username of user
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TrackedTime'
                type: array
          description: TrackedTimeList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a user's tracked times in a repo
      tags:
      - repository
  /repos/{owner}/{repo}/topics:
    get:
      operationId: repoListTopics
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicName'
          description: TopicNames
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get list of topics that a repository has
      tags:
      - repository
    put:
      operationId: repoUpdateTopics
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoTopicOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/RepoTopicOptions'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIInvalidTopicsError is error format response to invalid topics
          headers:
            invalidTopics:
              schema:
                items:
                  type: string
                type: array
            message:
              schema:
                type: string
      summary: Replace list of topics for a repository
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/topics/{topic}:
    delete:
      operationId: repoDeleteTopic
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the topic to delete
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIInvalidTopicsError is error format response to invalid topics
          headers:
            invalidTopics:
              schema:
                items:
                  type: string
                type: array
            message:
              schema:
                type: string
      summary: Delete a topic from a repository
      tags:
      - repository
    put:
      operationId: repoAddTopic
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the topic to add
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIInvalidTopicsError is error format response to invalid topics
          headers:
            invalidTopics:
              schema:
                items:
                  type: string
                type: array
            message:
              schema:
                type: string
      summary: Add a topic to a repository
      tags:
      - repository
  /repos/{owner}/{repo}/transfer:
    post:
      operationId: repoTransfer
      parameters:
      - description: owner of the repo to transfer
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to transfer
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRepoOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/TransferRepoOption'
        description: Transfer Options
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Transfer a repo ownership
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/transfer/accept:
    post:
      operationId: acceptRepoTransfer
      parameters:
      - description: owner of the repo to transfer
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to transfer
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Accept a repo transfer
      tags:
      - repository
  /repos/{owner}/{repo}/transfer/reject:
    post:
      operationId: rejectRepoTransfer
      parameters:
      - description: owner of the repo to transfer
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to transfer
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Reject a repo transfer
      tags:
      - repository
  /repos/{owner}/{repo}/wiki/new:
    post:
      operationId: repoCreateWikiPage
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWikiPageOptions'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            text/html:
              schema:
                $ref: '#/components/schemas/WikiPage'
          description: WikiPage
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a wiki page
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/wiki/page/{pageName}:
    delete:
      operationId: repoDeleteWikiPage
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the page
        in: path
        name: pageName
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Delete a wiki page
      tags:
      - repository
    get:
      operationId: repoGetWikiPage
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the page
        in: path
        name: pageName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
          description: WikiPage
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a wiki page
      tags:
      - repository
    patch:
      operationId: repoEditWikiPage
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the page
        in: path
        name: pageName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWikiPageOptions'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            text/html:
              schema:
                $ref: '#/components/schemas/WikiPage'
          description: WikiPage
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "423":
          content: {}
          description: APIRepoArchivedError is an error that is raised when an archived
            repo should be modified
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Edit a wiki page
      tags:
      - repository
      x-codegen-request-body-name: body
  /repos/{owner}/{repo}/wiki/pages:
    get:
      operationId: repoGetWikiPages
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WikiPageMetaData'
                type: array
          description: WikiPageList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get all wiki pages
      tags:
      - repository
  /repos/{owner}/{repo}/wiki/revisions/{pageName}:
    get:
      operationId: repoGetWikiPageRevisions
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      - description: name of the page
        in: path
        name: pageName
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiCommitList'
          description: WikiCommitList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get revisions of a wiki page
      tags:
      - repository
  /repos/{template_owner}/{template_repo}/generate:
    post:
      operationId: generateRepo
      parameters:
      - description: name of the template repository owner
        in: path
        name: template_owner
        required: true
        schema:
          type: string
      - description: name of the template repository
        in: path
        name: template_repo
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRepoOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "409":
          content: {}
          description: The repository with the same name already exists.
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a repository using a template
      tags:
      - repository
      x-codegen-request-body-name: body
  /repositories/{id}:
    get:
      operationId: repoGetByID
      parameters:
      - description: id of the repo to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a repository by id
      tags:
      - repository
  /settings/api:
    get:
      operationId: getGeneralAPISettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralAPISettings'
          description: GeneralAPISettings
      summary: Get instance's global settings for api
      tags:
      - settings
  /settings/attachment:
    get:
      operationId: getGeneralAttachmentSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralAttachmentSettings'
          description: GeneralAttachmentSettings
      summary: Get instance's global settings for Attachment
      tags:
      - settings
  /settings/repository:
    get:
      operationId: getGeneralRepositorySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralRepoSettings'
          description: GeneralRepoSettings
      summary: Get instance's global settings for repositories
      tags:
      - settings
  /settings/ui:
    get:
      operationId: getGeneralUISettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralUISettings'
          description: GeneralUISettings
      summary: Get instance's global settings for ui
      tags:
      - settings
  /signing-key.gpg:
    get:
      operationId: getSigningKey
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: GPG armored public key
      summary: Get default signing-key.gpg
      tags:
      - miscellaneous
  /teams/{id}:
    delete:
      operationId: orgDeleteTeam
      parameters:
      - description: id of the team to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: team deleted
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a team
      tags:
      - organization
    get:
      operationId: orgGetTeam
      parameters:
      - description: id of the team to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a team
      tags:
      - organization
    patch:
      operationId: orgEditTeam
      parameters:
      - description: id of the team to edit
        in: path
        name: id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTeamOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Team
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Edit a team
      tags:
      - organization
      x-codegen-request-body-name: body
  /teams/{id}/activities/feeds:
    get:
      operationId: orgListTeamActivityFeeds
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: the date of the activities to be found
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: ActivityFeedsList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a team's activity feeds
      tags:
      - organization
  /teams/{id}/members:
    get:
      operationId: orgListTeamMembers
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a team's members
      tags:
      - organization
  /teams/{id}/members/{username}:
    delete:
      operationId: orgRemoveTeamMember
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: username of the user to remove
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a team member
      tags:
      - organization
    get:
      operationId: orgListTeamMember
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: username of the member to list
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a particular member of team
      tags:
      - organization
    put:
      operationId: orgAddTeamMember
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: username of the user to add
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add a team member
      tags:
      - organization
  /teams/{id}/repos:
    get:
      operationId: orgListTeamRepos
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a team's repos
      tags:
      - organization
  /teams/{id}/repos/{org}/{repo}:
    delete:
      description: "This does not delete the repository, it only removes the repository\
        \ from the team."
      operationId: orgRemoveTeamRepository
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: organization that owns the repo to remove
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the repo to remove
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a repository from a team
      tags:
      - organization
    get:
      operationId: orgListTeamRepo
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: organization that owns the repo to list
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the repo to list
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a particular repo of team
      tags:
      - organization
    put:
      operationId: orgAddTeamRepository
      parameters:
      - description: id of the team
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: organization that owns the repo to add
        in: path
        name: org
        required: true
        schema:
          type: string
      - description: name of the repo to add
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Add a repository to a team
      tags:
      - organization
  /topics/search:
    get:
      operationId: topicSearch
      parameters:
      - description: keywords to search
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TopicResponse'
                type: array
          description: TopicListResponse
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: search topics via keyword
      tags:
      - repository
  /user:
    get:
      operationId: userGetCurrent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
      summary: Get the authenticated user
      tags:
      - user
  /user/actions/runners/registration-token:
    get:
      operationId: userGetRunnerRegistrationToken
      responses:
        "200":
          content: {}
          description: RegistrationToken is response related to registration token
          headers:
            token:
              schema:
                type: string
      summary: Get an user's actions runner registration token
      tags:
      - user
  /user/actions/secrets/{secretname}:
    delete:
      operationId: deleteUserSecret
      parameters:
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: delete one secret of the user
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a secret in a user scope
      tags:
      - user
    put:
      operationId: updateUserSecret
      parameters:
      - description: name of the secret
        in: path
        name: secretname
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateSecretOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating a secret
        "204":
          content: {}
          description: response when updating a secret
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create or Update a secret value in a user scope
      tags:
      - user
      x-codegen-request-body-name: body
  /user/actions/variables:
    get:
      operationId: getUserVariablesList
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActionVariable'
                type: array
          description: VariableList
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get the user-level list of variables which is created by current doer
      tags:
      - user
  /user/actions/variables/{variablename}:
    delete:
      operationId: deleteUserVariable
      parameters:
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: response when deleting a variable
        "204":
          content: {}
          description: response when deleting a variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a user-level variable which is created by current doer
      tags:
      - user
    get:
      operationId: getUserVariable
      parameters:
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionVariable'
          description: ActionVariable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a user-level variable which is created by current doer
      tags:
      - user
    post:
      operationId: createUserVariable
      parameters:
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when creating a variable
        "204":
          content: {}
          description: response when creating a variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Create a user-level variable
      tags:
      - user
      x-codegen-request-body-name: body
    put:
      operationId: updateUserVariable
      parameters:
      - description: name of the variable
        in: path
        name: variablename
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVariableOption'
        required: false
      responses:
        "201":
          content: {}
          description: response when updating a variable
        "204":
          content: {}
          description: response when updating a variable
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Update a user-level variable which is created by current doer
      tags:
      - user
      x-codegen-request-body-name: body
  /user/applications/oauth2:
    get:
      operationId: userGetOauth2Application
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuth2Application'
                type: array
          description: OAuth2ApplicationList represents a list of OAuth2 applications.
      summary: List the authenticated user's oauth2 applications
      tags:
      - user
    post:
      operationId: userCreateOAuth2Application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOAuth2ApplicationOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateOAuth2ApplicationOptions'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Application'
          description: OAuth2Application
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: creates a new OAuth2 application
      tags:
      - user
      x-codegen-request-body-name: body
  /user/applications/oauth2/{id}:
    delete:
      operationId: userDeleteOAuth2Application
      parameters:
      - description: token to be deleted
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: delete an OAuth2 Application
      tags:
      - user
    get:
      operationId: userGetOAuth2Application
      parameters:
      - description: Application ID to be found
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Application'
          description: OAuth2Application
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: get an OAuth2 Application
      tags:
      - user
    patch:
      operationId: userUpdateOAuth2Application
      parameters:
      - description: application to be updated
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOAuth2ApplicationOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateOAuth2ApplicationOptions'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Application'
          description: OAuth2Application
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: "update an OAuth2 Application, this includes regenerating the client\
        \ secret"
      tags:
      - user
      x-codegen-request-body-name: body
  /user/avatar:
    delete:
      operationId: userDeleteAvatar
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
      summary: Delete Avatar
      tags:
      - user
    post:
      operationId: userUpdateAvatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAvatarOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateUserAvatarOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
      summary: Update Avatar
      tags:
      - user
      x-codegen-request-body-name: body
  /user/blocks:
    get:
      operationId: userListBlocks
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
      summary: List users blocked by the authenticated user
      tags:
      - user
  /user/blocks/{username}:
    delete:
      operationId: userUnblockUser
      parameters:
      - description: user to unblock
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Unblock a user
      tags:
      - user
    get:
      operationId: userCheckUserBlock
      parameters:
      - description: user to check
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Check if a user is blocked by the authenticated user
      tags:
      - user
    put:
      operationId: userBlockUser
      parameters:
      - description: user to block
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: optional note for the block
        in: query
        name: note
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Block a user
      tags:
      - user
  /user/emails:
    delete:
      operationId: userDeleteEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEmailOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/DeleteEmailOption'
        required: false
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete email addresses
      tags:
      - user
      x-codegen-request-body-name: body
    get:
      operationId: userListEmails
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
          description: EmailList
      summary: List the authenticated user's email addresses
      tags:
      - user
    post:
      operationId: userAddEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailOption'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateEmailOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Email'
                type: array
          description: EmailList
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Add email addresses
      tags:
      - user
      x-codegen-request-body-name: body
  /user/followers:
    get:
      operationId: userCurrentListFollowers
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
      summary: List the authenticated user's followers
      tags:
      - user
  /user/following:
    get:
      operationId: userCurrentListFollowing
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
      summary: List the users that the authenticated user is following
      tags:
      - user
  /user/following/{username}:
    delete:
      operationId: userCurrentDeleteFollow
      parameters:
      - description: username of user to unfollow
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unfollow a user
      tags:
      - user
    get:
      operationId: userCurrentCheckFollowing
      parameters:
      - description: username of followed user
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Check whether a user is followed by the authenticated user
      tags:
      - user
    put:
      operationId: userCurrentPutFollow
      parameters:
      - description: username of user to follow
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Follow a user
      tags:
      - user
  /user/gpg_key_token:
    get:
      operationId: getVerificationToken
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: APIString is a string response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a Token to verify
      tags:
      - user
  /user/gpg_key_verify:
    post:
      operationId: userVerifyGPGKey
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPGKey'
          description: GPGKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Verify a GPG key
      tags:
      - user
  /user/gpg_keys:
    get:
      operationId: userCurrentListGPGKeys
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GPGKey'
                type: array
          description: GPGKeyList
      summary: List the authenticated user's GPG keys
      tags:
      - user
    post:
      operationId: userCurrentPostGPGKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGPGKeyOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPGKey'
          description: GPGKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a GPG key
      tags:
      - user
      x-codegen-request-body-name: Form
  /user/gpg_keys/{id}:
    delete:
      operationId: userCurrentDeleteGPGKey
      parameters:
      - description: id of key to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Remove a GPG key
      tags:
      - user
    get:
      operationId: userCurrentGetGPGKey
      parameters:
      - description: id of key to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GPGKey'
          description: GPGKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a GPG key
      tags:
      - user
  /user/hooks:
    get:
      operationId: userListHooks
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Hook'
                type: array
          description: HookList
      summary: List the authenticated user's webhooks
      tags:
      - user
    post:
      operationId: userCreateHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHookOption'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Create a hook
      tags:
      - user
      x-codegen-request-body-name: body
  /user/hooks/{id}:
    delete:
      operationId: userDeleteHook
      parameters:
      - description: id of the hook to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
      summary: Delete a hook
      tags:
      - user
    get:
      operationId: userGetHook
      parameters:
      - description: id of the hook to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Get a hook
      tags:
      - user
    patch:
      operationId: userEditHook
      parameters:
      - description: id of the hook to update
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditHookOption'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hook'
          description: Hook
      summary: Update a hook
      tags:
      - user
      x-codegen-request-body-name: body
  /user/keys:
    get:
      operationId: userCurrentListKeys
      parameters:
      - description: fingerprint of the key
        in: query
        name: fingerprint
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PublicKey'
                type: array
          description: PublicKeyList
      summary: List the authenticated user's public keys
      tags:
      - user
    post:
      operationId: userCurrentPostKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKeyOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
          description: PublicKey
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a public key
      tags:
      - user
      x-codegen-request-body-name: body
  /user/keys/{id}:
    delete:
      operationId: userCurrentDeleteKey
      parameters:
      - description: id of key to delete
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Delete a public key
      tags:
      - user
    get:
      operationId: userCurrentGetKey
      parameters:
      - description: id of key to get
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
          description: PublicKey
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a public key
      tags:
      - user
  /user/orgs:
    get:
      operationId: orgListCurrentUserOrgs
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OrganizationList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the current user's organizations
      tags:
      - organization
  /user/repos:
    get:
      operationId: userCurrentListRepos
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
      summary: List the repos that the authenticated user owns
      tags:
      - user
    post:
      operationId: createCurrentUserRepo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepoOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
          description: Repository
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "409":
          content: {}
          description: The repository with the same name already exists.
        "422":
          content: {}
          description: APIValidationError is error format response related to input
            validation
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create a repository
      tags:
      - repository
      - user
      x-codegen-request-body-name: body
  /user/settings:
    get:
      operationId: getUserSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSettings'
                type: array
          description: UserSettings
      summary: Get user settings
      tags:
      - user
    patch:
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsOptions'
          text/plain:
            schema:
              $ref: '#/components/schemas/UserSettingsOptions'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserSettings'
                type: array
          description: UserSettings
      summary: Update user settings
      tags:
      - user
      x-codegen-request-body-name: body
  /user/starred:
    get:
      operationId: userCurrentListStarred
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
      summary: The repos that the authenticated user has starred
      tags:
      - user
  /user/starred/{owner}/{repo}:
    delete:
      operationId: userCurrentDeleteStar
      parameters:
      - description: owner of the repo to unstar
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to unstar
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Unstar the given repo
      tags:
      - user
    get:
      operationId: userCurrentCheckStarring
      parameters:
      - description: owner of the repo
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Whether the authenticated is starring the repo
      tags:
      - user
    put:
      operationId: userCurrentPutStar
      parameters:
      - description: owner of the repo to star
        in: path
        name: owner
        required: true
        schema:
          type: string
      - description: name of the repo to star
        in: path
        name: repo
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Star the given repo
      tags:
      - user
  /user/stopwatches:
    get:
      operationId: userGetStopWatches
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StopWatch'
                type: array
          description: StopWatchList
      summary: Get list of all existing stopwatches
      tags:
      - user
  /user/subscriptions:
    get:
      operationId: userCurrentListSubscriptions
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
      summary: List repositories watched by the authenticated user
      tags:
      - user
  /user/teams:
    get:
      operationId: userListTeams
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: TeamList
      summary: List all the teams a user belongs to
      tags:
      - user
  /user/times:
    get:
      operationId: userCurrentTrackedTimes
      parameters:
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      - description: Only show times updated after the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - description: Only show times updated before the given time. This is a timestamp
          in RFC 3339 format
        in: query
        name: before
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TrackedTime'
                type: array
          description: TrackedTimeList
      summary: List the current user's tracked times
      tags:
      - user
  /users/search:
    get:
      operationId: userSearch
      parameters:
      - description: keyword
        in: query
        name: q
        schema:
          type: string
      - description: ID of the user to search for
        in: query
        name: uid
        schema:
          format: int64
          type: integer
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userSearch_200_response'
          description: SearchResults of a successful search
      summary: Search for users
      tags:
      - user
  /users/{username}:
    get:
      operationId: userGet
      parameters:
      - description: username of user to get
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a user
      tags:
      - user
  /users/{username}/activities/feeds:
    get:
      operationId: userListActivityFeeds
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: "if true, only show actions performed by the requested user"
        in: query
        name: only-performed-by
        schema:
          type: boolean
      - description: the date of the activities to be found
        in: query
        name: date
        schema:
          format: date
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
          description: ActivityFeedsList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a user's activity feeds
      tags:
      - user
  /users/{username}/followers:
    get:
      operationId: userListFollowers
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the given user's followers
      tags:
      - user
  /users/{username}/following:
    get:
      operationId: userListFollowing
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: UserList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the users that the given user is following
      tags:
      - user
  /users/{username}/following/{target}:
    get:
      operationId: userCheckFollowing
      parameters:
      - description: username of following user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: username of followed user
        in: path
        name: target
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Check if one user is following another user
      tags:
      - user
  /users/{username}/gpg_keys:
    get:
      operationId: userListGPGKeys
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GPGKey'
                type: array
          description: GPGKeyList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the given user's GPG keys
      tags:
      - user
  /users/{username}/heatmap:
    get:
      operationId: userGetHeatmapData
      parameters:
      - description: username of user to get
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserHeatmapData'
                type: array
          description: UserHeatmapData
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get a user's heatmap
      tags:
      - user
  /users/{username}/keys:
    get:
      operationId: userListKeys
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: fingerprint of the key
        in: query
        name: fingerprint
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PublicKey'
                type: array
          description: PublicKeyList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the given user's public keys
      tags:
      - user
  /users/{username}/orgs:
    get:
      operationId: orgListUserOrgs
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OrganizationList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List a user's organizations
      tags:
      - organization
  /users/{username}/orgs/{org}/permissions:
    get:
      operationId: orgGetUserPermissions
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: name of the organization
        in: path
        name: org
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationPermissions'
          description: OrganizationPermissions
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: Get user permissions in organization
      tags:
      - organization
  /users/{username}/repos:
    get:
      operationId: userListRepos
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the repos owned by the given user
      tags:
      - user
  /users/{username}/starred:
    get:
      operationId: userListStarred
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: The repos that the given user has starred
      tags:
      - user
  /users/{username}/subscriptions:
    get:
      operationId: userListSubscriptions
      parameters:
      - description: username of the user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Repository'
                type: array
          description: RepositoryList
        "404":
          content: {}
          description: APINotFound is a not found empty response
      summary: List the repositories watched by a user
      tags:
      - user
  /users/{username}/tokens:
    get:
      operationId: userGetTokens
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: page number of results to return (1-based)
        in: query
        name: page
        schema:
          type: integer
      - description: page size of results
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccessToken'
                type: array
          description: AccessTokenList represents a list of API access token.
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: List the authenticated user's access tokens
      tags:
      - user
    post:
      operationId: userCreateToken
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessTokenOption'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
          description: AccessToken represents an API access token.
        "400":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: Create an access token
      tags:
      - user
      x-codegen-request-body-name: body
  /users/{username}/tokens/{token}:
    delete:
      operationId: userDeleteAccessToken
      parameters:
      - description: username of user
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: "token to be deleted, identified by ID and if not available by\
          \ name"
        in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: APIEmpty is an empty response
        "403":
          content: {}
          description: APIForbiddenError is a forbidden error response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
        "404":
          content: {}
          description: APINotFound is a not found empty response
        "422":
          content: {}
          description: APIError is error format response
          headers:
            message:
              schema:
                type: string
            url:
              schema:
                type: string
      summary: delete an access token
      tags:
      - user
  /version:
    get:
      operationId: getVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerVersion'
          description: ServerVersion
      summary: Returns the version of the Gitea application
      tags:
      - miscellaneous
components:
  responses:
    AccessToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessToken'
        text/html:
          schema:
            $ref: '#/components/schemas/AccessToken'
      description: AccessToken represents an API access token.
    AccessTokenList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/AccessToken'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/AccessToken'
            type: array
      description: AccessTokenList represents a list of API access token.
    ActionVariable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionVariable'
        text/html:
          schema:
            $ref: '#/components/schemas/ActionVariable'
      description: ActionVariable
    ActivityFeedsList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Activity'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Activity'
            type: array
      description: ActivityFeedsList
    ActivityPub:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActivityPub'
        text/html:
          schema:
            $ref: '#/components/schemas/ActivityPub'
      description: ActivityPub
    AnnotatedTag:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnnotatedTag'
        text/html:
          schema:
            $ref: '#/components/schemas/AnnotatedTag'
      description: AnnotatedTag
    Attachment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachment'
        text/html:
          schema:
            $ref: '#/components/schemas/Attachment'
      description: Attachment
    AttachmentList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Attachment'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Attachment'
            type: array
      description: AttachmentList
    BadgeList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Badge'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Badge'
            type: array
      description: BadgeList
    Branch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Branch'
        text/html:
          schema:
            $ref: '#/components/schemas/Branch'
      description: Branch
    BranchList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Branch'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Branch'
            type: array
      description: BranchList
    BranchProtection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BranchProtection'
        text/html:
          schema:
            $ref: '#/components/schemas/BranchProtection'
      description: BranchProtection
    BranchProtectionList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/BranchProtection'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/BranchProtection'
            type: array
      description: BranchProtectionList
    ChangedFileList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ChangedFile'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/ChangedFile'
            type: array
      description: ChangedFileList
      headers:
        X-HasMore:
          description: True if there is another page
          schema:
            type: boolean
        X-PageCount:
          description: Total number of pages
          schema:
            format: int64
            type: integer
        X-PerPage:
          description: Commits per page
          schema:
            format: int64
            type: integer
        X-Total:
          description: Total commit count
          schema:
            format: int64
            type: integer
        X-Page:
          description: The current page
          schema:
            format: int64
            type: integer
    CombinedStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CombinedStatus'
        text/html:
          schema:
            $ref: '#/components/schemas/CombinedStatus'
      description: CombinedStatus
    Comment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
        text/html:
          schema:
            $ref: '#/components/schemas/Comment'
      description: Comment
    CommentList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Comment'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Comment'
            type: array
      description: CommentList
    Commit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Commit'
        text/html:
          schema:
            $ref: '#/components/schemas/Commit'
      description: Commit
    CommitList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Commit'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Commit'
            type: array
      description: CommitList
      headers:
        X-HasMore:
          description: True if there is another page
          schema:
            type: boolean
        X-PageCount:
          description: Total number of pages
          schema:
            format: int64
            type: integer
        X-PerPage:
          description: Commits per page
          schema:
            format: int64
            type: integer
        X-Total:
          description: Total commit count
          schema:
            format: int64
            type: integer
        X-Page:
          description: The current page
          schema:
            format: int64
            type: integer
    CommitStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommitStatus'
        text/html:
          schema:
            $ref: '#/components/schemas/CommitStatus'
      description: CommitStatus
    CommitStatusList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/CommitStatus'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/CommitStatus'
            type: array
      description: CommitStatusList
    Compare:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Compare'
        text/html:
          schema:
            $ref: '#/components/schemas/Compare'
      description: ""
    ContentsListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ContentsResponse'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/ContentsResponse'
            type: array
      description: ContentsListResponse
    ContentsResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContentsResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/ContentsResponse'
      description: ContentsResponse
    CronList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Cron'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Cron'
            type: array
      description: CronList
    DeployKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeployKey'
        text/html:
          schema:
            $ref: '#/components/schemas/DeployKey'
      description: DeployKey
    DeployKeyList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/DeployKey'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/DeployKey'
            type: array
      description: DeployKeyList
    EmailList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Email'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Email'
            type: array
      description: EmailList
    EmptyRepository:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIError'
        text/html:
          schema:
            $ref: '#/components/schemas/APIError'
      description: EmptyRepository
    FileDeleteResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileDeleteResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/FileDeleteResponse'
      description: FileDeleteResponse
    FileResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/FileResponse'
      description: FileResponse
    FilesResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FilesResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/FilesResponse'
      description: FilesResponse
    GPGKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GPGKey'
        text/html:
          schema:
            $ref: '#/components/schemas/GPGKey'
      description: GPGKey
    GPGKeyList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GPGKey'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/GPGKey'
            type: array
      description: GPGKeyList
    GeneralAPISettings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralAPISettings'
        text/html:
          schema:
            $ref: '#/components/schemas/GeneralAPISettings'
      description: GeneralAPISettings
    GeneralAttachmentSettings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralAttachmentSettings'
        text/html:
          schema:
            $ref: '#/components/schemas/GeneralAttachmentSettings'
      description: GeneralAttachmentSettings
    GeneralRepoSettings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralRepoSettings'
        text/html:
          schema:
            $ref: '#/components/schemas/GeneralRepoSettings'
      description: GeneralRepoSettings
    GeneralUISettings:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralUISettings'
        text/html:
          schema:
            $ref: '#/components/schemas/GeneralUISettings'
      description: GeneralUISettings
    GitBlobResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GitBlobResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/GitBlobResponse'
      description: GitBlobResponse
    GitHook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GitHook'
        text/html:
          schema:
            $ref: '#/components/schemas/GitHook'
      description: GitHook
    GitHookList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/GitHook'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/GitHook'
            type: array
      description: GitHookList
    GitTreeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GitTreeResponse'
        text/html:
          schema:
            $ref: '#/components/schemas/GitTreeResponse'
      description: GitTreeResponse
    GitignoreTemplateInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GitignoreTemplateInfo'
        text/html:
          schema:
            $ref: '#/components/schemas/GitignoreTemplateInfo'
      description: GitignoreTemplateInfo
    GitignoreTemplateList:
      content:
        application/json:
          schema:
            items:
              type: string
            type: array
        text/html:
          schema:
            items:
              type: string
            type: array
      description: GitignoreTemplateList
    Hook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Hook'
        text/html:
          schema:
            $ref: '#/components/schemas/Hook'
      description: Hook
    HookList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Hook'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Hook'
            type: array
      description: HookList
    Issue:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Issue'
        text/html:
          schema:
            $ref: '#/components/schemas/Issue'
      description: Issue
    IssueDeadline:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssueDeadline'
        text/html:
          schema:
            $ref: '#/components/schemas/IssueDeadline'
      description: IssueDeadline
    IssueList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Issue'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Issue'
            type: array
      description: IssueList
    IssueTemplates:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/IssueTemplate'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/IssueTemplate'
            type: array
      description: IssueTemplates
    Label:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Label'
        text/html:
          schema:
            $ref: '#/components/schemas/Label'
      description: Label
    LabelList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Label'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Label'
            type: array
      description: LabelList
    LabelTemplateInfo:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LabelTemplate'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/LabelTemplate'
            type: array
      description: LabelTemplateInfo
    LabelTemplateList:
      content:
        application/json:
          schema:
            items:
              type: string
            type: array
        text/html:
          schema:
            items:
              type: string
            type: array
      description: LabelTemplateList
    LanguageStatistics:
      content:
        application/json:
          schema:
            additionalProperties:
              format: int64
              type: integer
            type: object
        text/html:
          schema:
            additionalProperties:
              format: int64
              type: integer
            type: object
      description: LanguageStatistics
    LicenseTemplateInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LicenseTemplateInfo'
        text/html:
          schema:
            $ref: '#/components/schemas/LicenseTemplateInfo'
      description: LicenseTemplateInfo
    LicenseTemplateList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/LicensesTemplateListEntry'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/LicensesTemplateListEntry'
            type: array
      description: LicenseTemplateList
    MarkdownRender:
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
      description: MarkdownRender is a rendered markdown document
    MarkupRender:
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
      description: MarkupRender is a rendered markup document
    Milestone:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Milestone'
        text/html:
          schema:
            $ref: '#/components/schemas/Milestone'
      description: Milestone
    MilestoneList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Milestone'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Milestone'
            type: array
      description: MilestoneList
    NodeInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NodeInfo'
        text/html:
          schema:
            $ref: '#/components/schemas/NodeInfo'
      description: NodeInfo
    Note:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
        text/html:
          schema:
            $ref: '#/components/schemas/Note'
      description: Note
    NotificationCount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationCount'
        text/html:
          schema:
            $ref: '#/components/schemas/NotificationCount'
      description: Number of unread notifications
    NotificationThread:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationThread'
        text/html:
          schema:
            $ref: '#/components/schemas/NotificationThread'
      description: NotificationThread
    NotificationThreadList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/NotificationThread'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/NotificationThread'
            type: array
      description: NotificationThreadList
    OAuth2Application:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OAuth2Application'
        text/html:
          schema:
            $ref: '#/components/schemas/OAuth2Application'
      description: OAuth2Application
    OAuth2ApplicationList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/OAuth2Application'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/OAuth2Application'
            type: array
      description: OAuth2ApplicationList represents a list of OAuth2 applications.
    Organization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Organization'
        text/html:
          schema:
            $ref: '#/components/schemas/Organization'
      description: Organization
    OrganizationList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Organization'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Organization'
            type: array
      description: OrganizationList
    OrganizationPermissions:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationPermissions'
        text/html:
          schema:
            $ref: '#/components/schemas/OrganizationPermissions'
      description: OrganizationPermissions
    Package:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Package'
        text/html:
          schema:
            $ref: '#/components/schemas/Package'
      description: Package
    PackageFileList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PackageFile'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PackageFile'
            type: array
      description: PackageFileList
    PackageList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Package'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Package'
            type: array
      description: PackageList
    PublicKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PublicKey'
        text/html:
          schema:
            $ref: '#/components/schemas/PublicKey'
      description: PublicKey
    PublicKeyList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PublicKey'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PublicKey'
            type: array
      description: PublicKeyList
    PullRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PullRequest'
        text/html:
          schema:
            $ref: '#/components/schemas/PullRequest'
      description: PullRequest
    PullRequestList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PullRequest'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PullRequest'
            type: array
      description: PullRequestList
    PullReview:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PullReview'
        text/html:
          schema:
            $ref: '#/components/schemas/PullReview'
      description: PullReview
    PullReviewComment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PullReviewComment'
        text/html:
          schema:
            $ref: '#/components/schemas/PullReviewComment'
      description: PullComment
    PullReviewCommentList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PullReviewComment'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PullReviewComment'
            type: array
      description: PullCommentList
    PullReviewList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PullReview'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PullReview'
            type: array
      description: PullReviewList
    PushMirror:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PushMirror'
        text/html:
          schema:
            $ref: '#/components/schemas/PushMirror'
      description: PushMirror
    PushMirrorList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/PushMirror'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/PushMirror'
            type: array
      description: PushMirrorList
    Reaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reaction'
        text/html:
          schema:
            $ref: '#/components/schemas/Reaction'
      description: Reaction
    ReactionList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Reaction'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Reaction'
            type: array
      description: ReactionList
    Reference:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reference'
        text/html:
          schema:
            $ref: '#/components/schemas/Reference'
      description: Reference
    ReferenceList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Reference'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Reference'
            type: array
      description: ReferenceList
    RegistrationToken:
      content: {}
      description: RegistrationToken is response related to registration token
      headers:
        token:
          schema:
            type: string
    Release:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Release'
        text/html:
          schema:
            $ref: '#/components/schemas/Release'
      description: Release
    ReleaseList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Release'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Release'
            type: array
      description: ReleaseList
    RepoCollaboratorPermission:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RepoCollaboratorPermission'
        text/html:
          schema:
            $ref: '#/components/schemas/RepoCollaboratorPermission'
      description: RepoCollaboratorPermission
    RepoIssueConfig:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssueConfig'
        text/html:
          schema:
            $ref: '#/components/schemas/IssueConfig'
      description: RepoIssueConfig
    RepoIssueConfigValidation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssueConfigValidation'
        text/html:
          schema:
            $ref: '#/components/schemas/IssueConfigValidation'
      description: RepoIssueConfigValidation
    RepoNewIssuePinsAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewIssuePinsAllowed'
        text/html:
          schema:
            $ref: '#/components/schemas/NewIssuePinsAllowed'
      description: RepoNewIssuePinsAllowed
    Repository:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Repository'
        text/html:
          schema:
            $ref: '#/components/schemas/Repository'
      description: Repository
    RepositoryList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Repository'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Repository'
            type: array
      description: RepositoryList
    SearchResults:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResults'
        text/html:
          schema:
            $ref: '#/components/schemas/SearchResults'
      description: SearchResults
    Secret:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Secret'
        text/html:
          schema:
            $ref: '#/components/schemas/Secret'
      description: Secret
    SecretList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Secret'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Secret'
            type: array
      description: SecretList
    ServerVersion:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerVersion'
        text/html:
          schema:
            $ref: '#/components/schemas/ServerVersion'
      description: ServerVersion
    StopWatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StopWatch'
        text/html:
          schema:
            $ref: '#/components/schemas/StopWatch'
      description: StopWatch
    StopWatchList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/StopWatch'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/StopWatch'
            type: array
      description: StopWatchList
    StringSlice:
      content:
        application/json:
          schema:
            items:
              type: string
            type: array
        text/html:
          schema:
            items:
              type: string
            type: array
      description: StringSlice
    Tag:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
        text/html:
          schema:
            $ref: '#/components/schemas/Tag'
      description: Tag
    TagList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Tag'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Tag'
            type: array
      description: TagList
    Team:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
        text/html:
          schema:
            $ref: '#/components/schemas/Team'
      description: Team
    TeamList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Team'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/Team'
            type: array
      description: TeamList
    TimelineList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/TimelineComment'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/TimelineComment'
            type: array
      description: TimelineList
    TopicListResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/TopicResponse'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/TopicResponse'
            type: array
      description: TopicListResponse
    TopicNames:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicName'
        text/html:
          schema:
            $ref: '#/components/schemas/TopicName'
      description: TopicNames
    TrackedTime:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrackedTime'
        text/html:
          schema:
            $ref: '#/components/schemas/TrackedTime'
      description: TrackedTime
    TrackedTimeList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/TrackedTime'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/TrackedTime'
            type: array
      description: TrackedTimeList
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        text/html:
          schema:
            $ref: '#/components/schemas/User'
      description: User
    UserHeatmapData:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/UserHeatmapData'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/UserHeatmapData'
            type: array
      description: UserHeatmapData
    UserList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: UserList
    UserSettings:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/UserSettings'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/UserSettings'
            type: array
      description: UserSettings
    VariableList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ActionVariable'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/ActionVariable'
            type: array
      description: VariableList
    WatchInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WatchInfo'
        text/html:
          schema:
            $ref: '#/components/schemas/WatchInfo'
      description: WatchInfo
    WikiCommitList:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WikiCommitList'
        text/html:
          schema:
            $ref: '#/components/schemas/WikiCommitList'
      description: WikiCommitList
    WikiPage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WikiPage'
        text/html:
          schema:
            $ref: '#/components/schemas/WikiPage'
      description: WikiPage
    WikiPageList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/WikiPageMetaData'
            type: array
        text/html:
          schema:
            items:
              $ref: '#/components/schemas/WikiPageMetaData'
            type: array
      description: WikiPageList
    conflict:
      content: {}
      description: APIConflict is a conflict empty response
    empty:
      content: {}
      description: APIEmpty is an empty response
    error:
      content: {}
      description: APIError is error format response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    forbidden:
      content: {}
      description: APIForbiddenError is a forbidden error response
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    invalidTopicsError:
      content: {}
      description: APIInvalidTopicsError is error format response to invalid topics
      headers:
        invalidTopics:
          schema:
            items:
              type: string
            type: array
        message:
          schema:
            type: string
    notFound:
      content: {}
      description: APINotFound is a not found empty response
    parameterBodies:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateVariableOption'
        text/html:
          schema:
            $ref: '#/components/schemas/UpdateVariableOption'
      description: parameterBodies
    redirect:
      content: {}
      description: APIRedirect is a redirect response
    repoArchivedError:
      content: {}
      description: APIRepoArchivedError is an error that is raised when an archived
        repo should be modified
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
    string:
      content:
        application/json:
          schema:
            type: string
        text/html:
          schema:
            type: string
      description: APIString is a string response
    validationError:
      content: {}
      description: APIValidationError is error format response related to input validation
      headers:
        message:
          schema:
            type: string
        url:
          schema:
            type: string
  schemas:
    APIError:
      description: APIError is an api error with a message
      example:
        message: message
        url: url
      properties:
        message:
          type: string
          x-go-name: Message
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AccessToken:
      example:
        sha1: sha1
        name: name
        token_last_eight: token_last_eight
        id: 0
        scopes:
        - scopes
        - scopes
      properties:
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        scopes:
          items:
            type: string
          type: array
          x-go-name: Scopes
        sha1:
          type: string
          x-go-name: Token
        token_last_eight:
          type: string
          x-go-name: TokenLastEight
      title: AccessToken represents an API access token.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ActionVariable:
      description: ActionVariable return value of the query API
      example:
        data: data
        owner_id: 0
        repo_id: 6
        name: name
      properties:
        data:
          description: the value of the variable
          type: string
          x-go-name: Data
        name:
          description: the name of the variable
          type: string
          x-go-name: Name
        owner_id:
          description: the owner to which the variable belongs
          format: int64
          type: integer
          x-go-name: OwnerID
        repo_id:
          description: the repository to which the variable belongs
          format: int64
          type: integer
          x-go-name: RepoID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Activity:
      example:
        is_private: true
        ref_name: ref_name
        act_user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        repo:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        comment_id: 7
        content: content
        user_id: 2
        repo_id: 3
        act_user_id: 0
        comment:
          issue_url: issue_url
          assets:
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          updated_at: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          original_author_id: 2
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5
          pull_request_url: pull_request_url
          body: body
          original_author: original_author
          user:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        id: 9
        op_type: op_type
      properties:
        act_user:
          $ref: '#/components/schemas/User'
        act_user_id:
          format: int64
          type: integer
          x-go-name: ActUserID
        comment:
          $ref: '#/components/schemas/Comment'
        comment_id:
          format: int64
          type: integer
          x-go-name: CommentID
        content:
          type: string
          x-go-name: Content
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        is_private:
          type: boolean
          x-go-name: IsPrivate
        op_type:
          type: string
          x-go-name: OpType
        ref_name:
          type: string
          x-go-name: RefName
        repo:
          $ref: '#/components/schemas/Repository'
        repo_id:
          format: int64
          type: integer
          x-go-name: RepoID
        user_id:
          format: int64
          type: integer
          x-go-name: UserID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ActivityPub:
      description: ActivityPub type
      example:
        '@context': '@context'
      properties:
        '@context':
          type: string
          x-go-name: Context
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AddCollaboratorOption:
      description: AddCollaboratorOption options when adding a user as a collaborator
        of a repository
      example:
        permission: permission
      properties:
        permission:
          type: string
          x-go-name: Permission
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AddTimeOption:
      description: AddTimeOption options for adding time to an issue
      example:
        created: 2000-01-23T04:56:07.000+00:00
        user_name: user_name
        time: 0
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        time:
          description: time in seconds
          format: int64
          type: integer
          x-go-name: Time
        user_name:
          description: User who spent the time (optional)
          type: string
          x-go-name: User
      required:
      - time
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTag:
      description: AnnotatedTag represents an annotated tag
      example:
        tagger:
          date: date
          name: name
          email: email
        tag: tag
        message: message
        sha: sha
        url: url
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
        object:
          type: type
          sha: sha
          url: url
      properties:
        message:
          type: string
          x-go-name: Message
        object:
          $ref: '#/components/schemas/AnnotatedTagObject'
        sha:
          type: string
          x-go-name: SHA
        tag:
          type: string
          x-go-name: Tag
        tagger:
          $ref: '#/components/schemas/CommitUser'
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    AnnotatedTagObject:
      description: AnnotatedTagObject contains meta information of the tag object
      example:
        type: type
        sha: sha
        url: url
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Attachment:
      description: Attachment a generic attachment
      example:
        size: 5
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        browser_download_url: browser_download_url
        id: 1
        uuid: uuid
        download_count: 6
      properties:
        browser_download_url:
          type: string
          x-go-name: DownloadURL
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        download_count:
          format: int64
          type: integer
          x-go-name: DownloadCount
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        size:
          format: int64
          type: integer
          x-go-name: Size
        uuid:
          type: string
          x-go-name: UUID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Badge:
      description: Badge represents a user badge
      example:
        image_url: image_url
        description: description
        id: 0
        slug: slug
      properties:
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        image_url:
          type: string
          x-go-name: ImageURL
        slug:
          type: string
          x-go-name: Slug
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Branch:
      description: Branch represents a repository branch
      example:
        enable_status_check: true
        status_check_contexts:
        - status_check_contexts
        - status_check_contexts
        protected: true
        user_can_push: true
        commit:
          committer:
            name: name
            email: email
            username: username
          removed:
          - removed
          - removed
          added:
          - added
          - added
          author:
            name: name
            email: email
            username: username
          modified:
          - modified
          - modified
          id: id
          message: message
          url: url
          verification:
            reason: reason
            payload: payload
            signature: signature
            verified: true
            signer:
              name: name
              email: email
              username: username
          timestamp: 2000-01-23T04:56:07.000+00:00
        name: name
        required_approvals: 0
        effective_branch_protection_name: effective_branch_protection_name
        user_can_merge: true
      properties:
        commit:
          $ref: '#/components/schemas/PayloadCommit'
        effective_branch_protection_name:
          type: string
          x-go-name: EffectiveBranchProtectionName
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        name:
          type: string
          x-go-name: Name
        protected:
          type: boolean
          x-go-name: Protected
        required_approvals:
          format: int64
          type: integer
          x-go-name: RequiredApprovals
        status_check_contexts:
          items:
            type: string
          type: array
          x-go-name: StatusCheckContexts
        user_can_merge:
          type: boolean
          x-go-name: UserCanMerge
        user_can_push:
          type: boolean
          x-go-name: UserCanPush
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    BranchProtection:
      description: BranchProtection represents a branch protection for a repository
      example:
        merge_whitelist_teams:
        - merge_whitelist_teams
        - merge_whitelist_teams
        enable_push: true
        push_whitelist_teams:
        - push_whitelist_teams
        - push_whitelist_teams
        block_on_outdated_branch: true
        push_whitelist_deploy_keys: true
        created_at: 2000-01-23T04:56:07.000+00:00
        enable_status_check: true
        merge_whitelist_usernames:
        - merge_whitelist_usernames
        - merge_whitelist_usernames
        updated_at: 2000-01-23T04:56:07.000+00:00
        branch_name: branch_name
        required_approvals: 0
        block_on_rejected_reviews: true
        require_signed_commits: true
        enable_merge_whitelist: true
        enable_push_whitelist: true
        rule_name: rule_name
        approvals_whitelist_username:
        - approvals_whitelist_username
        - approvals_whitelist_username
        ignore_stale_approvals: true
        dismiss_stale_approvals: true
        status_check_contexts:
        - status_check_contexts
        - status_check_contexts
        push_whitelist_usernames:
        - push_whitelist_usernames
        - push_whitelist_usernames
        protected_file_patterns: protected_file_patterns
        enable_approvals_whitelist: true
        approvals_whitelist_teams:
        - approvals_whitelist_teams
        - approvals_whitelist_teams
        unprotected_file_patterns: unprotected_file_patterns
        block_on_official_review_requests: true
      properties:
        approvals_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        branch_name:
          description: "Deprecated: true"
          type: string
          x-go-name: BranchName
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        ignore_stale_approvals:
          type: boolean
          x-go-name: IgnoreStaleApprovals
        merge_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          format: int64
          type: integer
          x-go-name: RequiredApprovals
        rule_name:
          type: string
          x-go-name: RuleName
        status_check_contexts:
          items:
            type: string
          type: array
          x-go-name: StatusCheckContexts
        unprotected_file_patterns:
          type: string
          x-go-name: UnprotectedFilePatterns
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ChangeFileOperation:
      description: "ChangeFileOperation for creating, updating or deleting a file"
      example:
        path: path
        from_path: from_path
        operation: create
        sha: sha
        content: content
      properties:
        content:
          description: "new or updated file content, must be base64 encoded"
          type: string
          x-go-name: ContentBase64
        from_path:
          description: old path of the file to move
          type: string
          x-go-name: FromPath
        operation:
          description: indicates what to do with the file
          enum:
          - create
          - update
          - delete
          type: string
          x-go-name: Operation
        path:
          description: path to the existing or new file
          type: string
          x-go-name: Path
        sha:
          description: "sha is the SHA for the file that already exists, required\
            \ for update or delete"
          type: string
          x-go-name: SHA
      required:
      - operation
      - path
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ChangeFilesOptions:
      description: |-
        ChangeFilesOptions options for creating, updating or deleting multiple files
        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      example:
        committer:
          name: name
          email: email
        author:
          name: name
          email: email
        new_branch: new_branch
        files:
        - path: path
          from_path: from_path
          operation: create
          sha: sha
          content: content
        - path: path
          from_path: from_path
          operation: create
          sha: sha
          content: content
        dates:
          committer: 2000-01-23T04:56:07.000+00:00
          author: 2000-01-23T04:56:07.000+00:00
        signoff: true
        message: message
        branch: branch
      properties:
        author:
          $ref: '#/components/schemas/Identity'
        branch:
          description: "branch (optional) to base this file from. if not given, the\
            \ default branch is used"
          type: string
          x-go-name: BranchName
        committer:
          $ref: '#/components/schemas/Identity'
        dates:
          $ref: '#/components/schemas/CommitDateOptions'
        files:
          description: list of file operations
          items:
            $ref: '#/components/schemas/ChangeFileOperation'
          type: array
          x-go-name: Files
        message:
          description: "message (optional) for the commit of this file. if not supplied,\
            \ a default message will be used"
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch`
            before creating the file
          type: string
          x-go-name: NewBranchName
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of
            the commit log message.
          type: boolean
          x-go-name: Signoff
      required:
      - files
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ChangedFile:
      description: ChangedFile store information about files affected by the pull
        request
      example:
        filename: filename
        additions: 0
        deletions: 1
        html_url: html_url
        changes: 6
        previous_filename: previous_filename
        raw_url: raw_url
        contents_url: contents_url
        status: status
      properties:
        additions:
          format: int64
          type: integer
          x-go-name: Additions
        changes:
          format: int64
          type: integer
          x-go-name: Changes
        contents_url:
          type: string
          x-go-name: ContentsURL
        deletions:
          format: int64
          type: integer
          x-go-name: Deletions
        filename:
          type: string
          x-go-name: Filename
        html_url:
          type: string
          x-go-name: HTMLURL
        previous_filename:
          type: string
          x-go-name: PreviousFilename
        raw_url:
          type: string
          x-go-name: RawURL
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CombinedStatus:
      description: CombinedStatus holds the combined state of several statuses for
        a single commit
      example:
        commit_url: commit_url
        total_count: 6
        statuses:
        - creator:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          target_url: target_url
          context: context
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 0
          url: url
          status: status
        - creator:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          updated_at: 2000-01-23T04:56:07.000+00:00
          target_url: target_url
          context: context
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 0
          url: url
          status: status
        state: state
        repository:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        sha: sha
        url: url
      properties:
        commit_url:
          type: string
          x-go-name: CommitURL
        repository:
          $ref: '#/components/schemas/Repository'
        sha:
          type: string
          x-go-name: SHA
        state:
          description: |-
            CommitStatusState holds the state of a CommitStatus
            It can be "pending", "success", "error" and "failure"
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        statuses:
          items:
            $ref: '#/components/schemas/CommitStatus'
          type: array
          x-go-name: Statuses
        total_count:
          format: int64
          type: integer
          x-go-name: TotalCount
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Comment:
      description: Comment represents a comment on a commit or issue
      example:
        issue_url: issue_url
        assets:
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        html_url: html_url
        original_author_id: 2
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 5
        pull_request_url: pull_request_url
        body: body
        original_author: original_author
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        assets:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
          x-go-name: Attachments
        body:
          type: string
          x-go-name: Body
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        issue_url:
          type: string
          x-go-name: IssueURL
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          format: int64
          type: integer
          x-go-name: OriginalAuthorID
        pull_request_url:
          type: string
          x-go-name: PRURL
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Commit:
      example:
        committer:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        stats:
          total: 1
          additions: 0
          deletions: 6
        author:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        html_url: html_url
        commit:
          committer:
            date: date
            name: name
            email: email
          author:
            date: date
            name: name
            email: email
          tree:
            created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          message: message
          url: url
          verification:
            reason: reason
            payload: payload
            signature: signature
            verified: true
            signer:
              name: name
              email: email
              username: username
        files:
        - filename: filename
          status: status
        - filename: filename
          status: status
        sha: sha
        url: url
        parents:
        - created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
        - created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
      properties:
        author:
          $ref: '#/components/schemas/User'
        commit:
          $ref: '#/components/schemas/RepoCommit'
        committer:
          $ref: '#/components/schemas/User'
        created:
          format: date-time
          type: string
          x-go-name: Created
        files:
          items:
            $ref: '#/components/schemas/CommitAffectedFiles'
          type: array
          x-go-name: Files
        html_url:
          type: string
          x-go-name: HTMLURL
        parents:
          items:
            $ref: '#/components/schemas/CommitMeta'
          type: array
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        stats:
          $ref: '#/components/schemas/CommitStats'
        url:
          type: string
          x-go-name: URL
      title: Commit contains information generated from a Git commit.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitAffectedFiles:
      description: CommitAffectedFiles store information about files affected by the
        commit
      example:
        filename: filename
        status: status
      properties:
        filename:
          type: string
          x-go-name: Filename
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitDateOptions:
      description: CommitDateOptions store dates for GIT_AUTHOR_DATE and GIT_COMMITTER_DATE
      example:
        committer: 2000-01-23T04:56:07.000+00:00
        author: 2000-01-23T04:56:07.000+00:00
      properties:
        author:
          format: date-time
          type: string
          x-go-name: Author
        committer:
          format: date-time
          type: string
          x-go-name: Committer
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitMeta:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        sha: sha
        url: url
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        sha:
          type: string
          x-go-name: SHA
        url:
          type: string
          x-go-name: URL
      title: CommitMeta contains meta information of a commit in terms of API.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitStats:
      description: CommitStats is statistics for a RepoCommit
      example:
        total: 1
        additions: 0
        deletions: 6
      properties:
        additions:
          format: int64
          type: integer
          x-go-name: Additions
        deletions:
          format: int64
          type: integer
          x-go-name: Deletions
        total:
          format: int64
          type: integer
          x-go-name: Total
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitStatus:
      description: CommitStatus holds a single status of a single Commit
      example:
        creator:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        updated_at: 2000-01-23T04:56:07.000+00:00
        target_url: target_url
        context: context
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 0
        url: url
        status: status
      properties:
        context:
          type: string
          x-go-name: Context
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        creator:
          $ref: '#/components/schemas/User'
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        status:
          description: |-
            CommitStatusState holds the state of a CommitStatus
            It can be "pending", "success", "error" and "failure"
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        target_url:
          type: string
          x-go-name: TargetURL
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitStatusState:
      description: |-
        CommitStatusState holds the state of a CommitStatus
        It can be "pending", "success", "error" and "failure"
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    CommitUser:
      example:
        date: date
        name: name
        email: email
      properties:
        date:
          type: string
          x-go-name: Date
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      title: CommitUser contains information of a user in the context of a commit.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Compare:
      example:
        commits:
        - committer:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          stats:
            total: 1
            additions: 0
            deletions: 6
          author:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          commit:
            committer:
              date: date
              name: name
              email: email
            author:
              date: date
              name: name
              email: email
            tree:
              created: 2000-01-23T04:56:07.000+00:00
              sha: sha
              url: url
            message: message
            url: url
            verification:
              reason: reason
              payload: payload
              signature: signature
              verified: true
              signer:
                name: name
                email: email
                username: username
          files:
          - filename: filename
            status: status
          - filename: filename
            status: status
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        - committer:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          stats:
            total: 1
            additions: 0
            deletions: 6
          author:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          commit:
            committer:
              date: date
              name: name
              email: email
            author:
              date: date
              name: name
              email: email
            tree:
              created: 2000-01-23T04:56:07.000+00:00
              sha: sha
              url: url
            message: message
            url: url
            verification:
              reason: reason
              payload: payload
              signature: signature
              verified: true
              signer:
                name: name
                email: email
                username: username
          files:
          - filename: filename
            status: status
          - filename: filename
            status: status
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        total_commits: 0
      properties:
        commits:
          items:
            $ref: '#/components/schemas/Commit'
          type: array
          x-go-name: Commits
        total_commits:
          format: int64
          type: integer
          x-go-name: TotalCommits
      title: Compare represents a comparison between two commits.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ContentsResponse:
      description: "ContentsResponse contains information about a repo's entry's (dir,\
        \ file, symlink, submodule) metadata and content"
      example:
        _links:
          git: git
          self: self
          html: html
        submodule_git_url: submodule_git_url
        last_commit_sha: last_commit_sha
        encoding: encoding
        type: type
        sha: sha
        content: content
        url: url
        target: target
        path: path
        size: 0
        html_url: html_url
        download_url: download_url
        name: name
        git_url: git_url
      properties:
        _links:
          $ref: '#/components/schemas/FileLinksResponse'
        content:
          description: "`content` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Content
        download_url:
          type: string
          x-go-name: DownloadURL
        encoding:
          description: "`encoding` is populated when `type` is `file`, otherwise null"
          type: string
          x-go-name: Encoding
        git_url:
          type: string
          x-go-name: GitURL
        html_url:
          type: string
          x-go-name: HTMLURL
        last_commit_sha:
          type: string
          x-go-name: LastCommitSHA
        name:
          type: string
          x-go-name: Name
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        submodule_git_url:
          description: "`submodule_git_url` is populated when `type` is `submodule`,\
            \ otherwise null"
          type: string
          x-go-name: SubmoduleGitURL
        target:
          description: "`target` is populated when `type` is `symlink`, otherwise\
            \ null"
          type: string
          x-go-name: Target
        type:
          description: "`type` will be `file`, `dir`, `symlink`, or `submodule`"
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateAccessTokenOption:
      description: CreateAccessTokenOption options when create access token
      example:
        name: name
        scopes:
        - scopes
        - scopes
      properties:
        name:
          type: string
          x-go-name: Name
        scopes:
          items:
            type: string
          type: array
          x-go-name: Scopes
      required:
      - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateBranchProtectionOption:
      description: CreateBranchProtectionOption options for creating a branch protection
      example:
        block_on_rejected_reviews: true
        merge_whitelist_teams:
        - merge_whitelist_teams
        - merge_whitelist_teams
        enable_push: true
        require_signed_commits: true
        enable_merge_whitelist: true
        enable_push_whitelist: true
        push_whitelist_teams:
        - push_whitelist_teams
        - push_whitelist_teams
        block_on_outdated_branch: true
        push_whitelist_deploy_keys: true
        rule_name: rule_name
        approvals_whitelist_username:
        - approvals_whitelist_username
        - approvals_whitelist_username
        ignore_stale_approvals: true
        dismiss_stale_approvals: true
        enable_status_check: true
        status_check_contexts:
        - status_check_contexts
        - status_check_contexts
        push_whitelist_usernames:
        - push_whitelist_usernames
        - push_whitelist_usernames
        merge_whitelist_usernames:
        - merge_whitelist_usernames
        - merge_whitelist_usernames
        protected_file_patterns: protected_file_patterns
        branch_name: branch_name
        enable_approvals_whitelist: true
        approvals_whitelist_teams:
        - approvals_whitelist_teams
        - approvals_whitelist_teams
        required_approvals: 0
        unprotected_file_patterns: unprotected_file_patterns
        block_on_official_review_requests: true
      properties:
        approvals_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        branch_name:
          description: "Deprecated: true"
          type: string
          x-go-name: BranchName
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        ignore_stale_approvals:
          type: boolean
          x-go-name: IgnoreStaleApprovals
        merge_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          format: int64
          type: integer
          x-go-name: RequiredApprovals
        rule_name:
          type: string
          x-go-name: RuleName
        status_check_contexts:
          items:
            type: string
          type: array
          x-go-name: StatusCheckContexts
        unprotected_file_patterns:
          type: string
          x-go-name: UnprotectedFilePatterns
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateBranchRepoOption:
      description: CreateBranchRepoOption options when creating a branch in a repository
      example:
        old_ref_name: old_ref_name
        new_branch_name: new_branch_name
        old_branch_name: old_branch_name
      properties:
        new_branch_name:
          description: Name of the branch to create
          type: string
          x-go-name: BranchName
        old_branch_name:
          description: |-
            Deprecated: true
            Name of the old branch to create from
          type: string
          x-go-name: OldBranchName
        old_ref_name:
          description: Name of the old branch/tag/commit to create from
          type: string
          x-go-name: OldRefName
      required:
      - new_branch_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateEmailOption:
      description: CreateEmailOption options when creating email addresses
      example:
        emails:
        - emails
        - emails
      properties:
        emails:
          description: email addresses to add
          items:
            type: string
          type: array
          x-go-name: Emails
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateFileOptions:
      description: |-
        CreateFileOptions options for creating files
        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      example:
        committer:
          name: name
          email: email
        author:
          name: name
          email: email
        new_branch: new_branch
        dates:
          committer: 2000-01-23T04:56:07.000+00:00
          author: 2000-01-23T04:56:07.000+00:00
        signoff: true
        message: message
        branch: branch
        content: content
      properties:
        author:
          $ref: '#/components/schemas/Identity'
        branch:
          description: "branch (optional) to base this file from. if not given, the\
            \ default branch is used"
          type: string
          x-go-name: BranchName
        committer:
          $ref: '#/components/schemas/Identity'
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: ContentBase64
        dates:
          $ref: '#/components/schemas/CommitDateOptions'
        message:
          description: "message (optional) for the commit of this file. if not supplied,\
            \ a default message will be used"
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch`
            before creating the file
          type: string
          x-go-name: NewBranchName
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of
            the commit log message.
          type: boolean
          x-go-name: Signoff
      required:
      - content
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateForkOption:
      description: CreateForkOption options for creating a fork
      example:
        organization: organization
        name: name
      properties:
        name:
          description: name of the forked repository
          type: string
          x-go-name: Name
        organization:
          description: "organization name, if forking into an organization"
          type: string
          x-go-name: Organization
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateGPGKeyOption:
      description: CreateGPGKeyOption options create user GPG key
      example:
        armored_public_key: armored_public_key
        armored_signature: armored_signature
      properties:
        armored_public_key:
          description: An armored GPG key to add
          type: string
          x-go-name: ArmoredKey
        armored_signature:
          type: string
          x-go-name: Signature
      required:
      - armored_public_key
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateHookOption:
      description: CreateHookOption options when create a hook
      example:
        branch_filter: branch_filter
        active: false
        type: dingtalk
        config:
          key: config
        authorization_header: authorization_header
        events:
        - events
        - events
      properties:
        active:
          default: false
          type: boolean
          x-go-name: Active
        authorization_header:
          type: string
          x-go-name: AuthorizationHeader
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          additionalProperties:
            type: string
          description: |-
            CreateHookOptionConfig has all config options in it
            required are "content_type" and "url" Required
          type: object
          x-go-package: code.gitea.io/gitea/modules/structs
        events:
          items:
            type: string
          type: array
          x-go-name: Events
        type:
          enum:
          - dingtalk
          - discord
          - gitea
          - gogs
          - msteams
          - slack
          - telegram
          - feishu
          - wechatwork
          - packagist
          type: string
          x-go-name: Type
      required:
      - config
      - type
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateHookOptionConfig:
      additionalProperties:
        type: string
      description: |-
        CreateHookOptionConfig has all config options in it
        required are "content_type" and "url" Required
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueCommentOption:
      description: CreateIssueCommentOption options for creating a comment on an issue
      example:
        body: body
      properties:
        body:
          type: string
          x-go-name: Body
      required:
      - body
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateIssueOption:
      description: CreateIssueOption options to create one issue
      example:
        ref: ref
        milestone: 6
        due_date: 2000-01-23T04:56:07.000+00:00
        assignees:
        - assignees
        - assignees
        closed: true
        assignee: assignee
        body: body
        title: title
        labels:
        - 0
        - 0
      properties:
        assignee:
          description: deprecated
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed:
          type: boolean
          x-go-name: Closed
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        labels:
          description: list of label ids
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          description: milestone id
          format: int64
          type: integer
          x-go-name: Milestone
        ref:
          type: string
          x-go-name: Ref
        title:
          type: string
          x-go-name: Title
      required:
      - title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateKeyOption:
      description: CreateKeyOption options when creating a key
      example:
        read_only: true
        title: title
        key: key
      properties:
        key:
          description: An armored SSH key to add
          type: string
          x-go-name: Key
        read_only:
          description: Describe if the key has only read access or read/write
          type: boolean
          x-go-name: ReadOnly
        title:
          description: Title of the key to add
          type: string
          x-go-name: Title
      required:
      - key
      - title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateLabelOption:
      description: CreateLabelOption options for creating a label
      example:
        color: '#00aabb'
        is_archived: false
        name: name
        description: description
        exclusive: false
      properties:
        color:
          example: '#00aabb'
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        exclusive:
          example: false
          type: boolean
          x-go-name: Exclusive
        is_archived:
          example: false
          type: boolean
          x-go-name: IsArchived
        name:
          type: string
          x-go-name: Name
      required:
      - color
      - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateMilestoneOption:
      description: CreateMilestoneOption options for creating a milestone
      example:
        description: description
        state: open
        title: title
        due_on: 2000-01-23T04:56:07.000+00:00
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        state:
          enum:
          - open
          - closed
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOAuth2ApplicationOptions:
      description: CreateOAuth2ApplicationOptions holds options to create an oauth2
        application
      example:
        name: name
        confidential_client: true
        redirect_uris:
        - redirect_uris
        - redirect_uris
      properties:
        confidential_client:
          type: boolean
          x-go-name: ConfidentialClient
        name:
          type: string
          x-go-name: Name
        redirect_uris:
          items:
            type: string
          type: array
          x-go-name: RedirectURIs
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOrUpdateSecretOption:
      description: CreateOrUpdateSecretOption options when creating or updating secret
      example:
        data: data
      properties:
        data:
          description: Data of the secret to update
          type: string
          x-go-name: Data
      required:
      - data
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateOrgOption:
      description: CreateOrgOption options for creating an organization
      example:
        website: website
        full_name: full_name
        repo_admin_change_team_access: true
        visibility: public
        description: description
        location: location
        email: email
        username: username
      properties:
        description:
          type: string
          x-go-name: Description
        email:
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          type: string
          x-go-name: UserName
        visibility:
          description: "possible values are `public` (default), `limited` or `private`"
          enum:
          - public
          - limited
          - private
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      required:
      - username
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullRequestOption:
      description: CreatePullRequestOption options when creating a pull request
      example:
        head: head
        milestone: 6
        due_date: 2000-01-23T04:56:07.000+00:00
        assignees:
        - assignees
        - assignees
        assignee: assignee
        body: body
        title: title
        base: base
        labels:
        - 0
        - 0
      properties:
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        base:
          type: string
          x-go-name: Base
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        head:
          type: string
          x-go-name: Head
        labels:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullReviewComment:
      description: CreatePullReviewComment represent a review comment for creation
        api
      example:
        path: path
        new_position: 0
        old_position: 6
        body: body
      properties:
        body:
          type: string
          x-go-name: Body
        new_position:
          description: if comment to new file line or 0
          format: int64
          type: integer
          x-go-name: NewLineNum
        old_position:
          description: if comment to old file line or 0
          format: int64
          type: integer
          x-go-name: OldLineNum
        path:
          description: the tree path
          type: string
          x-go-name: Path
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePullReviewOptions:
      description: CreatePullReviewOptions are options to create a pull review
      example:
        comments:
        - path: path
          new_position: 0
          old_position: 6
          body: body
        - path: path
          new_position: 0
          old_position: 6
          body: body
        body: body
        event: event
        commit_id: commit_id
      properties:
        body:
          type: string
          x-go-name: Body
        comments:
          items:
            $ref: '#/components/schemas/CreatePullReviewComment'
          type: array
          x-go-name: Comments
        commit_id:
          type: string
          x-go-name: CommitID
        event:
          description: ReviewStateType review state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreatePushMirrorOption:
      example:
        remote_username: remote_username
        sync_on_commit: true
        interval: interval
        remote_address: remote_address
        remote_password: remote_password
      properties:
        interval:
          type: string
          x-go-name: Interval
        remote_address:
          type: string
          x-go-name: RemoteAddress
        remote_password:
          type: string
          x-go-name: RemotePassword
        remote_username:
          type: string
          x-go-name: RemoteUsername
        sync_on_commit:
          type: boolean
          x-go-name: SyncOnCommit
      title: CreatePushMirrorOption represents need information to create a push mirror
        of a repository.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateReleaseOption:
      description: CreateReleaseOption options when creating a release
      example:
        prerelease: true
        tag_name: tag_name
        draft: true
        target_commitish: target_commitish
        name: name
        body: body
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      required:
      - tag_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateRepoOption:
      description: CreateRepoOption options when creating repository
      example:
        auto_init: true
        template: true
        issue_labels: issue_labels
        license: license
        private: true
        trust_model: default
        gitignores: gitignores
        name: name
        description: description
        default_branch: default_branch
        readme: readme
        object_format_name: sha1
      properties:
        auto_init:
          description: Whether the repository should be auto-initialized?
          type: boolean
          x-go-name: AutoInit
        default_branch:
          description: DefaultBranch of the repository (used when initializes and
            in template)
          type: string
          x-go-name: DefaultBranch
        description:
          description: Description of the repository to create
          type: string
          x-go-name: Description
        gitignores:
          description: Gitignores to use
          type: string
          x-go-name: Gitignores
        issue_labels:
          description: Label-Set to use
          type: string
          x-go-name: IssueLabels
        license:
          description: License to use
          type: string
          x-go-name: License
        name:
          description: Name of the repository to create
          type: string
          x-go-name: Name
        object_format_name:
          description: ObjectFormatName of the underlying git repository
          enum:
          - sha1
          - sha256
          type: string
          x-go-name: ObjectFormatName
        private:
          description: Whether the repository is private
          type: boolean
          x-go-name: Private
        readme:
          description: Readme of the repository to create
          type: string
          x-go-name: Readme
        template:
          description: Whether the repository is template
          type: boolean
          x-go-name: Template
        trust_model:
          description: TrustModel of the repository
          enum:
          - default
          - collaborator
          - committer
          - collaboratorcommitter
          type: string
          x-go-name: TrustModel
      required:
      - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateStatusOption:
      description: CreateStatusOption holds the information needed to create a new
        CommitStatus for a Commit
      example:
        target_url: target_url
        context: context
        description: description
        state: state
      properties:
        context:
          type: string
          x-go-name: Context
        description:
          type: string
          x-go-name: Description
        state:
          description: |-
            CommitStatusState holds the state of a CommitStatus
            It can be "pending", "success", "error" and "failure"
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        target_url:
          type: string
          x-go-name: TargetURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateTagOption:
      description: CreateTagOption options when creating a tag
      example:
        tag_name: tag_name
        message: message
        target: target
      properties:
        message:
          type: string
          x-go-name: Message
        tag_name:
          type: string
          x-go-name: TagName
        target:
          type: string
          x-go-name: Target
      required:
      - tag_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateTeamOption:
      description: CreateTeamOption options for creating a team
      example:
        can_create_org_repo: true
        units_map: "{\"repo.actions\",\"repo.packages\",\"repo.code\":\"read\",\"\
          repo.issues\":\"write\",\"repo.ext_issues\":\"none\",\"repo.wiki\":\"admin\"\
          ,\"repo.pulls\":\"owner\",\"repo.releases\":\"none\",\"repo.projects\":\"\
          none\",\"repo.ext_wiki\":\"none\"}"
        name: name
        description: description
        permission: read
        includes_all_repositories: true
        units:
        - repo.actions
        - repo.code
        - repo.issues
        - repo.ext_issues
        - repo.wiki
        - repo.ext_wiki
        - repo.pulls
        - repo.releases
        - repo.projects
        - repo.ext_wiki
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        permission:
          enum:
          - read
          - write
          - admin
          type: string
          x-go-name: Permission
        units:
          example:
          - repo.actions
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.ext_wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
        units_map:
          additionalProperties:
            type: string
          example: "{\"repo.actions\",\"repo.packages\",\"repo.code\":\"read\",\"\
            repo.issues\":\"write\",\"repo.ext_issues\":\"none\",\"repo.wiki\":\"\
            admin\",\"repo.pulls\":\"owner\",\"repo.releases\":\"none\",\"repo.projects\"\
            :\"none\",\"repo.ext_wiki\":\"none\"}"
          type: object
          x-go-name: UnitsMap
      required:
      - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateUserOption:
      description: CreateUserOption create user options
      example:
        must_change_password: true
        password: password
        full_name: full_name
        login_name: login_name
        visibility: visibility
        restricted: true
        created_at: 2000-01-23T04:56:07.000+00:00
        send_notify: true
        source_id: 0
        email: email
        username: username
      properties:
        created_at:
          description: |-
            For explicitly setting the user creation timestamp. Useful when users are
            migrated from other systems. When omitted, the user's creation timestamp
            will be set to "now".
          format: date-time
          type: string
          x-go-name: Created
        email:
          format: email
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        login_name:
          type: string
          x-go-name: LoginName
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        restricted:
          type: boolean
          x-go-name: Restricted
        send_notify:
          type: boolean
          x-go-name: SendNotify
        source_id:
          format: int64
          type: integer
          x-go-name: SourceID
        username:
          type: string
          x-go-name: Username
        visibility:
          type: string
          x-go-name: Visibility
      required:
      - email
      - username
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateVariableOption:
      description: CreateVariableOption the option when creating variable
      example:
        value: value
      properties:
        value:
          description: Value of the variable to create
          type: string
          x-go-name: Value
      required:
      - value
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    CreateWikiPageOptions:
      description: CreateWikiPageOptions form for creating wiki
      example:
        content_base64: content_base64
        message: message
        title: title
      properties:
        content_base64:
          description: content must be base64 encoded
          type: string
          x-go-name: ContentBase64
        message:
          description: optional commit message summarizing the change
          type: string
          x-go-name: Message
        title:
          description: page title. leave empty to keep unchanged
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Cron:
      description: Cron represents a Cron task
      example:
        next: 2000-01-23T04:56:07.000+00:00
        schedule: schedule
        exec_times: 0
        prev: 2000-01-23T04:56:07.000+00:00
        name: name
      properties:
        exec_times:
          format: int64
          type: integer
          x-go-name: ExecTimes
        name:
          type: string
          x-go-name: Name
        next:
          format: date-time
          type: string
          x-go-name: Next
        prev:
          format: date-time
          type: string
          x-go-name: Prev
        schedule:
          type: string
          x-go-name: Schedule
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteEmailOption:
      description: DeleteEmailOption options when deleting email addresses
      example:
        emails:
        - emails
        - emails
      properties:
        emails:
          description: email addresses to delete
          items:
            type: string
          type: array
          x-go-name: Emails
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeleteFileOptions:
      description: |-
        DeleteFileOptions options for deleting files (used for other File structs below)
        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      example:
        committer:
          name: name
          email: email
        author:
          name: name
          email: email
        new_branch: new_branch
        dates:
          committer: 2000-01-23T04:56:07.000+00:00
          author: 2000-01-23T04:56:07.000+00:00
        signoff: true
        message: message
        branch: branch
        sha: sha
      properties:
        author:
          $ref: '#/components/schemas/Identity'
        branch:
          description: "branch (optional) to base this file from. if not given, the\
            \ default branch is used"
          type: string
          x-go-name: BranchName
        committer:
          $ref: '#/components/schemas/Identity'
        dates:
          $ref: '#/components/schemas/CommitDateOptions'
        message:
          description: "message (optional) for the commit of this file. if not supplied,\
            \ a default message will be used"
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch`
            before creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of
            the commit log message.
          type: boolean
          x-go-name: Signoff
      required:
      - sha
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DeployKey:
      description: DeployKey a deploy key
      example:
        key_id: 6
        read_only: true
        fingerprint: fingerprint
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        repository:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        title: title
        key: key
        url: url
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          format: int64
          type: integer
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_id:
          format: int64
          type: integer
          x-go-name: KeyID
        read_only:
          type: boolean
          x-go-name: ReadOnly
        repository:
          $ref: '#/components/schemas/Repository'
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    DismissPullReviewOptions:
      description: DismissPullReviewOptions are options to dismiss a pull review
      example:
        message: message
        priors: true
      properties:
        message:
          type: string
          x-go-name: Message
        priors:
          type: boolean
          x-go-name: Priors
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditAttachmentOptions:
      description: EditAttachmentOptions options for editing attachments
      example:
        name: name
      properties:
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditBranchProtectionOption:
      description: EditBranchProtectionOption options for editing a branch protection
      example:
        block_on_rejected_reviews: true
        merge_whitelist_teams:
        - merge_whitelist_teams
        - merge_whitelist_teams
        enable_push: true
        require_signed_commits: true
        enable_merge_whitelist: true
        enable_push_whitelist: true
        push_whitelist_teams:
        - push_whitelist_teams
        - push_whitelist_teams
        block_on_outdated_branch: true
        push_whitelist_deploy_keys: true
        approvals_whitelist_username:
        - approvals_whitelist_username
        - approvals_whitelist_username
        ignore_stale_approvals: true
        dismiss_stale_approvals: true
        enable_status_check: true
        status_check_contexts:
        - status_check_contexts
        - status_check_contexts
        push_whitelist_usernames:
        - push_whitelist_usernames
        - push_whitelist_usernames
        merge_whitelist_usernames:
        - merge_whitelist_usernames
        - merge_whitelist_usernames
        protected_file_patterns: protected_file_patterns
        enable_approvals_whitelist: true
        approvals_whitelist_teams:
        - approvals_whitelist_teams
        - approvals_whitelist_teams
        required_approvals: 0
        unprotected_file_patterns: unprotected_file_patterns
        block_on_official_review_requests: true
      properties:
        approvals_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistTeams
        approvals_whitelist_username:
          items:
            type: string
          type: array
          x-go-name: ApprovalsWhitelistUsernames
        block_on_official_review_requests:
          type: boolean
          x-go-name: BlockOnOfficialReviewRequests
        block_on_outdated_branch:
          type: boolean
          x-go-name: BlockOnOutdatedBranch
        block_on_rejected_reviews:
          type: boolean
          x-go-name: BlockOnRejectedReviews
        dismiss_stale_approvals:
          type: boolean
          x-go-name: DismissStaleApprovals
        enable_approvals_whitelist:
          type: boolean
          x-go-name: EnableApprovalsWhitelist
        enable_merge_whitelist:
          type: boolean
          x-go-name: EnableMergeWhitelist
        enable_push:
          type: boolean
          x-go-name: EnablePush
        enable_push_whitelist:
          type: boolean
          x-go-name: EnablePushWhitelist
        enable_status_check:
          type: boolean
          x-go-name: EnableStatusCheck
        ignore_stale_approvals:
          type: boolean
          x-go-name: IgnoreStaleApprovals
        merge_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistTeams
        merge_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: MergeWhitelistUsernames
        protected_file_patterns:
          type: string
          x-go-name: ProtectedFilePatterns
        push_whitelist_deploy_keys:
          type: boolean
          x-go-name: PushWhitelistDeployKeys
        push_whitelist_teams:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistTeams
        push_whitelist_usernames:
          items:
            type: string
          type: array
          x-go-name: PushWhitelistUsernames
        require_signed_commits:
          type: boolean
          x-go-name: RequireSignedCommits
        required_approvals:
          format: int64
          type: integer
          x-go-name: RequiredApprovals
        status_check_contexts:
          items:
            type: string
          type: array
          x-go-name: StatusCheckContexts
        unprotected_file_patterns:
          type: string
          x-go-name: UnprotectedFilePatterns
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditDeadlineOption:
      description: EditDeadlineOption options for creating a deadline
      example:
        due_date: 2000-01-23T04:56:07.000+00:00
      properties:
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
      required:
      - due_date
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditGitHookOption:
      description: EditGitHookOption options when modifying one Git hook
      example:
        content: content
      properties:
        content:
          type: string
          x-go-name: Content
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditHookOption:
      description: EditHookOption options when modify one hook
      example:
        branch_filter: branch_filter
        active: true
        config:
          key: config
        authorization_header: authorization_header
        events:
        - events
        - events
      properties:
        active:
          type: boolean
          x-go-name: Active
        authorization_header:
          type: string
          x-go-name: AuthorizationHeader
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        events:
          items:
            type: string
          type: array
          x-go-name: Events
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueCommentOption:
      description: EditIssueCommentOption options for editing a comment
      example:
        body: body
      properties:
        body:
          type: string
          x-go-name: Body
      required:
      - body
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditIssueOption:
      description: EditIssueOption options for editing an issue
      example:
        unset_due_date: true
        ref: ref
        milestone: 0
        due_date: 2000-01-23T04:56:07.000+00:00
        assignees:
        - assignees
        - assignees
        assignee: assignee
        state: state
        body: body
        title: title
      properties:
        assignee:
          description: deprecated
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        ref:
          type: string
          x-go-name: Ref
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
        unset_due_date:
          type: boolean
          x-go-name: RemoveDeadline
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditLabelOption:
      description: EditLabelOption options for editing a label
      example:
        color: '#00aabb'
        is_archived: false
        name: name
        description: description
        exclusive: false
      properties:
        color:
          example: '#00aabb'
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        exclusive:
          example: false
          type: boolean
          x-go-name: Exclusive
        is_archived:
          example: false
          type: boolean
          x-go-name: IsArchived
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditMilestoneOption:
      description: EditMilestoneOption options for editing a milestone
      example:
        description: description
        state: state
        title: title
        due_on: 2000-01-23T04:56:07.000+00:00
      properties:
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditOrgOption:
      description: EditOrgOption options for editing an organization
      example:
        website: website
        full_name: full_name
        repo_admin_change_team_access: true
        visibility: public
        description: description
        location: location
        email: email
      properties:
        description:
          type: string
          x-go-name: Description
        email:
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        visibility:
          description: "possible values are `public`, `limited` or `private`"
          enum:
          - public
          - limited
          - private
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditPullRequestOption:
      description: EditPullRequestOption options when modify pull request
      example:
        unset_due_date: true
        milestone: 6
        allow_maintainer_edit: true
        due_date: 2000-01-23T04:56:07.000+00:00
        assignees:
        - assignees
        - assignees
        assignee: assignee
        state: state
        body: body
        title: title
        base: base
        labels:
        - 0
        - 0
      properties:
        allow_maintainer_edit:
          type: boolean
          x-go-name: AllowMaintainerEdit
        assignee:
          type: string
          x-go-name: Assignee
        assignees:
          items:
            type: string
          type: array
          x-go-name: Assignees
        base:
          type: string
          x-go-name: Base
        body:
          type: string
          x-go-name: Body
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        labels:
          items:
            format: int64
            type: integer
          type: array
          x-go-name: Labels
        milestone:
          format: int64
          type: integer
          x-go-name: Milestone
        state:
          type: string
          x-go-name: State
        title:
          type: string
          x-go-name: Title
        unset_due_date:
          type: boolean
          x-go-name: RemoveDeadline
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditReactionOption:
      description: EditReactionOption contain the reaction type
      example:
        content: content
      properties:
        content:
          type: string
          x-go-name: Reaction
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditReleaseOption:
      description: EditReleaseOption options when editing a release
      example:
        prerelease: true
        tag_name: tag_name
        draft: true
        target_commitish: target_commitish
        name: name
        body: body
      properties:
        body:
          type: string
          x-go-name: Note
        draft:
          type: boolean
          x-go-name: IsDraft
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        tag_name:
          type: string
          x-go-name: TagName
        target_commitish:
          type: string
          x-go-name: Target
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditRepoOption:
      description: EditRepoOption options when editing a repository's properties
      example:
        ignore_whitespace_conflicts: true
        template: true
        allow_manual_merge: true
        private: true
        has_packages: true
        has_releases: true
        default_allow_maintainer_edit: true
        description: description
        allow_rebase_update: true
        has_pull_requests: true
        has_projects: true
        archived: true
        autodetect_manual_merge: true
        has_actions: true
        has_wiki: true
        allow_merge_commits: true
        allow_rebase_explicit: true
        projects_mode: projects_mode
        external_tracker:
          external_tracker_regexp_pattern: external_tracker_regexp_pattern
          external_tracker_style: external_tracker_style
          external_tracker_url: external_tracker_url
          external_tracker_format: external_tracker_format
        mirror_interval: mirror_interval
        enable_prune: true
        allow_squash_merge: true
        external_wiki:
          external_wiki_url: external_wiki_url
        website: website
        internal_tracker:
          enable_issue_dependencies: true
          allow_only_contributors_to_track_time: true
          enable_time_tracker: true
        default_delete_branch_after_merge: true
        has_issues: true
        allow_rebase: true
        default_merge_style: default_merge_style
        allow_fast_forward_only_merge: true
        name: name
        default_branch: default_branch
      properties:
        allow_fast_forward_only_merge:
          description: "either `true` to allow fast-forward-only merging pull requests,\
            \ or `false` to prevent fast-forward-only merging."
          type: boolean
          x-go-name: AllowFastForwardOnly
        allow_manual_merge:
          description: "either `true` to allow mark pr as merged manually, or `false`\
            \ to prevent it."
          type: boolean
          x-go-name: AllowManualMerge
        allow_merge_commits:
          description: "either `true` to allow merging pull requests with a merge\
            \ commit, or `false` to prevent merging pull requests with merge commits."
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          description: "either `true` to allow rebase-merging pull requests, or `false`\
            \ to prevent rebase-merging."
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          description: "either `true` to allow rebase with explicit merge commits\
            \ (--no-ff), or `false` to prevent rebase with explicit merge commits."
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_rebase_update:
          description: "either `true` to allow updating pull request branch by rebase,\
            \ or `false` to prevent it."
          type: boolean
          x-go-name: AllowRebaseUpdate
        allow_squash_merge:
          description: "either `true` to allow squash-merging pull requests, or `false`\
            \ to prevent squash-merging."
          type: boolean
          x-go-name: AllowSquash
        archived:
          description: set to `true` to archive this repository.
          type: boolean
          x-go-name: Archived
        autodetect_manual_merge:
          description: "either `true` to enable AutodetectManualMerge, or `false`\
            \ to prevent it. Note: In some special cases, misjudgments can occur."
          type: boolean
          x-go-name: AutodetectManualMerge
        default_allow_maintainer_edit:
          description: set to `true` to allow edits from maintainers by default
          type: boolean
          x-go-name: DefaultAllowMaintainerEdit
        default_branch:
          description: sets the default branch for this repository.
          type: string
          x-go-name: DefaultBranch
        default_delete_branch_after_merge:
          description: set to `true` to delete pr branch after merge by default
          type: boolean
          x-go-name: DefaultDeleteBranchAfterMerge
        default_merge_style:
          description: "set to a merge style to be used by this repository: \"merge\"\
            , \"rebase\", \"rebase-merge\", \"squash\", or \"fast-forward-only\"."
          type: string
          x-go-name: DefaultMergeStyle
        description:
          description: a short description of the repository.
          type: string
          x-go-name: Description
        enable_prune:
          description: enable prune - remove obsolete remote-tracking references when
            mirroring
          type: boolean
          x-go-name: EnablePrune
        external_tracker:
          $ref: '#/components/schemas/ExternalTracker'
        external_wiki:
          $ref: '#/components/schemas/ExternalWiki'
        has_actions:
          description: "either `true` to enable actions unit, or `false` to disable\
            \ them."
          type: boolean
          x-go-name: HasActions
        has_issues:
          description: either `true` to enable issues for this repository or `false`
            to disable them.
          type: boolean
          x-go-name: HasIssues
        has_packages:
          description: "either `true` to enable packages unit, or `false` to disable\
            \ them."
          type: boolean
          x-go-name: HasPackages
        has_projects:
          description: "either `true` to enable project unit, or `false` to disable\
            \ them."
          type: boolean
          x-go-name: HasProjects
        has_pull_requests:
          description: "either `true` to allow pull requests, or `false` to prevent\
            \ pull request."
          type: boolean
          x-go-name: HasPullRequests
        has_releases:
          description: "either `true` to enable releases unit, or `false` to disable\
            \ them."
          type: boolean
          x-go-name: HasReleases
        has_wiki:
          description: either `true` to enable the wiki for this repository or `false`
            to disable it.
          type: boolean
          x-go-name: HasWiki
        ignore_whitespace_conflicts:
          description: "either `true` to ignore whitespace for conflicts, or `false`\
            \ to not ignore whitespace."
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        internal_tracker:
          $ref: '#/components/schemas/InternalTracker'
        mirror_interval:
          description: set to a string like `8h30m0s` to set the mirror interval time
          type: string
          x-go-name: MirrorInterval
        name:
          description: name of the repository
          type: string
          x-go-name: Name
        private:
          description: |-
            either `true` to make the repository private or `false` to make it public.
            Note: you will get a 422 error if the organization restricts changing repository visibility to organization
            owners and a non-owner tries to change the value of private.
          type: boolean
          x-go-name: Private
        projects_mode:
          description: "`repo` to only allow repo-level projects, `owner` to only\
            \ allow owner projects, `all` to allow both."
          type: string
          x-go-name: ProjectsMode
        template:
          description: either `true` to make this repository a template or `false`
            to make it a normal repository
          type: boolean
          x-go-name: Template
        website:
          description: a URL with more information about the repository.
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditTeamOption:
      description: EditTeamOption options for editing a team
      example:
        can_create_org_repo: true
        units_map:
          repo.code: read
          repo.ext_issues: none
          repo.ext_wiki: none
          repo.issues: write
          repo.projects: none
          repo.pulls: owner
          repo.releases: none
          repo.wiki: admin
        name: name
        description: description
        permission: read
        includes_all_repositories: true
        units:
        - repo.code
        - repo.issues
        - repo.ext_issues
        - repo.wiki
        - repo.pulls
        - repo.releases
        - repo.projects
        - repo.ext_wiki
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        permission:
          enum:
          - read
          - write
          - admin
          type: string
          x-go-name: Permission
        units:
          example:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
        units_map:
          additionalProperties:
            type: string
          example:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          type: object
          x-go-name: UnitsMap
      required:
      - name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    EditUserOption:
      description: EditUserOption edit user options
      example:
        website: website
        visibility: visibility
        active: true
        admin: true
        description: description
        max_repo_creation: 0
        must_change_password: true
        password: password
        full_name: full_name
        login_name: login_name
        restricted: true
        location: location
        allow_create_organization: true
        prohibit_login: true
        source_id: 6
        allow_import_local: true
        email: email
        allow_git_hook: true
      properties:
        active:
          type: boolean
          x-go-name: Active
        admin:
          type: boolean
          x-go-name: Admin
        allow_create_organization:
          type: boolean
          x-go-name: AllowCreateOrganization
        allow_git_hook:
          type: boolean
          x-go-name: AllowGitHook
        allow_import_local:
          type: boolean
          x-go-name: AllowImportLocal
        description:
          type: string
          x-go-name: Description
        email:
          format: email
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        location:
          type: string
          x-go-name: Location
        login_name:
          type: string
          x-go-name: LoginName
        max_repo_creation:
          format: int64
          type: integer
          x-go-name: MaxRepoCreation
        must_change_password:
          type: boolean
          x-go-name: MustChangePassword
        password:
          type: string
          x-go-name: Password
        prohibit_login:
          type: boolean
          x-go-name: ProhibitLogin
        restricted:
          type: boolean
          x-go-name: Restricted
        source_id:
          format: int64
          type: integer
          x-go-name: SourceID
        visibility:
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      required:
      - login_name
      - source_id
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Email:
      description: Email an email address belonging to a user
      example:
        user_id: 0
        verified: true
        email: email
        primary: true
        username: username
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        primary:
          type: boolean
          x-go-name: Primary
        user_id:
          format: int64
          type: integer
          x-go-name: UserID
        username:
          type: string
          x-go-name: UserName
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ExternalTracker:
      description: ExternalTracker represents settings for external tracker
      example:
        external_tracker_regexp_pattern: external_tracker_regexp_pattern
        external_tracker_style: external_tracker_style
        external_tracker_url: external_tracker_url
        external_tracker_format: external_tracker_format
      properties:
        external_tracker_format:
          description: "External Issue Tracker URL Format. Use the placeholders {user},\
            \ {repo} and {index} for the username, repository name and issue index."
          type: string
          x-go-name: ExternalTrackerFormat
        external_tracker_regexp_pattern:
          description: External Issue Tracker issue regular expression
          type: string
          x-go-name: ExternalTrackerRegexpPattern
        external_tracker_style:
          description: "External Issue Tracker Number Format, either `numeric`, `alphanumeric`,\
            \ or `regexp`"
          type: string
          x-go-name: ExternalTrackerStyle
        external_tracker_url:
          description: URL of external issue tracker.
          type: string
          x-go-name: ExternalTrackerURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ExternalWiki:
      description: ExternalWiki represents setting for external wiki
      example:
        external_wiki_url: external_wiki_url
      properties:
        external_wiki_url:
          description: URL of external wiki.
          type: string
          x-go-name: ExternalWikiURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileCommitResponse:
      example:
        committer:
          date: date
          name: name
          email: email
        author:
          date: date
          name: name
          email: email
        created: 2000-01-23T04:56:07.000+00:00
        html_url: html_url
        tree:
          created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
        message: message
        sha: sha
        url: url
        parents:
        - created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
        - created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
      properties:
        author:
          $ref: '#/components/schemas/CommitUser'
        committer:
          $ref: '#/components/schemas/CommitUser'
        created:
          format: date-time
          type: string
          x-go-name: Created
        html_url:
          type: string
          x-go-name: HTMLURL
        message:
          type: string
          x-go-name: Message
        parents:
          items:
            $ref: '#/components/schemas/CommitMeta'
          type: array
          x-go-name: Parents
        sha:
          type: string
          x-go-name: SHA
        tree:
          $ref: '#/components/schemas/CommitMeta'
        url:
          type: string
          x-go-name: URL
      title: FileCommitResponse contains information generated from a Git commit for
        a repo's file.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileDeleteResponse:
      description: FileDeleteResponse contains information about a repo's file that
        was deleted
      example:
        commit:
          committer:
            date: date
            name: name
            email: email
          author:
            date: date
            name: name
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          tree:
            created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          message: message
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        content: "{}"
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
      properties:
        commit:
          $ref: '#/components/schemas/FileCommitResponse'
        content:
          type: object
          x-go-name: Content
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileLinksResponse:
      description: FileLinksResponse contains the links for a repo's file
      example:
        git: git
        self: self
        html: html
      properties:
        git:
          type: string
          x-go-name: GitURL
        html:
          type: string
          x-go-name: HTMLURL
        self:
          type: string
          x-go-name: Self
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FileResponse:
      description: FileResponse contains information about a repo's file
      example:
        commit:
          committer:
            date: date
            name: name
            email: email
          author:
            date: date
            name: name
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          tree:
            created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          message: message
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        content:
          _links:
            git: git
            self: self
            html: html
          submodule_git_url: submodule_git_url
          last_commit_sha: last_commit_sha
          encoding: encoding
          type: type
          sha: sha
          content: content
          url: url
          target: target
          path: path
          size: 0
          html_url: html_url
          download_url: download_url
          name: name
          git_url: git_url
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
      properties:
        commit:
          $ref: '#/components/schemas/FileCommitResponse'
        content:
          $ref: '#/components/schemas/ContentsResponse'
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    FilesResponse:
      description: FilesResponse contains information about multiple files from a
        repo
      example:
        commit:
          committer:
            date: date
            name: name
            email: email
          author:
            date: date
            name: name
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          tree:
            created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          message: message
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        files:
        - _links:
            git: git
            self: self
            html: html
          submodule_git_url: submodule_git_url
          last_commit_sha: last_commit_sha
          encoding: encoding
          type: type
          sha: sha
          content: content
          url: url
          target: target
          path: path
          size: 0
          html_url: html_url
          download_url: download_url
          name: name
          git_url: git_url
        - _links:
            git: git
            self: self
            html: html
          submodule_git_url: submodule_git_url
          last_commit_sha: last_commit_sha
          encoding: encoding
          type: type
          sha: sha
          content: content
          url: url
          target: target
          path: path
          size: 0
          html_url: html_url
          download_url: download_url
          name: name
          git_url: git_url
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
      properties:
        commit:
          $ref: '#/components/schemas/FileCommitResponse'
        files:
          items:
            $ref: '#/components/schemas/ContentsResponse'
          type: array
          x-go-name: Files
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKey:
      description: GPGKey a user GPG key to sign commit and tag in repository
      example:
        public_key: public_key
        key_id: key_id
        verified: true
        created_at: 2000-01-23T04:56:07.000+00:00
        emails:
        - verified: true
          email: email
        - verified: true
          email: email
        can_certify: true
        expires_at: 2000-01-23T04:56:07.000+00:00
        can_encrypt_comms: true
        can_encrypt_storage: true
        can_sign: true
        id: 0
        subkeys:
        - null
        - null
        primary_key_id: primary_key_id
      properties:
        can_certify:
          type: boolean
          x-go-name: CanCertify
        can_encrypt_comms:
          type: boolean
          x-go-name: CanEncryptComms
        can_encrypt_storage:
          type: boolean
          x-go-name: CanEncryptStorage
        can_sign:
          type: boolean
          x-go-name: CanSign
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        emails:
          items:
            $ref: '#/components/schemas/GPGKeyEmail'
          type: array
          x-go-name: Emails
        expires_at:
          format: date-time
          type: string
          x-go-name: Expires
        id:
          format: int64
          type: integer
          x-go-name: ID
        key_id:
          type: string
          x-go-name: KeyID
        primary_key_id:
          type: string
          x-go-name: PrimaryKeyID
        public_key:
          type: string
          x-go-name: PublicKey
        subkeys:
          items:
            $ref: '#/components/schemas/GPGKey'
          type: array
          x-go-name: SubsKey
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GPGKeyEmail:
      description: GPGKeyEmail an email attached to a GPGKey
      example:
        verified: true
        email: email
      properties:
        email:
          type: string
          x-go-name: Email
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralAPISettings:
      description: GeneralAPISettings contains global api settings exposed by it
      example:
        max_response_items: 5
        default_git_trees_per_page: 0
        default_paging_num: 1
        default_max_blob_size: 6
      properties:
        default_git_trees_per_page:
          format: int64
          type: integer
          x-go-name: DefaultGitTreesPerPage
        default_max_blob_size:
          format: int64
          type: integer
          x-go-name: DefaultMaxBlobSize
        default_paging_num:
          format: int64
          type: integer
          x-go-name: DefaultPagingNum
        max_response_items:
          format: int64
          type: integer
          x-go-name: MaxResponseItems
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralAttachmentSettings:
      description: GeneralAttachmentSettings contains global Attachment settings exposed
        by API
      example:
        max_files: 0
        allowed_types: allowed_types
        enabled: true
        max_size: 6
      properties:
        allowed_types:
          type: string
          x-go-name: AllowedTypes
        enabled:
          type: boolean
          x-go-name: Enabled
        max_files:
          format: int64
          type: integer
          x-go-name: MaxFiles
        max_size:
          format: int64
          type: integer
          x-go-name: MaxSize
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralRepoSettings:
      description: GeneralRepoSettings contains global repository settings exposed
        by API
      example:
        migrations_disabled: true
        http_git_disabled: true
        lfs_disabled: true
        mirrors_disabled: true
        time_tracking_disabled: true
        stars_disabled: true
      properties:
        http_git_disabled:
          type: boolean
          x-go-name: HTTPGitDisabled
        lfs_disabled:
          type: boolean
          x-go-name: LFSDisabled
        migrations_disabled:
          type: boolean
          x-go-name: MigrationsDisabled
        mirrors_disabled:
          type: boolean
          x-go-name: MirrorsDisabled
        stars_disabled:
          type: boolean
          x-go-name: StarsDisabled
        time_tracking_disabled:
          type: boolean
          x-go-name: TimeTrackingDisabled
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GeneralUISettings:
      description: GeneralUISettings contains global ui settings exposed by API
      example:
        custom_emojis:
        - custom_emojis
        - custom_emojis
        allowed_reactions:
        - allowed_reactions
        - allowed_reactions
        default_theme: default_theme
      properties:
        allowed_reactions:
          items:
            type: string
          type: array
          x-go-name: AllowedReactions
        custom_emojis:
          items:
            type: string
          type: array
          x-go-name: CustomEmojis
        default_theme:
          type: string
          x-go-name: DefaultTheme
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GenerateRepoOption:
      description: GenerateRepoOption options when creating repository using a template
      example:
        git_content: true
        owner: owner
        protected_branch: true
        private: true
        git_hooks: true
        webhooks: true
        topics: true
        name: name
        description: description
        default_branch: default_branch
        avatar: true
        labels: true
      properties:
        avatar:
          description: include avatar of the template repo
          type: boolean
          x-go-name: Avatar
        default_branch:
          description: Default branch of the new repository
          type: string
          x-go-name: DefaultBranch
        description:
          description: Description of the repository to create
          type: string
          x-go-name: Description
        git_content:
          description: include git content of default branch in template repo
          type: boolean
          x-go-name: GitContent
        git_hooks:
          description: include git hooks in template repo
          type: boolean
          x-go-name: GitHooks
        labels:
          description: include labels in template repo
          type: boolean
          x-go-name: Labels
        name:
          description: Name of the repository to create
          type: string
          x-go-name: Name
        owner:
          description: The organization or person who will own the new repository
          type: string
          x-go-name: Owner
        private:
          description: Whether the repository is private
          type: boolean
          x-go-name: Private
        protected_branch:
          description: include protected branches in template repo
          type: boolean
          x-go-name: ProtectedBranch
        topics:
          description: include topics in template repo
          type: boolean
          x-go-name: Topics
        webhooks:
          description: include webhooks in template repo
          type: boolean
          x-go-name: Webhooks
      required:
      - name
      - owner
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitBlobResponse:
      description: GitBlobResponse represents a git blob
      example:
        size: 0
        encoding: encoding
        sha: sha
        content: content
        url: url
      properties:
        content:
          type: string
          x-go-name: Content
        encoding:
          type: string
          x-go-name: Encoding
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitEntry:
      description: GitEntry represents a git tree
      example:
        mode: mode
        path: path
        size: 1
        type: type
        sha: sha
        url: url
      properties:
        mode:
          type: string
          x-go-name: Mode
        path:
          type: string
          x-go-name: Path
        sha:
          type: string
          x-go-name: SHA
        size:
          format: int64
          type: integer
          x-go-name: Size
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitHook:
      description: GitHook represents a Git repository hook
      example:
        is_active: true
        name: name
        content: content
      properties:
        content:
          type: string
          x-go-name: Content
        is_active:
          type: boolean
          x-go-name: IsActive
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitObject:
      example:
        type: type
        sha: sha
        url: url
      properties:
        sha:
          type: string
          x-go-name: SHA
        type:
          type: string
          x-go-name: Type
        url:
          type: string
          x-go-name: URL
      title: GitObject represents a Git object.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitTreeResponse:
      description: GitTreeResponse returns a git tree
      example:
        total_count: 6
        tree:
        - mode: mode
          path: path
          size: 1
          type: type
          sha: sha
          url: url
        - mode: mode
          path: path
          size: 1
          type: type
          sha: sha
          url: url
        truncated: true
        page: 0
        sha: sha
        url: url
      properties:
        page:
          format: int64
          type: integer
          x-go-name: Page
        sha:
          type: string
          x-go-name: SHA
        total_count:
          format: int64
          type: integer
          x-go-name: TotalCount
        tree:
          items:
            $ref: '#/components/schemas/GitEntry'
          type: array
          x-go-name: Entries
        truncated:
          type: boolean
          x-go-name: Truncated
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    GitignoreTemplateInfo:
      description: GitignoreTemplateInfo name and text of a gitignore template
      example:
        name: name
        source: source
      properties:
        name:
          type: string
          x-go-name: Name
        source:
          type: string
          x-go-name: Source
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Hook:
      description: Hook a hook is a web hook when one repository changed
      example:
        branch_filter: branch_filter
        updated_at: 2000-01-23T04:56:07.000+00:00
        active: true
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        type: type
        config:
          key: config
        authorization_header: authorization_header
        events:
        - events
        - events
      properties:
        active:
          type: boolean
          x-go-name: Active
        authorization_header:
          type: string
          x-go-name: AuthorizationHeader
        branch_filter:
          type: string
          x-go-name: BranchFilter
        config:
          additionalProperties:
            type: string
          type: object
          x-go-name: Config
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        events:
          items:
            type: string
          type: array
          x-go-name: Events
        id:
          format: int64
          type: integer
          x-go-name: ID
        type:
          type: string
          x-go-name: Type
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Identity:
      description: Identity for a person's identity like an author or committer
      example:
        name: name
        email: email
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    InternalTracker:
      description: InternalTracker represents settings for internal tracker
      example:
        enable_issue_dependencies: true
        allow_only_contributors_to_track_time: true
        enable_time_tracker: true
      properties:
        allow_only_contributors_to_track_time:
          description: Let only contributors track time (Built-in issue tracker)
          type: boolean
          x-go-name: AllowOnlyContributorsToTrackTime
        enable_issue_dependencies:
          description: Enable dependencies for issues and pull requests (Built-in
            issue tracker)
          type: boolean
          x-go-name: EnableIssueDependencies
        enable_time_tracker:
          description: Enable time tracking (Built-in issue tracker)
          type: boolean
          x-go-name: EnableTimeTracker
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Issue:
      description: Issue represents an issue in a repository
      example:
        is_locked: true
        pin_order: 9
        assignees:
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        created_at: 2000-01-23T04:56:07.000+00:00
        body: body
        repository:
          owner: owner
          full_name: full_name
          name: name
          id: 3
        title: title
        number: 2
        ref: ref
        assets:
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        id: 6
        state: state
        pull_request:
          draft: true
          html_url: html_url
          merged_at: 2000-01-23T04:56:07.000+00:00
          merged: true
        closed_at: 2000-01-23T04:56:07.000+00:00
        comments: 0
        original_author_id: 7
        due_date: 2000-01-23T04:56:07.000+00:00
        url: url
        labels:
        - color: 00aabb
          is_archived: false
          name: name
          description: description
          exclusive: false
          id: 0
          url: url
        - color: 00aabb
          is_archived: false
          name: name
          description: description
          exclusive: false
          id: 0
          url: url
        milestone:
          closed_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          state: state
          closed_issues: 1
          open_issues: 5
          title: title
          due_on: 2000-01-23T04:56:07.000+00:00
        html_url: html_url
        assignee:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        original_author: original_author
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        assets:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
          x-go-name: Attachments
        assignee:
          $ref: '#/components/schemas/User'
        assignees:
          items:
            $ref: '#/components/schemas/User'
          type: array
          x-go-name: Assignees
        body:
          type: string
          x-go-name: Body
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        comments:
          format: int64
          type: integer
          x-go-name: Comments
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        is_locked:
          type: boolean
          x-go-name: IsLocked
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
          x-go-name: Labels
        milestone:
          $ref: '#/components/schemas/Milestone'
        number:
          format: int64
          type: integer
          x-go-name: Index
        original_author:
          type: string
          x-go-name: OriginalAuthor
        original_author_id:
          format: int64
          type: integer
          x-go-name: OriginalAuthorID
        pin_order:
          format: int64
          type: integer
          x-go-name: PinOrder
        pull_request:
          $ref: '#/components/schemas/PullRequestMeta'
        ref:
          type: string
          x-go-name: Ref
        repository:
          $ref: '#/components/schemas/RepositoryMeta'
        state:
          description: StateType issue state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        title:
          type: string
          x-go-name: Title
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueConfig:
      example:
        contact_links:
        - about: about
          name: name
          url: url
        - about: about
          name: name
          url: url
        blank_issues_enabled: true
      properties:
        blank_issues_enabled:
          type: boolean
          x-go-name: BlankIssuesEnabled
        contact_links:
          items:
            $ref: '#/components/schemas/IssueConfigContactLink'
          type: array
          x-go-name: ContactLinks
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueConfigContactLink:
      example:
        about: about
        name: name
        url: url
      properties:
        about:
          type: string
          x-go-name: About
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueConfigValidation:
      example:
        valid: true
        message: message
      properties:
        message:
          type: string
          x-go-name: Message
        valid:
          type: boolean
          x-go-name: Valid
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueDeadline:
      description: IssueDeadline represents an issue deadline
      example:
        due_date: 2000-01-23T04:56:07.000+00:00
      properties:
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueFormField:
      description: IssueFormField represents a form field
      example:
        visible:
        - null
        - null
        attributes:
          key: "{}"
        id: id
        validations:
          key: "{}"
        type: type
      properties:
        attributes:
          additionalProperties:
            type: object
          type: object
          x-go-name: Attributes
        id:
          type: string
          x-go-name: ID
        type:
          title: "IssueFormFieldType defines issue form field type, can be \"markdown\"\
            , \"textarea\", \"input\", \"dropdown\" or \"checkboxes\""
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        validations:
          additionalProperties:
            type: object
          type: object
          x-go-name: Validations
        visible:
          items:
            $ref: '#/components/schemas/IssueFormFieldVisible'
          type: array
          x-go-name: Visible
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueFormFieldType:
      title: "IssueFormFieldType defines issue form field type, can be \"markdown\"\
        , \"textarea\", \"input\", \"dropdown\" or \"checkboxes\""
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueFormFieldVisible:
      description: IssueFormFieldVisible defines issue form field visible
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueLabelsOption:
      description: IssueLabelsOption a collection of labels
      example:
        labels:
        - "{}"
        - "{}"
      properties:
        labels:
          description: |-
            Labels can be a list of integers representing label IDs
            or a list of strings representing label names
          items:
            type: object
          type: array
          x-go-name: Labels
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueMeta:
      description: IssueMeta basic issue information
      example:
        owner: owner
        repo: repo
        index: 0
      properties:
        index:
          format: int64
          type: integer
          x-go-name: Index
        owner:
          type: string
          x-go-name: Owner
        repo:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueTemplate:
      description: IssueTemplate represents an issue template for a repository
      example:
        ref: ref
        file_name: file_name
        about: about
        name: name
        body:
        - visible:
          - null
          - null
          attributes:
            key: "{}"
          id: id
          validations:
            key: "{}"
          type: type
        - visible:
          - null
          - null
          attributes:
            key: "{}"
          id: id
          validations:
            key: "{}"
          type: type
        title: title
        content: content
        labels:
        - labels
        - labels
      properties:
        about:
          type: string
          x-go-name: About
        body:
          items:
            $ref: '#/components/schemas/IssueFormField'
          type: array
          x-go-name: Fields
        content:
          type: string
          x-go-name: Content
        file_name:
          type: string
          x-go-name: FileName
        labels:
          items:
            type: string
          type: array
          x-go-package: code.gitea.io/gitea/modules/structs
        name:
          type: string
          x-go-name: Name
        ref:
          type: string
          x-go-name: Ref
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    IssueTemplateLabels:
      items:
        type: string
      type: array
      x-go-package: code.gitea.io/gitea/modules/structs
    Label:
      description: Label a label to an issue or a pr
      example:
        color: 00aabb
        is_archived: false
        name: name
        description: description
        exclusive: false
        id: 0
        url: url
      properties:
        color:
          example: 00aabb
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        exclusive:
          example: false
          type: boolean
          x-go-name: Exclusive
        id:
          format: int64
          type: integer
          x-go-name: ID
        is_archived:
          example: false
          type: boolean
          x-go-name: IsArchived
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    LabelTemplate:
      description: LabelTemplate info of a Label template
      example:
        color: 00aabb
        name: name
        description: description
        exclusive: false
      properties:
        color:
          example: 00aabb
          type: string
          x-go-name: Color
        description:
          type: string
          x-go-name: Description
        exclusive:
          example: false
          type: boolean
          x-go-name: Exclusive
        name:
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    LicenseTemplateInfo:
      description: LicensesInfo contains information about a License
      example:
        implementation: implementation
        name: name
        body: body
        key: key
        url: url
      properties:
        body:
          type: string
          x-go-name: Body
        implementation:
          type: string
          x-go-name: Implementation
        key:
          type: string
          x-go-name: Key
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    LicensesTemplateListEntry:
      description: LicensesListEntry is used for the API
      example:
        name: name
        key: key
        url: url
      properties:
        key:
          type: string
          x-go-name: Key
        name:
          type: string
          x-go-name: Name
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    MarkdownOption:
      description: MarkdownOption markdown options
      example:
        Context: Context
        Mode: Mode
        Wiki: true
        Text: Text
      properties:
        Context:
          description: |-
            Context to render

            in: body
          type: string
        Mode:
          description: |-
            Mode to render (comment, gfm, markdown)

            in: body
          type: string
        Text:
          description: |-
            Text markdown to render

            in: body
          type: string
        Wiki:
          description: |-
            Is it a wiki page ?

            in: body
          type: boolean
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    MarkupOption:
      description: MarkupOption markup options
      example:
        Context: Context
        FilePath: FilePath
        Mode: Mode
        Wiki: true
        Text: Text
      properties:
        Context:
          description: |-
            Context to render

            in: body
          type: string
        FilePath:
          description: |-
            File path for detecting extension in file mode

            in: body
          type: string
        Mode:
          description: |-
            Mode to render (comment, gfm, markdown, file)

            in: body
          type: string
        Text:
          description: |-
            Text markup to render

            in: body
          type: string
        Wiki:
          description: |-
            Is it a wiki page ?

            in: body
          type: boolean
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    MergePullRequestOption:
      description: MergePullRequestForm form for merging Pull Request
      example:
        force_merge: true
        head_commit_id: head_commit_id
        delete_branch_after_merge: true
        merge_when_checks_succeed: true
        Do: merge
        MergeCommitID: MergeCommitID
        MergeMessageField: MergeMessageField
        MergeTitleField: MergeTitleField
      properties:
        Do:
          enum:
          - merge
          - rebase
          - rebase-merge
          - squash
          - fast-forward-only
          - manually-merged
          type: string
        MergeCommitID:
          type: string
        MergeMessageField:
          type: string
        MergeTitleField:
          type: string
        delete_branch_after_merge:
          type: boolean
          x-go-name: DeleteBranchAfterMerge
        force_merge:
          type: boolean
          x-go-name: ForceMerge
        head_commit_id:
          type: string
          x-go-name: HeadCommitID
        merge_when_checks_succeed:
          type: boolean
          x-go-name: MergeWhenChecksSucceed
      required:
      - Do
      type: object
      x-go-name: MergePullRequestForm
      x-go-package: code.gitea.io/gitea/services/forms
    MigrateRepoOptions:
      description: |-
        MigrateRepoOptions options for migrating repository's
        this is used to interact with api v1
      example:
        lfs_endpoint: lfs_endpoint
        mirror: true
        private: true
        clone_addr: clone_addr
        wiki: true
        auth_password: auth_password
        description: description
        issues: true
        labels: true
        releases: true
        pull_requests: true
        uid: 0
        auth_username: auth_username
        service: git
        lfs: true
        repo_name: repo_name
        auth_token: auth_token
        milestones: true
        repo_owner: repo_owner
        mirror_interval: mirror_interval
      properties:
        auth_password:
          type: string
          x-go-name: AuthPassword
        auth_token:
          type: string
          x-go-name: AuthToken
        auth_username:
          type: string
          x-go-name: AuthUsername
        clone_addr:
          type: string
          x-go-name: CloneAddr
        description:
          type: string
          x-go-name: Description
        issues:
          type: boolean
          x-go-name: Issues
        labels:
          type: boolean
          x-go-name: Labels
        lfs:
          type: boolean
          x-go-name: LFS
        lfs_endpoint:
          type: string
          x-go-name: LFSEndpoint
        milestones:
          type: boolean
          x-go-name: Milestones
        mirror:
          type: boolean
          x-go-name: Mirror
        mirror_interval:
          type: string
          x-go-name: MirrorInterval
        private:
          type: boolean
          x-go-name: Private
        pull_requests:
          type: boolean
          x-go-name: PullRequests
        releases:
          type: boolean
          x-go-name: Releases
        repo_name:
          type: string
          x-go-name: RepoName
        repo_owner:
          description: Name of User or Organisation who will own Repo after migration
          type: string
          x-go-name: RepoOwner
        service:
          enum:
          - git
          - github
          - gitea
          - gitlab
          - gogs
          - onedev
          - gitbucket
          - codebase
          type: string
          x-go-name: Service
        uid:
          description: deprecated (only for backwards compatibility)
          format: int64
          type: integer
          x-go-name: RepoOwnerID
        wiki:
          type: boolean
          x-go-name: Wiki
      required:
      - clone_addr
      - repo_name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Milestone:
      description: Milestone milestone is a collection of issues on one repository
      example:
        closed_at: 2000-01-23T04:56:07.000+00:00
        updated_at: 2000-01-23T04:56:07.000+00:00
        created_at: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 5
        state: state
        closed_issues: 1
        open_issues: 5
        title: title
        due_on: 2000-01-23T04:56:07.000+00:00
      properties:
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        closed_issues:
          format: int64
          type: integer
          x-go-name: ClosedIssues
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        description:
          type: string
          x-go-name: Description
        due_on:
          format: date-time
          type: string
          x-go-name: Deadline
        id:
          format: int64
          type: integer
          x-go-name: ID
        open_issues:
          format: int64
          type: integer
          x-go-name: OpenIssues
        state:
          description: StateType issue state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        title:
          type: string
          x-go-name: Title
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NewIssuePinsAllowed:
      description: NewIssuePinsAllowed represents an API response that says if new
        Issue Pins are allowed
      example:
        pull_requests: true
        issues: true
      properties:
        issues:
          type: boolean
          x-go-name: Issues
        pull_requests:
          type: boolean
          x-go-name: PullRequests
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NodeInfo:
      description: NodeInfo contains standardized way of exposing metadata about a
        server running one of the distributed social networks
      example:
        metadata: "{}"
        software:
          name: name
          repository: repository
          version: version
          homepage: homepage
        usage:
          localPosts: 6
          localComments: 0
          users:
            total: 5
            activeHalfyear: 1
            activeMonth: 5
        services:
          inbound:
          - inbound
          - inbound
          outbound:
          - outbound
          - outbound
        protocols:
        - protocols
        - protocols
        version: version
        openRegistrations: true
      properties:
        metadata:
          properties: {}
          type: object
          x-go-name: Metadata
        openRegistrations:
          type: boolean
          x-go-name: OpenRegistrations
        protocols:
          items:
            type: string
          type: array
          x-go-name: Protocols
        services:
          $ref: '#/components/schemas/NodeInfoServices'
        software:
          $ref: '#/components/schemas/NodeInfoSoftware'
        usage:
          $ref: '#/components/schemas/NodeInfoUsage'
        version:
          type: string
          x-go-name: Version
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NodeInfoServices:
      description: NodeInfoServices contains the third party sites this server can
        connect to via their application API
      example:
        inbound:
        - inbound
        - inbound
        outbound:
        - outbound
        - outbound
      properties:
        inbound:
          items:
            type: string
          type: array
          x-go-name: Inbound
        outbound:
          items:
            type: string
          type: array
          x-go-name: Outbound
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NodeInfoSoftware:
      description: NodeInfoSoftware contains Metadata about server software in use
      example:
        name: name
        repository: repository
        version: version
        homepage: homepage
      properties:
        homepage:
          type: string
          x-go-name: Homepage
        name:
          type: string
          x-go-name: Name
        repository:
          type: string
          x-go-name: Repository
        version:
          type: string
          x-go-name: Version
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NodeInfoUsage:
      description: NodeInfoUsage contains usage statistics for this server
      example:
        localPosts: 6
        localComments: 0
        users:
          total: 5
          activeHalfyear: 1
          activeMonth: 5
      properties:
        localComments:
          format: int64
          type: integer
          x-go-name: LocalComments
        localPosts:
          format: int64
          type: integer
          x-go-name: LocalPosts
        users:
          $ref: '#/components/schemas/NodeInfoUsageUsers'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NodeInfoUsageUsers:
      description: NodeInfoUsageUsers contains statistics about the users of this
        server
      example:
        total: 5
        activeHalfyear: 1
        activeMonth: 5
      properties:
        activeHalfyear:
          format: int64
          type: integer
          x-go-name: ActiveHalfyear
        activeMonth:
          format: int64
          type: integer
          x-go-name: ActiveMonth
        total:
          format: int64
          type: integer
          x-go-name: Total
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Note:
      description: Note contains information related to a git note
      example:
        commit:
          committer:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          stats:
            total: 1
            additions: 0
            deletions: 6
          author:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          commit:
            committer:
              date: date
              name: name
              email: email
            author:
              date: date
              name: name
              email: email
            tree:
              created: 2000-01-23T04:56:07.000+00:00
              sha: sha
              url: url
            message: message
            url: url
            verification:
              reason: reason
              payload: payload
              signature: signature
              verified: true
              signer:
                name: name
                email: email
                username: username
          files:
          - filename: filename
            status: status
          - filename: filename
            status: status
          sha: sha
          url: url
          parents:
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
          - created: 2000-01-23T04:56:07.000+00:00
            sha: sha
            url: url
        message: message
      properties:
        commit:
          $ref: '#/components/schemas/Commit'
        message:
          type: string
          x-go-name: Message
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationCount:
      description: NotificationCount number of unread notifications
      example:
        new: 0
      properties:
        new:
          format: int64
          type: integer
          x-go-name: New
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationSubject:
      description: NotificationSubject contains the notification subject (Issue/Pull/Commit)
      example:
        latest_comment_url: latest_comment_url
        latest_comment_html_url: latest_comment_html_url
        html_url: html_url
        state: state
        title: title
        type: type
        url: url
      properties:
        html_url:
          type: string
          x-go-name: HTMLURL
        latest_comment_html_url:
          type: string
          x-go-name: LatestCommentHTMLURL
        latest_comment_url:
          type: string
          x-go-name: LatestCommentURL
        state:
          description: StateType issue state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        title:
          type: string
          x-go-name: Title
        type:
          description: NotifySubjectType represent type of notification subject
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NotificationThread:
      description: NotificationThread expose Notification on API
      example:
        pinned: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        unread: true
        subject:
          latest_comment_url: latest_comment_url
          latest_comment_html_url: latest_comment_html_url
          html_url: html_url
          state: state
          title: title
          type: type
          url: url
        id: 0
        repository:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        url: url
      properties:
        id:
          format: int64
          type: integer
          x-go-name: ID
        pinned:
          type: boolean
          x-go-name: Pinned
        repository:
          $ref: '#/components/schemas/Repository'
        subject:
          $ref: '#/components/schemas/NotificationSubject'
        unread:
          type: boolean
          x-go-name: Unread
        updated_at:
          format: date-time
          type: string
          x-go-name: UpdatedAt
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    NotifySubjectType:
      description: NotifySubjectType represent type of notification subject
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    OAuth2Application:
      example:
        created: 2000-01-23T04:56:07.000+00:00
        name: name
        confidential_client: true
        client_secret: client_secret
        id: 0
        redirect_uris:
        - redirect_uris
        - redirect_uris
        client_id: client_id
      properties:
        client_id:
          type: string
          x-go-name: ClientID
        client_secret:
          type: string
          x-go-name: ClientSecret
        confidential_client:
          type: boolean
          x-go-name: ConfidentialClient
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        redirect_uris:
          items:
            type: string
          type: array
          x-go-name: RedirectURIs
      title: OAuth2Application represents an OAuth2 application.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Organization:
      description: Organization represents an organization
      example:
        website: website
        full_name: full_name
        repo_admin_change_team_access: true
        avatar_url: avatar_url
        visibility: visibility
        name: name
        description: description
        location: location
        id: 0
        email: email
        username: username
      properties:
        avatar_url:
          type: string
          x-go-name: AvatarURL
        description:
          type: string
          x-go-name: Description
        email:
          type: string
          x-go-name: Email
        full_name:
          type: string
          x-go-name: FullName
        id:
          format: int64
          type: integer
          x-go-name: ID
        location:
          type: string
          x-go-name: Location
        name:
          type: string
          x-go-name: Name
        repo_admin_change_team_access:
          type: boolean
          x-go-name: RepoAdminChangeTeamAccess
        username:
          description: deprecated
          type: string
          x-go-name: UserName
        visibility:
          type: string
          x-go-name: Visibility
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    OrganizationPermissions:
      description: OrganizationPermissions list different users permissions on an
        organization
      example:
        can_read: true
        is_admin: true
        can_create_repository: true
        can_write: true
        is_owner: true
      properties:
        can_create_repository:
          type: boolean
          x-go-name: CanCreateRepository
        can_read:
          type: boolean
          x-go-name: CanRead
        can_write:
          type: boolean
          x-go-name: CanWrite
        is_admin:
          type: boolean
          x-go-name: IsAdmin
        is_owner:
          type: boolean
          x-go-name: IsOwner
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PRBranchInfo:
      description: PRBranchInfo information about a branch
      example:
        ref: ref
        repo_id: 6
        repo:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        label: label
        sha: sha
      properties:
        label:
          type: string
          x-go-name: Name
        ref:
          type: string
          x-go-name: Ref
        repo:
          $ref: '#/components/schemas/Repository'
        repo_id:
          format: int64
          type: integer
          x-go-name: RepoID
        sha:
          type: string
          x-go-name: Sha
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Package:
      description: Package represents a package
      example:
        owner:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        creator:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        html_url: html_url
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        repository:
          parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        type: type
        version: version
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: CreatedAt
        creator:
          $ref: '#/components/schemas/User'
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        owner:
          $ref: '#/components/schemas/User'
        repository:
          $ref: '#/components/schemas/Repository'
        type:
          type: string
          x-go-name: Type
        version:
          type: string
          x-go-name: Version
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PackageFile:
      description: PackageFile represents a package file
      example:
        sha1: sha1
        sha256: sha256
        Size: 0
        name: name
        sha512: sha512
        id: 6
        md5: md5
      properties:
        Size:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
          x-go-name: ID
        md5:
          type: string
          x-go-name: HashMD5
        name:
          type: string
          x-go-name: Name
        sha1:
          type: string
          x-go-name: HashSHA1
        sha256:
          type: string
          x-go-name: HashSHA256
        sha512:
          type: string
          x-go-name: HashSHA512
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommit:
      description: PayloadCommit represents a commit
      example:
        committer:
          name: name
          email: email
          username: username
        removed:
        - removed
        - removed
        added:
        - added
        - added
        author:
          name: name
          email: email
          username: username
        modified:
        - modified
        - modified
        id: id
        message: message
        url: url
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        added:
          items:
            type: string
          type: array
          x-go-name: Added
        author:
          $ref: '#/components/schemas/PayloadUser'
        committer:
          $ref: '#/components/schemas/PayloadUser'
        id:
          description: sha1 hash of the commit
          type: string
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        modified:
          items:
            type: string
          type: array
          x-go-name: Modified
        removed:
          items:
            type: string
          type: array
          x-go-name: Removed
        timestamp:
          format: date-time
          type: string
          x-go-name: Timestamp
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadCommitVerification:
      description: PayloadCommitVerification represents the GPG verification of a
        commit
      example:
        reason: reason
        payload: payload
        signature: signature
        verified: true
        signer:
          name: name
          email: email
          username: username
      properties:
        payload:
          type: string
          x-go-name: Payload
        reason:
          type: string
          x-go-name: Reason
        signature:
          type: string
          x-go-name: Signature
        signer:
          $ref: '#/components/schemas/PayloadUser'
        verified:
          type: boolean
          x-go-name: Verified
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PayloadUser:
      description: PayloadUser represents the author or committer of a commit
      example:
        name: name
        email: email
        username: username
      properties:
        email:
          format: email
          type: string
          x-go-name: Email
        name:
          description: Full name of the commit author
          type: string
          x-go-name: Name
        username:
          type: string
          x-go-name: UserName
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Permission:
      description: Permission represents a set of permissions
      example:
        pull: true
        admin: true
        push: true
      properties:
        admin:
          type: boolean
          x-go-name: Admin
        pull:
          type: boolean
          x-go-name: Pull
        push:
          type: boolean
          x-go-name: Push
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PublicKey:
      description: PublicKey publickey is a user key to push code to repository
      example:
        key_type: key_type
        read_only: true
        fingerprint: fingerprint
        created_at: 2000-01-23T04:56:07.000+00:00
        id: 0
        title: title
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        key: key
        url: url
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        fingerprint:
          type: string
          x-go-name: Fingerprint
        id:
          format: int64
          type: integer
          x-go-name: ID
        key:
          type: string
          x-go-name: Key
        key_type:
          type: string
          x-go-name: KeyType
        read_only:
          type: boolean
          x-go-name: ReadOnly
        title:
          type: string
          x-go-name: Title
        url:
          type: string
          x-go-name: URL
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequest:
      description: PullRequest represents a pull request
      example:
        is_locked: true
        pin_order: 9
        deletions: 5
        assignees:
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        created_at: 2000-01-23T04:56:07.000+00:00
        diff_url: diff_url
        requested_reviewers:
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        merged_by:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        body: body
        title: title
        head:
          ref: ref
          repo_id: 6
          repo:
            parent: null
            has_packages: true
            open_pr_counter: 5
            has_releases: true
            language: language
            repo_transfer:
              teams:
              - can_create_org_repo: true
                units_map:
                  repo.code: read
                  repo.ext_issues: none
                  repo.ext_wiki: none
                  repo.issues: write
                  repo.projects: none
                  repo.pulls: owner
                  repo.releases: none
                  repo.wiki: admin
                organization:
                  website: website
                  full_name: full_name
                  repo_admin_change_team_access: true
                  avatar_url: avatar_url
                  visibility: visibility
                  name: name
                  description: description
                  location: location
                  id: 0
                  email: email
                  username: username
                name: name
                description: description
                permission: none
                id: 2
                includes_all_repositories: true
                units:
                - repo.code
                - repo.issues
                - repo.ext_issues
                - repo.wiki
                - repo.pulls
                - repo.releases
                - repo.projects
                - repo.ext_wiki
              - can_create_org_repo: true
                units_map:
                  repo.code: read
                  repo.ext_issues: none
                  repo.ext_wiki: none
                  repo.issues: write
                  repo.projects: none
                  repo.pulls: owner
                  repo.releases: none
                  repo.wiki: admin
                organization:
                  website: website
                  full_name: full_name
                  repo_admin_change_team_access: true
                  avatar_url: avatar_url
                  visibility: visibility
                  name: name
                  description: description
                  location: location
                  id: 0
                  email: email
                  username: username
                name: name
                description: description
                permission: none
                id: 2
                includes_all_repositories: true
                units:
                - repo.code
                - repo.issues
                - repo.ext_issues
                - repo.wiki
                - repo.pulls
                - repo.releases
                - repo.projects
                - repo.ext_wiki
              doer:
                website: website
                visibility: visibility
                created: 2000-01-23T04:56:07.000+00:00
                last_login: 2000-01-23T04:56:07.000+00:00
                active: true
                description: description
                language: language
                starred_repos_count: 5
                login: login
                is_admin: true
                full_name: full_name
                login_name: empty
                avatar_url: avatar_url
                following_count: 6
                restricted: true
                followers_count: 0
                html_url: html_url
                location: location
                id: 1
                prohibit_login: true
                source_id: 5
                email: email
              recipient:
                website: website
                visibility: visibility
                created: 2000-01-23T04:56:07.000+00:00
                last_login: 2000-01-23T04:56:07.000+00:00
                active: true
                description: description
                language: language
                starred_repos_count: 5
                login: login
                is_admin: true
                full_name: full_name
                login_name: empty
                avatar_url: avatar_url
                following_count: 6
                restricted: true
                followers_count: 0
                html_url: html_url
                location: location
                id: 1
                prohibit_login: true
                source_id: 5
                email: email
            has_pull_requests: true
            empty: true
            has_actions: true
            permissions:
              pull: true
              admin: true
              push: true
            id: 6
            release_counter: 5
            default_delete_branch_after_merge: true
            ssh_url: ssh_url
            full_name: full_name
            size: 7
            languages_url: languages_url
            allow_fast_forward_only_merge: true
            clone_url: clone_url
            html_url: html_url
            name: name
            default_branch: default_branch
            mirror_updated: 2000-01-23T04:56:07.000+00:00
            ignore_whitespace_conflicts: true
            template: true
            internal: true
            mirror: true
            private: true
            open_issues_count: 1
            link: link
            created_at: 2000-01-23T04:56:07.000+00:00
            default_allow_maintainer_edit: true
            description: description
            allow_rebase_update: true
            has_projects: true
            archived: true
            has_wiki: true
            updated_at: 2000-01-23T04:56:07.000+00:00
            allow_merge_commits: true
            stars_count: 9
            allow_rebase_explicit: true
            projects_mode: projects_mode
            external_tracker:
              external_tracker_regexp_pattern: external_tracker_regexp_pattern
              external_tracker_style: external_tracker_style
              external_tracker_url: external_tracker_url
              external_tracker_format: external_tracker_format
            mirror_interval: mirror_interval
            owner:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            allow_squash_merge: true
            external_wiki:
              external_wiki_url: external_wiki_url
            website: website
            archived_at: 2000-01-23T04:56:07.000+00:00
            internal_tracker:
              enable_issue_dependencies: true
              allow_only_contributors_to_track_time: true
              enable_time_tracker: true
            has_issues: true
            allow_rebase: true
            url: url
            object_format_name: sha1
            default_merge_style: default_merge_style
            fork: true
            avatar_url: avatar_url
            original_url: original_url
            watchers_count: 3
            forks_count: 0
          label: label
          sha: sha
        number: 7
        mergeable: true
        patch_url: patch_url
        updated_at: 2000-01-23T04:56:07.000+00:00
        merge_base: merge_base
        draft: true
        merge_commit_sha: merge_commit_sha
        id: 2
        state: state
        closed_at: 2000-01-23T04:56:07.000+00:00
        comments: 5
        additions: 0
        merged_at: 2000-01-23T04:56:07.000+00:00
        due_date: 2000-01-23T04:56:07.000+00:00
        merged: true
        review_comments: 3
        changed_files: 1
        url: url
        labels:
        - color: 00aabb
          is_archived: false
          name: name
          description: description
          exclusive: false
          id: 0
          url: url
        - color: 00aabb
          is_archived: false
          name: name
          description: description
          exclusive: false
          id: 0
          url: url
        milestone:
          closed_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          state: state
          closed_issues: 1
          open_issues: 5
          title: title
          due_on: 2000-01-23T04:56:07.000+00:00
        allow_maintainer_edit: true
        html_url: html_url
        assignee:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        base:
          ref: ref
          repo_id: 6
          repo:
            parent: null
            has_packages: true
            open_pr_counter: 5
            has_releases: true
            language: language
            repo_transfer:
              teams:
              - can_create_org_repo: true
                units_map:
                  repo.code: read
                  repo.ext_issues: none
                  repo.ext_wiki: none
                  repo.issues: write
                  repo.projects: none
                  repo.pulls: owner
                  repo.releases: none
                  repo.wiki: admin
                organization:
                  website: website
                  full_name: full_name
                  repo_admin_change_team_access: true
                  avatar_url: avatar_url
                  visibility: visibility
                  name: name
                  description: description
                  location: location
                  id: 0
                  email: email
                  username: username
                name: name
                description: description
                permission: none
                id: 2
                includes_all_repositories: true
                units:
                - repo.code
                - repo.issues
                - repo.ext_issues
                - repo.wiki
                - repo.pulls
                - repo.releases
                - repo.projects
                - repo.ext_wiki
              - can_create_org_repo: true
                units_map:
                  repo.code: read
                  repo.ext_issues: none
                  repo.ext_wiki: none
                  repo.issues: write
                  repo.projects: none
                  repo.pulls: owner
                  repo.releases: none
                  repo.wiki: admin
                organization:
                  website: website
                  full_name: full_name
                  repo_admin_change_team_access: true
                  avatar_url: avatar_url
                  visibility: visibility
                  name: name
                  description: description
                  location: location
                  id: 0
                  email: email
                  username: username
                name: name
                description: description
                permission: none
                id: 2
                includes_all_repositories: true
                units:
                - repo.code
                - repo.issues
                - repo.ext_issues
                - repo.wiki
                - repo.pulls
                - repo.releases
                - repo.projects
                - repo.ext_wiki
              doer:
                website: website
                visibility: visibility
                created: 2000-01-23T04:56:07.000+00:00
                last_login: 2000-01-23T04:56:07.000+00:00
                active: true
                description: description
                language: language
                starred_repos_count: 5
                login: login
                is_admin: true
                full_name: full_name
                login_name: empty
                avatar_url: avatar_url
                following_count: 6
                restricted: true
                followers_count: 0
                html_url: html_url
                location: location
                id: 1
                prohibit_login: true
                source_id: 5
                email: email
              recipient:
                website: website
                visibility: visibility
                created: 2000-01-23T04:56:07.000+00:00
                last_login: 2000-01-23T04:56:07.000+00:00
                active: true
                description: description
                language: language
                starred_repos_count: 5
                login: login
                is_admin: true
                full_name: full_name
                login_name: empty
                avatar_url: avatar_url
                following_count: 6
                restricted: true
                followers_count: 0
                html_url: html_url
                location: location
                id: 1
                prohibit_login: true
                source_id: 5
                email: email
            has_pull_requests: true
            empty: true
            has_actions: true
            permissions:
              pull: true
              admin: true
              push: true
            id: 6
            release_counter: 5
            default_delete_branch_after_merge: true
            ssh_url: ssh_url
            full_name: full_name
            size: 7
            languages_url: languages_url
            allow_fast_forward_only_merge: true
            clone_url: clone_url
            html_url: html_url
            name: name
            default_branch: default_branch
            mirror_updated: 2000-01-23T04:56:07.000+00:00
            ignore_whitespace_conflicts: true
            template: true
            internal: true
            mirror: true
            private: true
            open_issues_count: 1
            link: link
            created_at: 2000-01-23T04:56:07.000+00:00
            default_allow_maintainer_edit: true
            description: description
            allow_rebase_update: true
            has_projects: true
            archived: true
            has_wiki: true
            updated_at: 2000-01-23T04:56:07.000+00:00
            allow_merge_commits: true
            stars_count: 9
            allow_rebase_explicit: true
            projects_mode: projects_mode
            external_tracker:
              external_tracker_regexp_pattern: external_tracker_regexp_pattern
              external_tracker_style: external_tracker_style
              external_tracker_url: external_tracker_url
              external_tracker_format: external_tracker_format
            mirror_interval: mirror_interval
            owner:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            allow_squash_merge: true
            external_wiki:
              external_wiki_url: external_wiki_url
            website: website
            archived_at: 2000-01-23T04:56:07.000+00:00
            internal_tracker:
              enable_issue_dependencies: true
              allow_only_contributors_to_track_time: true
              enable_time_tracker: true
            has_issues: true
            allow_rebase: true
            url: url
            object_format_name: sha1
            default_merge_style: default_merge_style
            fork: true
            avatar_url: avatar_url
            original_url: original_url
            watchers_count: 3
            forks_count: 0
          label: label
          sha: sha
      properties:
        additions:
          format: int64
          type: integer
          x-go-name: Additions
        allow_maintainer_edit:
          type: boolean
          x-go-name: AllowMaintainerEdit
        assignee:
          $ref: '#/components/schemas/User'
        assignees:
          items:
            $ref: '#/components/schemas/User'
          type: array
          x-go-name: Assignees
        base:
          $ref: '#/components/schemas/PRBranchInfo'
        body:
          type: string
          x-go-name: Body
        changed_files:
          format: int64
          type: integer
          x-go-name: ChangedFiles
        closed_at:
          format: date-time
          type: string
          x-go-name: Closed
        comments:
          format: int64
          type: integer
          x-go-name: Comments
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        deletions:
          format: int64
          type: integer
          x-go-name: Deletions
        diff_url:
          type: string
          x-go-name: DiffURL
        draft:
          type: boolean
          x-go-name: Draft
        due_date:
          format: date-time
          type: string
          x-go-name: Deadline
        head:
          $ref: '#/components/schemas/PRBranchInfo'
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        is_locked:
          type: boolean
          x-go-name: IsLocked
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
          x-go-name: Labels
        merge_base:
          type: string
          x-go-name: MergeBase
        merge_commit_sha:
          type: string
          x-go-name: MergedCommitID
        mergeable:
          type: boolean
          x-go-name: Mergeable
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          format: date-time
          type: string
          x-go-name: Merged
        merged_by:
          $ref: '#/components/schemas/User'
        milestone:
          $ref: '#/components/schemas/Milestone'
        number:
          format: int64
          type: integer
          x-go-name: Index
        patch_url:
          type: string
          x-go-name: PatchURL
        pin_order:
          format: int64
          type: integer
          x-go-name: PinOrder
        requested_reviewers:
          items:
            $ref: '#/components/schemas/User'
          type: array
          x-go-name: RequestedReviewers
        review_comments:
          description: number of review comments made on the diff of a PR review (not
            including comments on commits or issues in a PR)
          format: int64
          type: integer
          x-go-name: ReviewComments
        state:
          description: StateType issue state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        title:
          type: string
          x-go-name: Title
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullRequestMeta:
      description: PullRequestMeta PR info if an issue is a PR
      example:
        draft: true
        html_url: html_url
        merged_at: 2000-01-23T04:56:07.000+00:00
        merged: true
      properties:
        draft:
          type: boolean
          x-go-name: IsWorkInProgress
        html_url:
          type: string
          x-go-name: HTMLURL
        merged:
          type: boolean
          x-go-name: HasMerged
        merged_at:
          format: date-time
          type: string
          x-go-name: Merged
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReview:
      description: PullReview represents a pull request review
      example:
        submitted_at: 2000-01-23T04:56:07.000+00:00
        dismissed: true
        official: true
        pull_request_url: pull_request_url
        team:
          can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        body: body
        stale: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        comments_count: 0
        html_url: html_url
        id: 6
        state: state
        commit_id: commit_id
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        body:
          type: string
          x-go-name: Body
        comments_count:
          format: int64
          type: integer
          x-go-name: CodeCommentsCount
        commit_id:
          type: string
          x-go-name: CommitID
        dismissed:
          type: boolean
          x-go-name: Dismissed
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        official:
          type: boolean
          x-go-name: Official
        pull_request_url:
          type: string
          x-go-name: HTMLPullURL
        stale:
          type: boolean
          x-go-name: Stale
        state:
          description: ReviewStateType review state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
        submitted_at:
          format: date-time
          type: string
          x-go-name: Submitted
        team:
          $ref: '#/components/schemas/Team'
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReviewComment:
      description: PullReviewComment represents a comment on a pull request review
      example:
        resolver:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        original_commit_id: original_commit_id
        diff_hunk: diff_hunk
        created_at: 2000-01-23T04:56:07.000+00:00
        pull_request_url: pull_request_url
        body: body
        path: path
        original_position: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        html_url: html_url
        pull_request_review_id: 5
        id: 0
        position: 1
        commit_id: commit_id
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        body:
          type: string
          x-go-name: Body
        commit_id:
          type: string
          x-go-name: CommitID
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        diff_hunk:
          type: string
          x-go-name: DiffHunk
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        original_commit_id:
          type: string
          x-go-name: OrigCommitID
        original_position:
          format: uint64
          type: integer
          x-go-name: OldLineNum
        path:
          type: string
          x-go-name: Path
        position:
          format: uint64
          type: integer
          x-go-name: LineNum
        pull_request_review_id:
          format: int64
          type: integer
          x-go-name: ReviewID
        pull_request_url:
          type: string
          x-go-name: HTMLPullURL
        resolver:
          $ref: '#/components/schemas/User'
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PullReviewRequestOptions:
      description: PullReviewRequestOptions are options to add or remove pull review
        requests
      example:
        team_reviewers:
        - team_reviewers
        - team_reviewers
        reviewers:
        - reviewers
        - reviewers
      properties:
        reviewers:
          items:
            type: string
          type: array
          x-go-name: Reviewers
        team_reviewers:
          items:
            type: string
          type: array
          x-go-name: TeamReviewers
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    PushMirror:
      description: PushMirror represents information of a push mirror
      example:
        sync_on_commit: true
        remote_name: remote_name
        created: 2000-01-23T04:56:07.000+00:00
        last_update: 2000-01-23T04:56:07.000+00:00
        interval: interval
        repo_name: repo_name
        last_error: last_error
        remote_address: remote_address
      properties:
        created:
          format: date-time
          type: string
          x-go-name: CreatedUnix
        interval:
          type: string
          x-go-name: Interval
        last_error:
          type: string
          x-go-name: LastError
        last_update:
          format: date-time
          type: string
          x-go-name: LastUpdateUnix
        remote_address:
          type: string
          x-go-name: RemoteAddress
        remote_name:
          type: string
          x-go-name: RemoteName
        repo_name:
          type: string
          x-go-name: RepoName
        sync_on_commit:
          type: boolean
          x-go-name: SyncOnCommit
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Reaction:
      description: Reaction contain one reaction
      example:
        created_at: 2000-01-23T04:56:07.000+00:00
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        content: content
      properties:
        content:
          type: string
          x-go-name: Reaction
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Reference:
      example:
        ref: ref
        url: url
        object:
          type: type
          sha: sha
          url: url
      properties:
        object:
          $ref: '#/components/schemas/GitObject'
        ref:
          type: string
          x-go-name: Ref
        url:
          type: string
          x-go-name: URL
      title: Reference represents a Git reference.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Release:
      description: Release represents a repository release
      example:
        author:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        tag_name: tag_name
        created_at: 2000-01-23T04:56:07.000+00:00
        body: body
        url: url
        assets:
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        - size: 5
          name: name
          created_at: 2000-01-23T04:56:07.000+00:00
          browser_download_url: browser_download_url
          id: 1
          uuid: uuid
          download_count: 6
        prerelease: true
        draft: true
        html_url: html_url
        target_commitish: target_commitish
        zipball_url: zipball_url
        name: name
        upload_url: upload_url
        id: 0
        published_at: 2000-01-23T04:56:07.000+00:00
        tarball_url: tarball_url
      properties:
        assets:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
          x-go-name: Attachments
        author:
          $ref: '#/components/schemas/User'
        body:
          type: string
          x-go-name: Note
        created_at:
          format: date-time
          type: string
          x-go-name: CreatedAt
        draft:
          type: boolean
          x-go-name: IsDraft
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Title
        prerelease:
          type: boolean
          x-go-name: IsPrerelease
        published_at:
          format: date-time
          type: string
          x-go-name: PublishedAt
        tag_name:
          type: string
          x-go-name: TagName
        tarball_url:
          type: string
          x-go-name: TarURL
        target_commitish:
          type: string
          x-go-name: Target
        upload_url:
          type: string
          x-go-name: UploadURL
        url:
          type: string
          x-go-name: URL
        zipball_url:
          type: string
          x-go-name: ZipURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RenameUserOption:
      description: RenameUserOption options when renaming a user
      example:
        new_username: new_username
      properties:
        new_username:
          description: New username for this user. This name cannot be in use yet
            by any other user.
          type: string
          x-go-name: NewName
      required:
      - new_username
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoCollaboratorPermission:
      description: RepoCollaboratorPermission to get repository permission for a collaborator
      example:
        role_name: role_name
        permission: permission
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        permission:
          type: string
          x-go-name: Permission
        role_name:
          type: string
          x-go-name: RoleName
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoCommit:
      example:
        committer:
          date: date
          name: name
          email: email
        author:
          date: date
          name: name
          email: email
        tree:
          created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
        message: message
        url: url
        verification:
          reason: reason
          payload: payload
          signature: signature
          verified: true
          signer:
            name: name
            email: email
            username: username
      properties:
        author:
          $ref: '#/components/schemas/CommitUser'
        committer:
          $ref: '#/components/schemas/CommitUser'
        message:
          type: string
          x-go-name: Message
        tree:
          $ref: '#/components/schemas/CommitMeta'
        url:
          type: string
          x-go-name: URL
        verification:
          $ref: '#/components/schemas/PayloadCommitVerification'
      title: RepoCommit contains information of a commit in the context of a repository.
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoTopicOptions:
      description: RepoTopicOptions a collection of repo topic names
      example:
        topics:
        - topics
        - topics
      properties:
        topics:
          description: list of topic names
          items:
            type: string
          type: array
          x-go-name: Topics
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepoTransfer:
      description: RepoTransfer represents a pending repo transfer
      example:
        teams:
        - can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        - can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        doer:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        recipient:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        doer:
          $ref: '#/components/schemas/User'
        recipient:
          $ref: '#/components/schemas/User'
        teams:
          items:
            $ref: '#/components/schemas/Team'
          type: array
          x-go-name: Teams
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Repository:
      description: Repository represents a repository
      example:
        parent: null
        has_packages: true
        open_pr_counter: 5
        has_releases: true
        language: language
        repo_transfer:
          teams:
          - can_create_org_repo: true
            units_map:
              repo.code: read
              repo.ext_issues: none
              repo.ext_wiki: none
              repo.issues: write
              repo.projects: none
              repo.pulls: owner
              repo.releases: none
              repo.wiki: admin
            organization:
              website: website
              full_name: full_name
              repo_admin_change_team_access: true
              avatar_url: avatar_url
              visibility: visibility
              name: name
              description: description
              location: location
              id: 0
              email: email
              username: username
            name: name
            description: description
            permission: none
            id: 2
            includes_all_repositories: true
            units:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.projects
            - repo.ext_wiki
          - can_create_org_repo: true
            units_map:
              repo.code: read
              repo.ext_issues: none
              repo.ext_wiki: none
              repo.issues: write
              repo.projects: none
              repo.pulls: owner
              repo.releases: none
              repo.wiki: admin
            organization:
              website: website
              full_name: full_name
              repo_admin_change_team_access: true
              avatar_url: avatar_url
              visibility: visibility
              name: name
              description: description
              location: location
              id: 0
              email: email
              username: username
            name: name
            description: description
            permission: none
            id: 2
            includes_all_repositories: true
            units:
            - repo.code
            - repo.issues
            - repo.ext_issues
            - repo.wiki
            - repo.pulls
            - repo.releases
            - repo.projects
            - repo.ext_wiki
          doer:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          recipient:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        has_pull_requests: true
        empty: true
        has_actions: true
        permissions:
          pull: true
          admin: true
          push: true
        id: 6
        release_counter: 5
        default_delete_branch_after_merge: true
        ssh_url: ssh_url
        full_name: full_name
        size: 7
        languages_url: languages_url
        allow_fast_forward_only_merge: true
        clone_url: clone_url
        html_url: html_url
        name: name
        default_branch: default_branch
        mirror_updated: 2000-01-23T04:56:07.000+00:00
        ignore_whitespace_conflicts: true
        template: true
        internal: true
        mirror: true
        private: true
        open_issues_count: 1
        link: link
        created_at: 2000-01-23T04:56:07.000+00:00
        default_allow_maintainer_edit: true
        description: description
        allow_rebase_update: true
        has_projects: true
        archived: true
        has_wiki: true
        updated_at: 2000-01-23T04:56:07.000+00:00
        allow_merge_commits: true
        stars_count: 9
        allow_rebase_explicit: true
        projects_mode: projects_mode
        external_tracker:
          external_tracker_regexp_pattern: external_tracker_regexp_pattern
          external_tracker_style: external_tracker_style
          external_tracker_url: external_tracker_url
          external_tracker_format: external_tracker_format
        mirror_interval: mirror_interval
        owner:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        allow_squash_merge: true
        external_wiki:
          external_wiki_url: external_wiki_url
        website: website
        archived_at: 2000-01-23T04:56:07.000+00:00
        internal_tracker:
          enable_issue_dependencies: true
          allow_only_contributors_to_track_time: true
          enable_time_tracker: true
        has_issues: true
        allow_rebase: true
        url: url
        object_format_name: sha1
        default_merge_style: default_merge_style
        fork: true
        avatar_url: avatar_url
        original_url: original_url
        watchers_count: 3
        forks_count: 0
      properties:
        allow_fast_forward_only_merge:
          type: boolean
          x-go-name: AllowFastForwardOnly
        allow_merge_commits:
          type: boolean
          x-go-name: AllowMerge
        allow_rebase:
          type: boolean
          x-go-name: AllowRebase
        allow_rebase_explicit:
          type: boolean
          x-go-name: AllowRebaseMerge
        allow_rebase_update:
          type: boolean
          x-go-name: AllowRebaseUpdate
        allow_squash_merge:
          type: boolean
          x-go-name: AllowSquash
        archived:
          type: boolean
          x-go-name: Archived
        archived_at:
          format: date-time
          type: string
          x-go-name: ArchivedAt
        avatar_url:
          type: string
          x-go-name: AvatarURL
        clone_url:
          type: string
          x-go-name: CloneURL
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        default_allow_maintainer_edit:
          type: boolean
          x-go-name: DefaultAllowMaintainerEdit
        default_branch:
          type: string
          x-go-name: DefaultBranch
        default_delete_branch_after_merge:
          type: boolean
          x-go-name: DefaultDeleteBranchAfterMerge
        default_merge_style:
          type: string
          x-go-name: DefaultMergeStyle
        description:
          type: string
          x-go-name: Description
        empty:
          type: boolean
          x-go-name: Empty
        external_tracker:
          $ref: '#/components/schemas/ExternalTracker'
        external_wiki:
          $ref: '#/components/schemas/ExternalWiki'
        fork:
          type: boolean
          x-go-name: Fork
        forks_count:
          format: int64
          type: integer
          x-go-name: Forks
        full_name:
          type: string
          x-go-name: FullName
        has_actions:
          type: boolean
          x-go-name: HasActions
        has_issues:
          type: boolean
          x-go-name: HasIssues
        has_packages:
          type: boolean
          x-go-name: HasPackages
        has_projects:
          type: boolean
          x-go-name: HasProjects
        has_pull_requests:
          type: boolean
          x-go-name: HasPullRequests
        has_releases:
          type: boolean
          x-go-name: HasReleases
        has_wiki:
          type: boolean
          x-go-name: HasWiki
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        ignore_whitespace_conflicts:
          type: boolean
          x-go-name: IgnoreWhitespaceConflicts
        internal:
          type: boolean
          x-go-name: Internal
        internal_tracker:
          $ref: '#/components/schemas/InternalTracker'
        language:
          type: string
          x-go-name: Language
        languages_url:
          type: string
          x-go-name: LanguagesURL
        link:
          type: string
          x-go-name: Link
        mirror:
          type: boolean
          x-go-name: Mirror
        mirror_interval:
          type: string
          x-go-name: MirrorInterval
        mirror_updated:
          format: date-time
          type: string
          x-go-name: MirrorUpdated
        name:
          type: string
          x-go-name: Name
        object_format_name:
          description: ObjectFormatName of the underlying git repository
          enum:
          - sha1
          - sha256
          type: string
          x-go-name: ObjectFormatName
        open_issues_count:
          format: int64
          type: integer
          x-go-name: OpenIssues
        open_pr_counter:
          format: int64
          type: integer
          x-go-name: OpenPulls
        original_url:
          type: string
          x-go-name: OriginalURL
        owner:
          $ref: '#/components/schemas/User'
        parent:
          $ref: '#/components/schemas/Repository'
        permissions:
          $ref: '#/components/schemas/Permission'
        private:
          type: boolean
          x-go-name: Private
        projects_mode:
          type: string
          x-go-name: ProjectsMode
        release_counter:
          format: int64
          type: integer
          x-go-name: Releases
        repo_transfer:
          $ref: '#/components/schemas/RepoTransfer'
        size:
          format: int64
          type: integer
          x-go-name: Size
        ssh_url:
          type: string
          x-go-name: SSHURL
        stars_count:
          format: int64
          type: integer
          x-go-name: Stars
        template:
          type: boolean
          x-go-name: Template
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        url:
          type: string
          x-go-name: URL
        watchers_count:
          format: int64
          type: integer
          x-go-name: Watchers
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    RepositoryMeta:
      description: RepositoryMeta basic repository information
      example:
        owner: owner
        full_name: full_name
        name: name
        id: 3
      properties:
        full_name:
          type: string
          x-go-name: FullName
        id:
          format: int64
          type: integer
          x-go-name: ID
        name:
          type: string
          x-go-name: Name
        owner:
          type: string
          x-go-name: Owner
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ReviewStateType:
      description: ReviewStateType review state type
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    SearchResults:
      description: SearchResults results of a successful search
      example:
        data:
        - parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        - parent: null
          has_packages: true
          open_pr_counter: 5
          has_releases: true
          language: language
          repo_transfer:
            teams:
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            - can_create_org_repo: true
              units_map:
                repo.code: read
                repo.ext_issues: none
                repo.ext_wiki: none
                repo.issues: write
                repo.projects: none
                repo.pulls: owner
                repo.releases: none
                repo.wiki: admin
              organization:
                website: website
                full_name: full_name
                repo_admin_change_team_access: true
                avatar_url: avatar_url
                visibility: visibility
                name: name
                description: description
                location: location
                id: 0
                email: email
                username: username
              name: name
              description: description
              permission: none
              id: 2
              includes_all_repositories: true
              units:
              - repo.code
              - repo.issues
              - repo.ext_issues
              - repo.wiki
              - repo.pulls
              - repo.releases
              - repo.projects
              - repo.ext_wiki
            doer:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            recipient:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          has_pull_requests: true
          empty: true
          has_actions: true
          permissions:
            pull: true
            admin: true
            push: true
          id: 6
          release_counter: 5
          default_delete_branch_after_merge: true
          ssh_url: ssh_url
          full_name: full_name
          size: 7
          languages_url: languages_url
          allow_fast_forward_only_merge: true
          clone_url: clone_url
          html_url: html_url
          name: name
          default_branch: default_branch
          mirror_updated: 2000-01-23T04:56:07.000+00:00
          ignore_whitespace_conflicts: true
          template: true
          internal: true
          mirror: true
          private: true
          open_issues_count: 1
          link: link
          created_at: 2000-01-23T04:56:07.000+00:00
          default_allow_maintainer_edit: true
          description: description
          allow_rebase_update: true
          has_projects: true
          archived: true
          has_wiki: true
          updated_at: 2000-01-23T04:56:07.000+00:00
          allow_merge_commits: true
          stars_count: 9
          allow_rebase_explicit: true
          projects_mode: projects_mode
          external_tracker:
            external_tracker_regexp_pattern: external_tracker_regexp_pattern
            external_tracker_style: external_tracker_style
            external_tracker_url: external_tracker_url
            external_tracker_format: external_tracker_format
          mirror_interval: mirror_interval
          owner:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          allow_squash_merge: true
          external_wiki:
            external_wiki_url: external_wiki_url
          website: website
          archived_at: 2000-01-23T04:56:07.000+00:00
          internal_tracker:
            enable_issue_dependencies: true
            allow_only_contributors_to_track_time: true
            enable_time_tracker: true
          has_issues: true
          allow_rebase: true
          url: url
          object_format_name: sha1
          default_merge_style: default_merge_style
          fork: true
          avatar_url: avatar_url
          original_url: original_url
          watchers_count: 3
          forks_count: 0
        ok: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/Repository'
          type: array
          x-go-name: Data
        ok:
          type: boolean
          x-go-name: OK
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Secret:
      description: Secret represents a secret
      example:
        name: name
        created_at: 2000-01-23T04:56:07.000+00:00
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        name:
          description: the secret's name
          type: string
          x-go-name: Name
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    ServerVersion:
      description: ServerVersion wraps the version of the server
      example:
        version: version
      properties:
        version:
          type: string
          x-go-name: Version
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    StateType:
      description: StateType issue state type
      type: string
      x-go-package: code.gitea.io/gitea/modules/structs
    StopWatch:
      description: StopWatch represent a running stopwatch
      example:
        duration: duration
        seconds: 6
        issue_index: 0
        created: 2000-01-23T04:56:07.000+00:00
        repo_owner_name: repo_owner_name
        issue_title: issue_title
        repo_name: repo_name
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        duration:
          type: string
          x-go-name: Duration
        issue_index:
          format: int64
          type: integer
          x-go-name: IssueIndex
        issue_title:
          type: string
          x-go-name: IssueTitle
        repo_name:
          type: string
          x-go-name: RepoName
        repo_owner_name:
          type: string
          x-go-name: RepoOwnerName
        seconds:
          format: int64
          type: integer
          x-go-name: Seconds
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    SubmitPullReviewOptions:
      description: SubmitPullReviewOptions are options to submit a pending pull review
      example:
        body: body
        event: event
      properties:
        body:
          type: string
          x-go-name: Body
        event:
          description: ReviewStateType review state type
          type: string
          x-go-package: code.gitea.io/gitea/modules/structs
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Tag:
      description: Tag represents a repository tag
      example:
        zipball_url: zipball_url
        commit:
          created: 2000-01-23T04:56:07.000+00:00
          sha: sha
          url: url
        name: name
        id: id
        message: message
        tarball_url: tarball_url
      properties:
        commit:
          $ref: '#/components/schemas/CommitMeta'
        id:
          type: string
          x-go-name: ID
        message:
          type: string
          x-go-name: Message
        name:
          type: string
          x-go-name: Name
        tarball_url:
          type: string
          x-go-name: TarballURL
        zipball_url:
          type: string
          x-go-name: ZipballURL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    Team:
      description: Team represents a team in an organization
      example:
        can_create_org_repo: true
        units_map:
          repo.code: read
          repo.ext_issues: none
          repo.ext_wiki: none
          repo.issues: write
          repo.projects: none
          repo.pulls: owner
          repo.releases: none
          repo.wiki: admin
        organization:
          website: website
          full_name: full_name
          repo_admin_change_team_access: true
          avatar_url: avatar_url
          visibility: visibility
          name: name
          description: description
          location: location
          id: 0
          email: email
          username: username
        name: name
        description: description
        permission: none
        id: 2
        includes_all_repositories: true
        units:
        - repo.code
        - repo.issues
        - repo.ext_issues
        - repo.wiki
        - repo.pulls
        - repo.releases
        - repo.projects
        - repo.ext_wiki
      properties:
        can_create_org_repo:
          type: boolean
          x-go-name: CanCreateOrgRepo
        description:
          type: string
          x-go-name: Description
        id:
          format: int64
          type: integer
          x-go-name: ID
        includes_all_repositories:
          type: boolean
          x-go-name: IncludesAllRepositories
        name:
          type: string
          x-go-name: Name
        organization:
          $ref: '#/components/schemas/Organization'
        permission:
          enum:
          - none
          - read
          - write
          - admin
          - owner
          type: string
          x-go-name: Permission
        units:
          example:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
          items:
            type: string
          type: array
          x-go-name: Units
        units_map:
          additionalProperties:
            type: string
          example:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          type: object
          x-go-name: UnitsMap
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TimeStamp:
      description: TimeStamp defines a timestamp
      format: int64
      type: integer
      x-go-package: code.gitea.io/gitea/modules/timeutil
    TimelineComment:
      description: TimelineComment represents a timeline comment (comment of any type)
        on a commit or issue
      example:
        issue_url: issue_url
        review_id: 5
        ref_commit_sha: ref_commit_sha
        old_milestone:
          closed_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          state: state
          closed_issues: 1
          open_issues: 5
          title: title
          due_on: 2000-01-23T04:56:07.000+00:00
        ref_issue:
          is_locked: true
          pin_order: 9
          assignees:
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created_at: 2000-01-23T04:56:07.000+00:00
          body: body
          repository:
            owner: owner
            full_name: full_name
            name: name
            id: 3
          title: title
          number: 2
          ref: ref
          assets:
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          updated_at: 2000-01-23T04:56:07.000+00:00
          id: 6
          state: state
          pull_request:
            draft: true
            html_url: html_url
            merged_at: 2000-01-23T04:56:07.000+00:00
            merged: true
          closed_at: 2000-01-23T04:56:07.000+00:00
          comments: 0
          original_author_id: 7
          due_date: 2000-01-23T04:56:07.000+00:00
          url: url
          labels:
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          milestone:
            closed_at: 2000-01-23T04:56:07.000+00:00
            updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            description: description
            id: 5
            state: state
            closed_issues: 1
            open_issues: 5
            title: title
            due_on: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          assignee:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          original_author: original_author
          user:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        created_at: 2000-01-23T04:56:07.000+00:00
        old_title: old_title
        resolve_doer:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        body: body
        type: type
        new_title: new_title
        old_project_id: 6
        updated_at: 2000-01-23T04:56:07.000+00:00
        project_id: 1
        dependent_issue:
          is_locked: true
          pin_order: 9
          assignees:
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created_at: 2000-01-23T04:56:07.000+00:00
          body: body
          repository:
            owner: owner
            full_name: full_name
            name: name
            id: 3
          title: title
          number: 2
          ref: ref
          assets:
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          updated_at: 2000-01-23T04:56:07.000+00:00
          id: 6
          state: state
          pull_request:
            draft: true
            html_url: html_url
            merged_at: 2000-01-23T04:56:07.000+00:00
            merged: true
          closed_at: 2000-01-23T04:56:07.000+00:00
          comments: 0
          original_author_id: 7
          due_date: 2000-01-23T04:56:07.000+00:00
          url: url
          labels:
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          milestone:
            closed_at: 2000-01-23T04:56:07.000+00:00
            updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            description: description
            id: 5
            state: state
            closed_issues: 1
            open_issues: 5
            title: title
            due_on: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          assignee:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          original_author: original_author
          user:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        id: 0
        removed_assignee: true
        tracked_time:
          issue:
            is_locked: true
            pin_order: 9
            assignees:
            - website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            - website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            created_at: 2000-01-23T04:56:07.000+00:00
            body: body
            repository:
              owner: owner
              full_name: full_name
              name: name
              id: 3
            title: title
            number: 2
            ref: ref
            assets:
            - size: 5
              name: name
              created_at: 2000-01-23T04:56:07.000+00:00
              browser_download_url: browser_download_url
              id: 1
              uuid: uuid
              download_count: 6
            - size: 5
              name: name
              created_at: 2000-01-23T04:56:07.000+00:00
              browser_download_url: browser_download_url
              id: 1
              uuid: uuid
              download_count: 6
            updated_at: 2000-01-23T04:56:07.000+00:00
            id: 6
            state: state
            pull_request:
              draft: true
              html_url: html_url
              merged_at: 2000-01-23T04:56:07.000+00:00
              merged: true
            closed_at: 2000-01-23T04:56:07.000+00:00
            comments: 0
            original_author_id: 7
            due_date: 2000-01-23T04:56:07.000+00:00
            url: url
            labels:
            - color: 00aabb
              is_archived: false
              name: name
              description: description
              exclusive: false
              id: 0
              url: url
            - color: 00aabb
              is_archived: false
              name: name
              description: description
              exclusive: false
              id: 0
              url: url
            milestone:
              closed_at: 2000-01-23T04:56:07.000+00:00
              updated_at: 2000-01-23T04:56:07.000+00:00
              created_at: 2000-01-23T04:56:07.000+00:00
              description: description
              id: 5
              state: state
              closed_issues: 1
              open_issues: 5
              title: title
              due_on: 2000-01-23T04:56:07.000+00:00
            html_url: html_url
            assignee:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
            original_author: original_author
            user:
              website: website
              visibility: visibility
              created: 2000-01-23T04:56:07.000+00:00
              last_login: 2000-01-23T04:56:07.000+00:00
              active: true
              description: description
              language: language
              starred_repos_count: 5
              login: login
              is_admin: true
              full_name: full_name
              login_name: empty
              avatar_url: avatar_url
              following_count: 6
              restricted: true
              followers_count: 0
              html_url: html_url
              location: location
              id: 1
              prohibit_login: true
              source_id: 5
              email: email
          issue_id: 2
          user_id: 9
          created: 2000-01-23T04:56:07.000+00:00
          user_name: user_name
          id: 5
          time: 7
        ref_action: ref_action
        label:
          color: 00aabb
          is_archived: false
          name: name
          description: description
          exclusive: false
          id: 0
          url: url
        pull_request_url: pull_request_url
        milestone:
          closed_at: 2000-01-23T04:56:07.000+00:00
          updated_at: 2000-01-23T04:56:07.000+00:00
          created_at: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          state: state
          closed_issues: 1
          open_issues: 5
          title: title
          due_on: 2000-01-23T04:56:07.000+00:00
        new_ref: new_ref
        assignee_team:
          can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        old_ref: old_ref
        html_url: html_url
        ref_comment:
          issue_url: issue_url
          assets:
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          updated_at: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          original_author_id: 2
          created_at: 2000-01-23T04:56:07.000+00:00
          id: 5
          pull_request_url: pull_request_url
          body: body
          original_author: original_author
          user:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        assignee:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        user:
          website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
      properties:
        assignee:
          $ref: '#/components/schemas/User'
        assignee_team:
          $ref: '#/components/schemas/Team'
        body:
          type: string
          x-go-name: Body
        created_at:
          format: date-time
          type: string
          x-go-name: Created
        dependent_issue:
          $ref: '#/components/schemas/Issue'
        html_url:
          type: string
          x-go-name: HTMLURL
        id:
          format: int64
          type: integer
          x-go-name: ID
        issue_url:
          type: string
          x-go-name: IssueURL
        label:
          $ref: '#/components/schemas/Label'
        milestone:
          $ref: '#/components/schemas/Milestone'
        new_ref:
          type: string
          x-go-name: NewRef
        new_title:
          type: string
          x-go-name: NewTitle
        old_milestone:
          $ref: '#/components/schemas/Milestone'
        old_project_id:
          format: int64
          type: integer
          x-go-name: OldProjectID
        old_ref:
          type: string
          x-go-name: OldRef
        old_title:
          type: string
          x-go-name: OldTitle
        project_id:
          format: int64
          type: integer
          x-go-name: ProjectID
        pull_request_url:
          type: string
          x-go-name: PRURL
        ref_action:
          type: string
          x-go-name: RefAction
        ref_comment:
          $ref: '#/components/schemas/Comment'
        ref_commit_sha:
          description: commit SHA where issue/PR was referenced
          type: string
          x-go-name: RefCommitSHA
        ref_issue:
          $ref: '#/components/schemas/Issue'
        removed_assignee:
          description: whether the assignees were removed or added
          type: boolean
          x-go-name: RemovedAssignee
        resolve_doer:
          $ref: '#/components/schemas/User'
        review_id:
          format: int64
          type: integer
          x-go-name: ReviewID
        tracked_time:
          $ref: '#/components/schemas/TrackedTime'
        type:
          type: string
          x-go-name: Type
        updated_at:
          format: date-time
          type: string
          x-go-name: Updated
        user:
          $ref: '#/components/schemas/User'
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TopicName:
      description: TopicName a list of repo topic names
      example:
        topics:
        - topics
        - topics
      properties:
        topics:
          items:
            type: string
          type: array
          x-go-name: TopicNames
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TopicResponse:
      description: TopicResponse for returning topics
      example:
        created: 2000-01-23T04:56:07.000+00:00
        topic_name: topic_name
        id: 0
        repo_count: 6
        updated: 2000-01-23T04:56:07.000+00:00
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        repo_count:
          format: int64
          type: integer
          x-go-name: RepoCount
        topic_name:
          type: string
          x-go-name: Name
        updated:
          format: date-time
          type: string
          x-go-name: Updated
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TrackedTime:
      description: TrackedTime worked time for an issue / pr
      example:
        issue:
          is_locked: true
          pin_order: 9
          assignees:
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          - website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          created_at: 2000-01-23T04:56:07.000+00:00
          body: body
          repository:
            owner: owner
            full_name: full_name
            name: name
            id: 3
          title: title
          number: 2
          ref: ref
          assets:
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          - size: 5
            name: name
            created_at: 2000-01-23T04:56:07.000+00:00
            browser_download_url: browser_download_url
            id: 1
            uuid: uuid
            download_count: 6
          updated_at: 2000-01-23T04:56:07.000+00:00
          id: 6
          state: state
          pull_request:
            draft: true
            html_url: html_url
            merged_at: 2000-01-23T04:56:07.000+00:00
            merged: true
          closed_at: 2000-01-23T04:56:07.000+00:00
          comments: 0
          original_author_id: 7
          due_date: 2000-01-23T04:56:07.000+00:00
          url: url
          labels:
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          - color: 00aabb
            is_archived: false
            name: name
            description: description
            exclusive: false
            id: 0
            url: url
          milestone:
            closed_at: 2000-01-23T04:56:07.000+00:00
            updated_at: 2000-01-23T04:56:07.000+00:00
            created_at: 2000-01-23T04:56:07.000+00:00
            description: description
            id: 5
            state: state
            closed_issues: 1
            open_issues: 5
            title: title
            due_on: 2000-01-23T04:56:07.000+00:00
          html_url: html_url
          assignee:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
          original_author: original_author
          user:
            website: website
            visibility: visibility
            created: 2000-01-23T04:56:07.000+00:00
            last_login: 2000-01-23T04:56:07.000+00:00
            active: true
            description: description
            language: language
            starred_repos_count: 5
            login: login
            is_admin: true
            full_name: full_name
            login_name: empty
            avatar_url: avatar_url
            following_count: 6
            restricted: true
            followers_count: 0
            html_url: html_url
            location: location
            id: 1
            prohibit_login: true
            source_id: 5
            email: email
        issue_id: 2
        user_id: 9
        created: 2000-01-23T04:56:07.000+00:00
        user_name: user_name
        id: 5
        time: 7
      properties:
        created:
          format: date-time
          type: string
          x-go-name: Created
        id:
          format: int64
          type: integer
          x-go-name: ID
        issue:
          $ref: '#/components/schemas/Issue'
        issue_id:
          description: deprecated (only for backwards compatibility)
          format: int64
          type: integer
          x-go-name: IssueID
        time:
          description: Time in seconds
          format: int64
          type: integer
          x-go-name: Time
        user_id:
          description: deprecated (only for backwards compatibility)
          format: int64
          type: integer
          x-go-name: UserID
        user_name:
          type: string
          x-go-name: UserName
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    TransferRepoOption:
      description: TransferRepoOption options when transfer a repository's ownership
      example:
        new_owner: new_owner
        team_ids:
        - 0
        - 0
      properties:
        new_owner:
          type: string
          x-go-name: NewOwner
        team_ids:
          description: ID of the team or teams to add to the repository. Teams can
            only be added to organization-owned repositories.
          items:
            format: int64
            type: integer
          type: array
          x-go-name: TeamIDs
      required:
      - new_owner
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateFileOptions:
      description: |-
        UpdateFileOptions options for updating files
        Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
      example:
        committer:
          name: name
          email: email
        author:
          name: name
          email: email
        from_path: from_path
        new_branch: new_branch
        dates:
          committer: 2000-01-23T04:56:07.000+00:00
          author: 2000-01-23T04:56:07.000+00:00
        signoff: true
        message: message
        branch: branch
        sha: sha
        content: content
      properties:
        author:
          $ref: '#/components/schemas/Identity'
        branch:
          description: "branch (optional) to base this file from. if not given, the\
            \ default branch is used"
          type: string
          x-go-name: BranchName
        committer:
          $ref: '#/components/schemas/Identity'
        content:
          description: content must be base64 encoded
          type: string
          x-go-name: ContentBase64
        dates:
          $ref: '#/components/schemas/CommitDateOptions'
        from_path:
          description: from_path (optional) is the path of the original file which
            will be moved/renamed to the path in the URL
          type: string
          x-go-name: FromPath
        message:
          description: "message (optional) for the commit of this file. if not supplied,\
            \ a default message will be used"
          type: string
          x-go-name: Message
        new_branch:
          description: new_branch (optional) will make a new branch from `branch`
            before creating the file
          type: string
          x-go-name: NewBranchName
        sha:
          description: sha is the SHA for the file that already exists
          type: string
          x-go-name: SHA
        signoff:
          description: Add a Signed-off-by trailer by the committer at the end of
            the commit log message.
          type: boolean
          x-go-name: Signoff
      required:
      - content
      - sha
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateRepoAvatarOption:
      description: UpdateRepoAvatarUserOption options when updating the repo avatar
      example:
        image: image
      properties:
        image:
          description: image must be base64 encoded
          type: string
          x-go-name: Image
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateUserAvatarOption:
      description: UpdateUserAvatarUserOption options when updating the user avatar
      example:
        image: image
      properties:
        image:
          description: image must be base64 encoded
          type: string
          x-go-name: Image
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UpdateVariableOption:
      description: UpdateVariableOption the option when updating variable
      example:
        name: name
        value: value
      properties:
        name:
          description: "New name for the variable. If the field is empty, the variable\
            \ name won't be updated."
          type: string
          x-go-name: Name
        value:
          description: Value of the variable to update
          type: string
          x-go-name: Value
      required:
      - value
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    User:
      description: User represents a user
      example:
        website: website
        visibility: visibility
        created: 2000-01-23T04:56:07.000+00:00
        last_login: 2000-01-23T04:56:07.000+00:00
        active: true
        description: description
        language: language
        starred_repos_count: 5
        login: login
        is_admin: true
        full_name: full_name
        login_name: empty
        avatar_url: avatar_url
        following_count: 6
        restricted: true
        followers_count: 0
        html_url: html_url
        location: location
        id: 1
        prohibit_login: true
        source_id: 5
        email: email
      properties:
        active:
          description: Is user active
          type: boolean
          x-go-name: IsActive
        avatar_url:
          description: URL to the user's avatar
          type: string
          x-go-name: AvatarURL
        created:
          format: date-time
          type: string
          x-go-name: Created
        description:
          description: the user's description
          type: string
          x-go-name: Description
        email:
          format: email
          type: string
          x-go-name: Email
        followers_count:
          description: user counts
          format: int64
          type: integer
          x-go-name: Followers
        following_count:
          format: int64
          type: integer
          x-go-name: Following
        full_name:
          description: the user's full name
          type: string
          x-go-name: FullName
        html_url:
          description: URL to the user's gitea page
          type: string
          x-go-name: HTMLURL
        id:
          description: the user's id
          format: int64
          type: integer
          x-go-name: ID
        is_admin:
          description: Is the user an administrator
          type: boolean
          x-go-name: IsAdmin
        language:
          description: User locale
          type: string
          x-go-name: Language
        last_login:
          format: date-time
          type: string
          x-go-name: LastLogin
        location:
          description: the user's location
          type: string
          x-go-name: Location
        login:
          description: the user's username
          type: string
          x-go-name: UserName
        login_name:
          default: empty
          description: the user's authentication sign-in name.
          type: string
          x-go-name: LoginName
        prohibit_login:
          description: Is user login prohibited
          type: boolean
          x-go-name: ProhibitLogin
        restricted:
          description: Is user restricted
          type: boolean
          x-go-name: Restricted
        source_id:
          description: The ID of the user's Authentication Source
          format: int64
          type: integer
          x-go-name: SourceID
        starred_repos_count:
          format: int64
          type: integer
          x-go-name: StarredRepos
        visibility:
          description: "User visibility level option: public, limited, private"
          type: string
          x-go-name: Visibility
        website:
          description: the user's website
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UserBadgeOption:
      description: UserBadgeOption options for link between users and badges
      example:
        badge_slugs:
        - badge1
        - badge2
      properties:
        badge_slugs:
          example:
          - badge1
          - badge2
          items:
            type: string
          type: array
          x-go-name: BadgeSlugs
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UserHeatmapData:
      description: UserHeatmapData represents the data needed to create a heatmap
      example:
        contributions: 0
        timestamp: 6
      properties:
        contributions:
          format: int64
          type: integer
          x-go-name: Contributions
        timestamp:
          description: TimeStamp defines a timestamp
          format: int64
          type: integer
          x-go-package: code.gitea.io/gitea/modules/timeutil
      type: object
      x-go-package: code.gitea.io/gitea/models/activities
    UserSettings:
      description: UserSettings represents user settings
      example:
        website: website
        full_name: full_name
        hide_activity: true
        diff_view_style: diff_view_style
        description: description
        language: language
        location: location
        theme: theme
        hide_email: true
      properties:
        description:
          type: string
          x-go-name: Description
        diff_view_style:
          type: string
          x-go-name: DiffViewStyle
        full_name:
          type: string
          x-go-name: FullName
        hide_activity:
          type: boolean
          x-go-name: HideActivity
        hide_email:
          description: Privacy
          type: boolean
          x-go-name: HideEmail
        language:
          type: string
          x-go-name: Language
        location:
          type: string
          x-go-name: Location
        theme:
          type: string
          x-go-name: Theme
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    UserSettingsOptions:
      description: UserSettingsOptions represents options to change user settings
      example:
        website: website
        full_name: full_name
        hide_activity: true
        diff_view_style: diff_view_style
        description: description
        language: language
        location: location
        theme: theme
        hide_email: true
      properties:
        description:
          type: string
          x-go-name: Description
        diff_view_style:
          type: string
          x-go-name: DiffViewStyle
        full_name:
          type: string
          x-go-name: FullName
        hide_activity:
          type: boolean
          x-go-name: HideActivity
        hide_email:
          description: Privacy
          type: boolean
          x-go-name: HideEmail
        language:
          type: string
          x-go-name: Language
        location:
          type: string
          x-go-name: Location
        theme:
          type: string
          x-go-name: Theme
        website:
          type: string
          x-go-name: Website
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    WatchInfo:
      description: WatchInfo represents an API watch status of one repository
      example:
        ignored: true
        reason: "{}"
        subscribed: true
        created_at: 2000-01-23T04:56:07.000+00:00
        repository_url: repository_url
        url: url
      properties:
        created_at:
          format: date-time
          type: string
          x-go-name: CreatedAt
        ignored:
          type: boolean
          x-go-name: Ignored
        reason:
          type: object
          x-go-name: Reason
        repository_url:
          type: string
          x-go-name: RepositoryURL
        subscribed:
          type: boolean
          x-go-name: Subscribed
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    WikiCommit:
      description: WikiCommit page commit/revision
      example:
        author:
          date: date
          name: name
          email: email
        message: message
        commiter:
          date: date
          name: name
          email: email
        sha: sha
      properties:
        author:
          $ref: '#/components/schemas/CommitUser'
        commiter:
          $ref: '#/components/schemas/CommitUser'
        message:
          type: string
          x-go-name: Message
        sha:
          type: string
          x-go-name: ID
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    WikiCommitList:
      description: WikiCommitList commit/revision list
      example:
        count: 0
        commits:
        - author:
            date: date
            name: name
            email: email
          message: message
          commiter:
            date: date
            name: name
            email: email
          sha: sha
        - author:
            date: date
            name: name
            email: email
          message: message
          commiter:
            date: date
            name: name
            email: email
          sha: sha
      properties:
        commits:
          items:
            $ref: '#/components/schemas/WikiCommit'
          type: array
          x-go-name: WikiCommits
        count:
          format: int64
          type: integer
          x-go-name: Count
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    WikiPage:
      description: WikiPage a wiki page
      example:
        commit_count: 0
        last_commit:
          author:
            date: date
            name: name
            email: email
          message: message
          commiter:
            date: date
            name: name
            email: email
          sha: sha
        footer: footer
        sub_url: sub_url
        sidebar: sidebar
        html_url: html_url
        content_base64: content_base64
        title: title
      properties:
        commit_count:
          format: int64
          type: integer
          x-go-name: CommitCount
        content_base64:
          description: "Page content, base64 encoded"
          type: string
          x-go-name: ContentBase64
        footer:
          type: string
          x-go-name: Footer
        html_url:
          type: string
          x-go-name: HTMLURL
        last_commit:
          $ref: '#/components/schemas/WikiCommit'
        sidebar:
          type: string
          x-go-name: Sidebar
        sub_url:
          type: string
          x-go-name: SubURL
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    WikiPageMetaData:
      description: WikiPageMetaData wiki page meta information
      example:
        last_commit:
          author:
            date: date
            name: name
            email: email
          message: message
          commiter:
            date: date
            name: name
            email: email
          sha: sha
        sub_url: sub_url
        html_url: html_url
        title: title
      properties:
        html_url:
          type: string
          x-go-name: HTMLURL
        last_commit:
          $ref: '#/components/schemas/WikiCommit'
        sub_url:
          type: string
          x-go-name: SubURL
        title:
          type: string
          x-go-name: Title
      type: object
      x-go-package: code.gitea.io/gitea/modules/structs
    teamSearch_200_response:
      example:
        data:
        - can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        - can_create_org_repo: true
          units_map:
            repo.code: read
            repo.ext_issues: none
            repo.ext_wiki: none
            repo.issues: write
            repo.projects: none
            repo.pulls: owner
            repo.releases: none
            repo.wiki: admin
          organization:
            website: website
            full_name: full_name
            repo_admin_change_team_access: true
            avatar_url: avatar_url
            visibility: visibility
            name: name
            description: description
            location: location
            id: 0
            email: email
            username: username
          name: name
          description: description
          permission: none
          id: 2
          includes_all_repositories: true
          units:
          - repo.code
          - repo.issues
          - repo.ext_issues
          - repo.wiki
          - repo.pulls
          - repo.releases
          - repo.projects
          - repo.ext_wiki
        ok: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/Team'
          type: array
        ok:
          type: boolean
      type: object
    issueCreateIssueCommentAttachment_request:
      properties:
        attachment:
          description: attachment to upload
          format: binary
          type: string
      required:
      - attachment
      type: object
    repoCreateReleaseAttachment_request:
      properties:
        attachment:
          description: attachment to upload
          format: binary
          type: string
      type: object
    userSearch_200_response:
      example:
        data:
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        - website: website
          visibility: visibility
          created: 2000-01-23T04:56:07.000+00:00
          last_login: 2000-01-23T04:56:07.000+00:00
          active: true
          description: description
          language: language
          starred_repos_count: 5
          login: login
          is_admin: true
          full_name: full_name
          login_name: empty
          avatar_url: avatar_url
          following_count: 6
          restricted: true
          followers_count: 0
          html_url: html_url
          location: location
          id: 1
          prohibit_login: true
          source_id: 5
          email: email
        ok: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
        ok:
          type: boolean
      type: object
  securitySchemes:
    AccessToken:
      description: This authentication option is deprecated for removal in Gitea 1.23.
        Please use AuthorizationHeaderToken instead.
      in: query
      name: access_token
      type: apiKey
    AuthorizationHeaderToken:
      description: API tokens must be prepended with "token" followed by a space.
      in: header
      name: Authorization
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
    SudoHeader:
      description: Sudo API request as the user provided as the key. Admin privileges
        are required.
      in: header
      name: Sudo
      type: apiKey
    SudoParam:
      description: Sudo API request as the user provided as the key. Admin privileges
        are required.
      in: query
      name: sudo
      type: apiKey
    TOTPHeader:
      description: Must be used in combination with BasicAuth if two-factor authentication
        is enabled.
      in: header
      name: X-GITEA-OTP
      type: apiKey
    Token:
      description: This authentication option is deprecated for removal in Gitea 1.23.
        Please use AuthorizationHeaderToken instead.
      in: query
      name: token
      type: apiKey
x-original-swagger-version: "2.0"

